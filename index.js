/*
Author: Pier77Repeter
Project started on: 21 August 2021
Copyright: DiversityBOT© 2021-2025
*/

/* 
  INIT/SETUP CODE STRUCTURE:
  1 - Default imports
  2 - Other imports, not Discord API essentials
  3 - S4D components definitions
  4 - Error handler
  5 - Discord Client && Player creation + login
  6 - Db + vars creation
  7 - Useful functions declaration
  8 - Keep alive + bot is ready msgs and status
*/
// This is the start of DiversityBOT's code
(async () => {
  // default imports
  const { MessageEmbed, MessageButton, MessageActionRow, Intents, Permissions, MessageSelectMenu } = require("discord.js");
  const { exec } = require("child_process");
  let process = require("process");
  const events = require("events");
  const logs = require("discord-logs");
  const Discord = require("discord.js");
  const fs = require("fs");
  const delay = (ms) => new Promise((resolve) => setTimeout(resolve, ms));
  const axios = require("axios");

  // other imports
  const Database = require("easy-json-database");
  const { Calculator, Snake, Fight } = require("weky");
  const { TicTacToe } = require("discord-gamecord");
  let moment = require("moment");
  let https = require("https");
  let URL = require("url");
  const akinator = require("discord.js-akinator");
  const os = require("os-utils");
  const ms = require("ms");
  const miliConverter = require("millisecond-converter");
  const synchronizeSlashCommands = require("@frostzzone/discord-sync-commands");
  const S4D_APP_MC_GET = require("minecraft-server-util");
  const S4D_APP_MC_BEDROCK_GET = require("minecraft-server-status-simple");
  const S4D_APP_REDDIT_musakui = require("musakui");
  const lyricsFinder = require("lyrics-finder");
  let { Player, QueueRepeatMode } = require("discord-player");
  let playdl = require("play-dl");
  let DIG = require("discord-image-generation");

  // define s4d components (pretty sure 90% of these arent even used/required)
  let s4d = {
    Discord,
    fire: null,
    joiningMember: null,
    reply: null,
    player: null,
    manager: null,
    Inviter: null,
    message: null,
    notifer: null,
    checkMessageExists() {
      if (!s4d.client) throw new Error("You cannot perform message operations without a Discord.js client");
      if (!s4d.client.readyTimestamp)
        throw new Error("You cannot perform message operations while the bot is not connected to the Discord API");
    },
  };

  // error handler function, very important to be here as first function
  process.on("uncaughtException", function (err) {
    console.log("\nError detected, here is the log:");
    console.log(err);
    console.log("END OF THE LOG\n");
  });

  // create a new discord client
  s4d.client = new s4d.Discord.Client({
    intents: [Object.values(s4d.Discord.Intents.FLAGS).reduce((acc, p) => acc | p, 0)],
    partials: ["REACTION", "CHANNEL"],
  });

  // handler for invalid token check or missing intents
  await s4d.client.login(process.env[String("TOKEN")]).catch((e) => {
    const tokenInvalid = true;
    const tokenError = e;
    if (e.toString().toLowerCase().includes("token")) {
      throw new Error("An invalid bot token was provided!");
    } else {
      throw new Error(
        "Privileged Gateway Intents are not enabled! Please go to https://discord.com/developers and turn on all of them."
      );
    }
  });

  // give the new client to discord-logs
  logs(s4d.client);

  // setting stuff for Music API
  s4d.player = new Player(s4d.client);

  // DATA SECTION
  // old database (s4d.database) + new database (const database)
  s4d.database = new Database("./database.json");
  const database = new Database("./database.json");

  // commented this because season is over, see you next December :(
  // const eventsdatabase = new Database("./events.json");

  // variables
  var command,
    arguments,
    nukeCooldown,
    cleanedMessages,
    battleCooldown,
    banReason,
    kickReason,
    muteReason,
    rateProbs,
    hackCooldown,
    hmCooldown,
    jmCooldown,
    hackcmdTokenRandom,
    hackcmdIpNumbers,
    hackcmdRandomProbs,
    marryProbs,
    scissors,
    rock,
    paper,
    rpsProbs,
    hackcmdCoordsX,
    hackcmdCoordsZ,
    battleDamage,
    scTestCooldown,
    cannyCooldown,
    uncannyCooldown,
    cannyProbs,
    uncannyProbs,
    serverIP,
    snipedMessage,
    peePeeSize,
    petHealthCooldown,
    petFunCooldown,
    petHungerCooldown,
    petThirstCooldown,
    petVetCooldown,
    petFeedCooldown,
    petDrinkCooldown,
    xpLeaderboardCooldown,
    xpLbTextForEmbed,
    xpLbCurrentMemberId,
    xpLeaderboardUsers,
    xpLeaderboardData,
    k,
    xpLbCurrentElement,
    l,
    supportVarForXpLbXp,
    supportVarForUserLbXp,
    leaderboardCooldown,
    textForEmbed,
    currentMemberId,
    leaderboardUsers,
    leaderboardMoneys,
    robCooldown,
    depositMoney,
    rand,
    robbedMoney,
    depositAllMoney,
    randomLostMoneyInRob,
    i,
    withdrawMoney,
    currentElement,
    withdrawAllMoney,
    giveMoney,
    j,
    supportVarForLbMoney,
    supportVarForLbUser,
    addMoney,
    removeMoney,
    dailyCooldown,
    dupeCooldown,
    popbobDupeProbs,
    mineCooldown,
    huntCooldown,
    crimeCooldown,
    dupeProbs,
    dupeMoney,
    searchCooldown,
    tempMoneyVar,
    begCooldown,
    shootingProbs,
    crimeProbs,
    huntingMoney,
    crimeMoney,
    searchProbs,
    searchMoney,
    begMoney,
    begProbs,
    miningMoney,
    mineFoundProbs,
    highLowCooldown,
    rouletteBetMoney,
    rouletteAddedMoneyPercent,
    highLowNumber,
    highLowSelectedNumber,
    postVideoCooldown,
    highLowMoney,
    rouletteCooldown,
    postMemeCooldown,
    postVideoProbsGaming,
    postVideoProbsDocumentary,
    postVideoProbsFunny,
    postVideoProbsTutorial,
    rouletteProbs,
    postVideoMoney,
    postMemeProbsFunny,
    postMemeProbsMeirl,
    postMemeProbsClassic,
    postMemeProbsCopypasta,
    postMemeProbsOld,
    postMemeMoney,
    rouletteMoney,
    workCooldown,
    firedProbs,
    workMoney,
    fishCooldown,
    fishingRodBreakProbs,
    fishingProbs,
    poll3Arguments,
    timeoutMember,
    timeoutTime;

  // music api variables
  var volume, onOff, songName, songAuthor;

  // image api variables
  var imageCooldown;

  // commented this because season is over, see you next December :(
  // var forestCooldown, helpsantaCooldown, goldFromSanta, matrixStringForTree, twigsFoundForTree, leavesFoundForTree;
  // END OF DATA SECTION

  // FUNCTIONS SECTION
  // random get list function
  function listsGetRandomItem(list, remove) {
    var x = Math.floor(Math.random() * list.length);
    if (remove) {
      return list.splice(x, 1)[0];
    } else {
      return list[x];
    }
  }

  // random color function
  function colourRandom() {
    var num = Math.floor(Math.random() * Math.pow(2, 24));
    return "#" + ("00000" + num.toString(16)).substr(-6);
  }

  // random numbers function
  function mathRandomInt(a, b) {
    if (a > b) {
      // Swap a and b to ensure a is smaller.
      var c = a;
      a = b;
      b = c;
    }
    return Math.floor(Math.random() * (b - a + 1) + a);
  }

  // last hope DO NOT REMOVE (MUSIC API STUFF)
  s4d.player.on("connectionCreate", (queue) => {
    queue.connection.voiceConnection.on("stateChange", (oldState, newState) => {
      const oldNetworking = Reflect.get(oldState, "networking");
      const newNetworking = Reflect.get(newState, "networking");

      const networkStateChangeHandler = (oldNetworkState, newNetworkState) => {
        const newUdp = Reflect.get(newNetworkState, "udp");
        clearInterval(newUdp?.keepAliveInterval);
      };

      oldNetworking?.off("stateChange", networkStateChangeHandler);
      newNetworking?.on("stateChange", networkStateChangeHandler);
    });
  });
  // END OF FUNCTIONS SECTION

  // keep alive, always put this before bot's status message
  const keep_alive = require("./server.js");

  // Setup stuff is done, we're ready to go!
  s4d.client.on("ready", () => {
    console.log("Bot fully started, " + s4d.client.user.tag + " is online!");
  });

  // bot's status message
  s4d.client.on("ready", async () => {
    while (s4d.client && s4d.client.token) {
      await delay(50);
      s4d.client.user.setPresence({
        status: "online",
        activities: [
          {
            name: "DiversityCraft",
            type: "PLAYING",
          },
        ],
      });
      await delay(Number(120) * 1000);
      s4d.client.user.setPresence({
        status: "online",
        activities: [
          {
            name: String(s4d.client.guilds.cache.size) + " servers!",
            type: "WATCHING",
          },
        ],
      });
      await delay(Number(120) * 1000);
      s4d.client.user.setPresence({
        status: "online",
        activities: [
          {
            name: "Version 1.12 is finally out!",
            type: "PLAYING",
          },
        ],
      });
      // commented this because season is over, see you next December :(
      /*
      await delay(Number(120) * 1000);
      s4d.client.user.setPresence({
        status: "online",
        activities: [
          {
            name: "It's Christmas season boyz 🎅🎄",
            type: "PLAYING",
          },
        ],
      });
      */
      await delay(Number(120) * 1000);
      s4d.client.user.setPresence({
        status: "online",
        activities: [
          {
            name: listsGetRandomItem(
              [
                "Still debugging!",
                "Daily lag :i",
                "hello",
                "i'm online rn",
                "Pier77Repeter is Bob's best friend",
                "game",
                "d!help",
                "Now with slash commands!",
                "every day is a great day!",
                "/help",
                "Now with daily crashes!",
                "bye",
                "after all, why not",
                "Do you want some music? d!play!",
                "default text",
                ">DiversityCraft on top",
                "Since 2014!",
                "Not a normal bot",
                "d!ag exists for a reason :>",
                "bottom text",
                "Hey look, this is my status",
                "Did you join DiversityCraft yet? :/",
                "The perfect code, dosen't exist",
                "*randomly joins chat*",
                "Flipping trains on your area (╯°□°)╯︵ ┻━┻",
                "",
              ],
              false
            ),
            type: "PLAYING",
          },
        ],
      });
      await delay(Number(360) * 1000);
    }
  });

  /* 
    CODE STRUCTURE:
    1 - Database checks
    2 - Slash commands creation
    3 - Slash commands responses
    4 - Main server's code
    5 - Music API's code
    6 - Image API's code

    Main server, Music API and Image API's code is inside a "when a message is recevied" function
    Each command is an if statement commented like this: D!COMMANDNAME
    Remember: Always change "(s4dmessage.channel).send" -> "s4dmessage.reply" AND "arguments2" -> "arguments"
  */

  // message deletion check for d!snipe
  s4d.client.on("messageDelete", async (s4dmessage) => {
    snipedMessage = [s4dmessage.author.id, s4dmessage.content];
    s4d.database.set(String(String((s4dmessage.guild || {}).id) + "-snipedmessage"), snipedMessage);
    return;
  });

  // database checks
  s4d.client.on("messageCreate", async (s4dmessage) => {
    if (s4dmessage.author.bot || s4dmessage.guild.id == null) {
      return;
    }

    /*
    Check if Bot settings exist in Database
    */
    if (!s4d.database.has(String(String((s4dmessage.guild || {}).id) + "-modcmd"))) {
      s4d.database.set(String(String((s4dmessage.guild || {}).id) + "-modcmd"), "true");
    }
    if (!s4d.database.has(String(String((s4dmessage.guild || {}).id) + "-musicmd"))) {
      s4d.database.set(String(String((s4dmessage.guild || {}).id) + "-musicmd"), "true");
    }
    if (!s4d.database.has(String(String((s4dmessage.guild || {}).id) + "-eventcmd"))) {
      s4d.database.set(String(String((s4dmessage.guild || {}).id) + "-eventcmd"), "true");
    }

    /*
    Check if battleHP exist in Database
    */
    if (!s4d.database.has(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-", "battleHP"].join("")))) {
      s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-", "battleHP"].join("")), 100);
    }

    /*
    Check if rep exist in Database
    */
    if (!s4d.database.has(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author.id, "-reputation"].join("")))) {
      s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author.id, "-reputation"].join("")), 0);
    }

    /*
    Check if xp exist
    */
    if (!s4d.database.has(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-xp"].join("")))) {
      s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-xp"].join("")), 0);
    }
    if (!s4d.database.has(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-nextxp"].join("")))) {
      s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-nextxp"].join("")), 100);
    }
    if (!s4d.database.has(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-level"].join("")))) {
      s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-level"].join("")), 1);
    }

    /*
    Check if money exist in Database
    */
    if (!s4d.database.has(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-money"].join("")))) {
      s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-money"].join("")), 0);
    }
    if (!s4d.database.has(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-bankmoney"].join("")))) {
      s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-bankmoney"].join("")), 0);
    }
    if (!s4d.database.has(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-totalmoney"].join("")))) {
      s4d.database.set(
        String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-totalmoney"].join("")),
        s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-money"].join(""))) +
          s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-bankmoney"].join("")))
      );
    }

    /*
    Check if item ID exist in Database
    */
    if (!s4d.database.has(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-item_id1"].join("")))) {
      s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-item_id1"].join("")), "false");
    }
    if (!s4d.database.has(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-item_id2"].join("")))) {
      s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-item_id2"].join("")), "false");
    }
    if (!s4d.database.has(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-item_id2_count"].join("")))) {
      s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-item_id2_count"].join("")), 0);
    }
    if (!s4d.database.has(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-item_id3"].join("")))) {
      s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-item_id3"].join("")), "false");
    }
    if (!s4d.database.has(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-item_id3_count"].join("")))) {
      s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-item_id3_count"].join("")), 0);
    }
    if (!s4d.database.has(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-item_id4"].join("")))) {
      s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-item_id4"].join("")), "false");
    }
    if (!s4d.database.has(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-item_id5"].join("")))) {
      s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-item_id5"].join("")), "false");
    }
    if (!s4d.database.has(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-item_id6"].join("")))) {
      s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-item_id6"].join("")), "false");
    }
    if (!s4d.database.has(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-item_id7"].join("")))) {
      s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-item_id7"].join("")), "false");
    }
    if (!s4d.database.has(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-item_id8"].join("")))) {
      s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-item_id8"].join("")), "false");
    }
    if (!s4d.database.has(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-item_id9"].join("")))) {
      s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-item_id9"].join("")), "false");
    }
    if (!s4d.database.has(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-item_id10"].join("")))) {
      s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-item_id10"].join("")), "false");
    }
    if (!s4d.database.has(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-item_id10_count"].join("")))) {
      s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-item_id10_count"].join("")), 0);
    }
    if (!s4d.database.has(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-item_id11"].join("")))) {
      s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-item_id11"].join("")), "false");
    }
    if (!s4d.database.has(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-item_id11_count"].join("")))) {
      s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-item_id11_count"].join("")), 0);
    }
    if (!s4d.database.has(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-item_id12"].join("")))) {
      s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-item_id12"].join("")), "false");
    }
    if (!s4d.database.has(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-item_id13"].join("")))) {
      s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-item_id13"].join("")), "false");
    }

    /*
    Check if fish ID exist in Database
    */
    if (!s4d.database.has(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-fish_id1"].join("")))) {
      s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-fish_id1"].join("")), "false");
    }
    if (!s4d.database.has(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-fish_id1_count"].join("")))) {
      s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-fish_id1_count"].join("")), 0);
    }
    if (!s4d.database.has(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-fish_id2"].join("")))) {
      s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-fish_id2"].join("")), "false");
    }
    if (!s4d.database.has(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-fish_id2_count"].join("")))) {
      s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-fish_id2_count"].join("")), 0);
    }
    if (!s4d.database.has(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-fish_id3"].join("")))) {
      s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-fish_id3"].join("")), "false");
    }
    if (!s4d.database.has(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-fish_id3_count"].join("")))) {
      s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-fish_id3_count"].join("")), 0);
    }
    if (!s4d.database.has(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-fish_id4"].join("")))) {
      s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-fish_id4"].join("")), "false");
    }
    if (!s4d.database.has(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-fish_id4_count"].join("")))) {
      s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-fish_id4_count"].join("")), 0);
    }
    if (!s4d.database.has(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-fish_id5"].join("")))) {
      s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-fish_id5"].join("")), "false");
    }
    if (!s4d.database.has(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-fish_id5_count"].join("")))) {
      s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-fish_id5_count"].join("")), 0);
    }
    if (!s4d.database.has(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-fish_id6"].join("")))) {
      s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-fish_id6"].join("")), "false");
    }
    if (!s4d.database.has(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-fish_id6_count"].join("")))) {
      s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-fish_id6_count"].join("")), 0);
    }
    if (!s4d.database.has(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-fish_id7"].join("")))) {
      s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-fish_id7"].join("")), "false");
    }
    if (!s4d.database.has(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-fish_id7_count"].join("")))) {
      s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-fish_id7_count"].join("")), 0);
    }
    if (!s4d.database.has(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-fish_id8"].join("")))) {
      s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-fish_id8"].join("")), "false");
    }
    if (!s4d.database.has(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-fish_id8_count"].join("")))) {
      s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-fish_id8_count"].join("")), 0);
    }
    if (!s4d.database.has(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-fish_id9"].join("")))) {
      s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-fish_id9"].join("")), "false");
    }
    if (!s4d.database.has(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-fish_id9_count"].join("")))) {
      s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-fish_id9_count"].join("")), 0);
    }
    if (!s4d.database.has(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-fish_id10"].join("")))) {
      s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-fish_id10"].join("")), "false");
    }
    if (!s4d.database.has(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-fish_id10_count"].join("")))) {
      s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-fish_id10_count"].join("")), 0);
    }

    /*
    Check if pet exist in Database
    */
    if (!s4d.database.has(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-haspet"].join("")))) {
      s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-haspet"].join("")), "false");
    }

    /*
    Check if pet stats exist in Database
    */
    if (s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-haspet"].join(""))) == "true") {
      if (!s4d.database.has(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-petstats-health"].join("")))) {
        s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-petstats-health"].join("")), 100);
      }
      if (!s4d.database.has(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-petstats-fun"].join("")))) {
        s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-petstats-fun"].join("")), 100);
      }
      if (!s4d.database.has(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-petstats-hunger"].join("")))) {
        s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-petstats-hunger"].join("")), 100);
      }
      if (!s4d.database.has(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-petstats-thirst"].join("")))) {
        s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-petstats-thirst"].join("")), 100);
      }
    }

    /*
    Check if pet cooldowns exist in Database
    */
    if (s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-haspet"].join(""))) == "true") {
      if (!s4d.database.has(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-petstatstimer-health"].join("")))) {
        s4d.database.set(
          String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-petstatstimer-health"].join("")),
          30000
        );
      }
      if (!s4d.database.has(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-petstatstimer-fun"].join("")))) {
        s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-petstatstimer-fun"].join("")), 30000);
      }
      if (!s4d.database.has(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-petstatstimer-hunger"].join("")))) {
        s4d.database.set(
          String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-petstatstimer-hunger"].join("")),
          30000
        );
      }
      if (!s4d.database.has(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-petstatstimer-thirst"].join("")))) {
        s4d.database.set(
          String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-petstatstimer-thirst"].join("")),
          30000
        );
      }
    }

    /*
    Check if warns exist in Database
    */
    if (!s4d.database.has(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-warns"].join("")))) {
      s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-warns"].join("")), 0);
    }
    return;
    // commented this because season is over, see you next December :(
    // Check if event stuff exist in Database
    /*
    if (!eventsdatabase.has(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-treelevel"].join("")))) {
      eventsdatabase.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-treelevel"].join("")), 0);
    }
    if (!eventsdatabase.has(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-twigs"].join("")))) {
      eventsdatabase.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-twigs"].join("")), 0);
    }
    if (!eventsdatabase.has(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-leaves"].join("")))) {
      eventsdatabase.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-leaves"].join("")), 0);
    }
    if (!eventsdatabase.has(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-goldencoins"].join("")))) {
      eventsdatabase.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-goldencoins"].join("")), 0);
    }
    if (!eventsdatabase.has(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-decoid_1"].join("")))) {
      eventsdatabase.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-decoid_1"].join("")), "false");
    }
    if (!eventsdatabase.has(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-decoid_2"].join("")))) {
      eventsdatabase.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-decoid_2"].join("")), "false");
    }
    if (!eventsdatabase.has(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-decoid_3"].join("")))) {
      eventsdatabase.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-decoid_3"].join("")), "false");
    }
    if (!eventsdatabase.has(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-decoid_4"].join("")))) {
      eventsdatabase.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-decoid_4"].join("")), "false");
    }
    */
  });

  // slash commands creation
  synchronizeSlashCommands(
    s4d.client,
    [
      {
        name: "help",
        description: "Display available slash commands",
        options: [],
      },
      {
        name: "code",
        description: "Makes code messages better",
        options: [
          {
            name: "java",
            description: "Java language",
            type: 1,
            options: [
              {
                type: 3,
                name: "string",
                description: "(Must be short, MAX 2048 char)",
                required: true,
                choices: [],
              },
            ],
          },
          {
            name: "js",
            description: "JavaScript language",
            type: 1,
            options: [
              {
                type: 3,
                name: "string",
                description: "(Must be short, MAX 2048 char)",
                required: true,
                choices: [],
              },
            ],
          },
          {
            name: "c",
            description: "C language",
            type: 1,
            options: [
              {
                type: 3,
                name: "string",
                description: "(Must be short, MAX 2048 char)",
                required: true,
                choices: [],
              },
            ],
          },
          {
            name: "cpp",
            description: "C++ language",
            type: 1,
            options: [
              {
                type: 3,
                name: "string",
                description: "(Must be short, MAX 2048 char)",
                required: true,
                choices: [],
              },
            ],
          },
          {
            name: "csharp",
            description: "C# language",
            type: 1,
            options: [
              {
                type: 3,
                name: "string",
                description: "(Must be short, MAX 2048 char)",
                required: true,
                choices: [],
              },
            ],
          },
          {
            name: "css",
            description: "CSS language",
            type: 1,
            options: [
              {
                type: 3,
                name: "string",
                description: "(Must be short, MAX 2048 char)",
                required: true,
                choices: [],
              },
            ],
          },
          {
            name: "html",
            description: "HTML language",
            type: 1,
            options: [
              {
                type: 3,
                name: "string",
                description: "(Must be short, MAX 2048 char)",
                required: true,
                choices: [],
              },
            ],
          },
          {
            name: "kotlin",
            description: "Kotlin language",
            type: 1,
            options: [
              {
                type: 3,
                name: "string",
                description: "(Must be short, MAX 2048 char)",
                required: true,
                choices: [],
              },
            ],
          },
          {
            name: "python",
            description: "Python language",
            type: 1,
            options: [
              {
                type: 3,
                name: "string",
                description: "(Must be short, MAX 2048 char)",
                required: true,
                choices: [],
              },
            ],
          },
          {
            name: "php",
            description: "PHP language",
            type: 1,
            options: [
              {
                type: 3,
                name: "string",
                description: "(Must be short, MAX 2048 char)",
                required: true,
                choices: [],
              },
            ],
          },
          {
            name: "typescript",
            description: "TypeScript language",
            type: 1,
            options: [
              {
                type: 3,
                name: "string",
                description: "(Must be short, MAX 2048 char)",
                required: true,
                choices: [],
              },
            ],
          },
          {
            name: "lua",
            description: "Lua language",
            type: 1,
            options: [
              {
                type: 3,
                name: "string",
                description: "(Must be short, MAX 2048 char)",
                required: true,
                choices: [],
              },
            ],
          },
        ],
      },
      {
        name: "server",
        description: "Check server stats",
        options: [],
      },
      {
        name: "stats",
        description: "Check your stats",
        options: [],
      },
      {
        name: "member",
        description: "Check an user stats",
        options: [
          {
            type: 6,
            name: "user",
            description: "Mention an user to see their stats",
            required: true,
          },
        ],
      },
      {
        name: "clean",
        description: "Delete the messages",
        options: [
          {
            type: 4,
            name: "number",
            description: "How many messages you want me to delete? (MAX 198)",
            required: true,
            choices: [],
          },
        ],
      },
      {
        name: "ban",
        description: "Ban an user",
        options: [
          {
            type: 6,
            name: "user",
            required: true,
            description: "What user should i ban?",
            choices: [],
          },
          {
            type: 3,
            name: "reason",
            description: "Ban reason",
            required: false,
            choices: [],
          },
        ],
      },
      {
        name: "kick",
        description: "Kick an user",
        options: [
          {
            type: 6,
            name: "user",
            required: true,
            description: "What user should i kick?",
            choices: [],
          },
          {
            type: 3,
            name: "reason",
            description: "Kick reason",
            required: false,
            choices: [],
          },
        ],
      },
      {
        name: "warn",
        description: "Warn an user",
        options: [
          {
            type: 6,
            name: "user",
            required: true,
            description: "You need to mention an user",
            choices: [],
          },
        ],
      },
      {
        name: "warns",
        description: "Check an user warns",
        options: [
          {
            type: 6,
            name: "user",
            required: true,
            description: "You need to mention an user",
            choices: [],
          },
        ],
      },
      {
        name: "clearwarns",
        description: "Clear an user warns",
        options: [
          {
            type: 6,
            name: "user",
            required: true,
            description: "You need to mention an user",
            choices: [],
          },
        ],
      },
      {
        name: "mute",
        description: "Mute an user",
        options: [
          {
            type: 6,
            name: "user",
            required: true,
            description: "What user should be muted?",
            choices: [],
          },
          {
            type: 4,
            name: "time",
            required: true,
            description: "For how many MINUTES the user should be muted?",
            choices: [],
          },
          {
            type: 3,
            name: "reason",
            required: false,
            description: "Reason for the mute?",
            choices: [],
          },
        ],
      },
      {
        name: "news",
        description: "See the latest bot news",
        options: [],
      },
      {
        name: "event",
        description: "See the ongoing event",
        options: [],
      },
    ],
    {
      debug: false,
    }
  );

  // slash commands responses + logic
  s4d.client.on("interactionCreate", async (interaction) => {
    /*
    help
    */
    if (interaction.commandName == "help") {
      await interaction.reply({
        embeds: [
          {
            color: String("#ff9900"),
            title: String("Here all the available slash commands: "),
            description: String(
              [
                "**/event** Display the ongoing event",
                "\n",
                "**/code {available language}** Makes code messages better ",
                "\n",
                "**/clean** clean messages **(Only admin, max 99)**",
                "\n",
                "**/kick** kick user from server **(Only admin)**",
                "\n",
                "**/ban** ban user from server **(Only admin)**",
                "\n",
                "**/server** Check server stats",
                "\n",
                "**/stats** Check your stats",
                "\n",
                "**/member** Check a member stats",
                "\n",
                "**/warn** Warn an user **(Only admin)**",
                "\n",
                "**/warns** Check user warns **(Only admin)**",
                "\n",
                "**/clearwarns** Clear all the warns **(Only admin)**",
                "\n",
                "**/mute** Mutes an user **(Only admin)**",
                "\n",
                "**/news** Check Bot's news",
              ].join("")
            ),
          },
        ],
        ephemeral: false,
        components: [],
      });
      return;
    }

    /*
    code
    */
    if (interaction.commandName == "code") {
      if (interaction.options.getSubcommand() == "java") {
        await interaction.reply({
          embeds: [
            {
              color: String("#3333ff"),
              title: String("Here is your code in Java, " + String(interaction.member.username)),
              description: String(["```java", "\n", interaction.options.getString("string"), "```"].join("")),
            },
          ],
          ephemeral: false,
          components: [],
        });
        return;
      } else if (interaction.options.getSubcommand() == "js") {
        await interaction.reply({
          embeds: [
            {
              color: String("#3333ff"),
              title: String("Here is your code in JavaScript, " + String(interaction.member.username)),
              description: String(["```js", "\n", interaction.options.getString("string"), "```"].join("")),
            },
          ],
          ephemeral: false,
          components: [],
        });
        return;
      } else if (interaction.options.getSubcommand() == "c") {
        await interaction.reply({
          embeds: [
            {
              color: String("#3333ff"),
              title: String("Here is your code in C, " + String(interaction.member.username)),
              description: String(["```c", "\n", interaction.options.getString("string"), "```"].join("")),
            },
          ],
          ephemeral: false,
          components: [],
        });
        return;
      } else if (interaction.options.getSubcommand() == "cpp") {
        await interaction.reply({
          embeds: [
            {
              color: String("#3333ff"),
              title: String("Here is your code in C++, " + String(interaction.member.username)),
              description: String(["```c++", "\n", interaction.options.getString("string"), "```"].join("")),
            },
          ],
          ephemeral: false,
          components: [],
        });
        return;
      } else if (interaction.options.getSubcommand() == "csharp") {
        await interaction.reply({
          embeds: [
            {
              color: String("#3333ff"),
              title: String("Here is your code in C#, " + String(interaction.member.username)),
              description: String(["```c#", "\n", interaction.options.getString("string"), "```"].join("")),
            },
          ],
          ephemeral: false,
          components: [],
        });
        return;
      } else if (interaction.options.getSubcommand() == "css") {
        await interaction.reply({
          embeds: [
            {
              color: String("#3333ff"),
              title: String("Here is your code in CSS, " + String(interaction.member.username)),
              description: String(["```css", "\n", interaction.options.getString("string"), "```"].join("")),
            },
          ],
          ephemeral: false,
          components: [],
        });
        return;
      } else if (interaction.options.getSubcommand() == "html") {
        await interaction.reply({
          embeds: [
            {
              color: String("#3333ff"),
              title: String("Here is your code in HTML, " + String(interaction.member.username)),
              description: String(["```html", "\n", interaction.options.getString("string"), "```"].join("")),
            },
          ],
          ephemeral: false,
          components: [],
        });
        return;
      } else if (interaction.options.getSubcommand() == "kotlin") {
        await interaction.reply({
          embeds: [
            {
              color: String("#3333ff"),
              title: String("Here is your code in Kotlin " + String(interaction.member.username)),
              description: String(["```kotlin", "\n", interaction.options.getString("string"), "```"].join("")),
            },
          ],
          ephemeral: false,
          components: [],
        });
        return;
      } else if (interaction.options.getSubcommand() == "python") {
        await interaction.reply({
          embeds: [
            {
              color: String("#3333ff"),
              title: String("Here is your code in Python, " + String(interaction.member.username)),
              description: String(["```py", "\n", interaction.options.getString("string"), "```"].join("")),
            },
          ],
          ephemeral: false,
          components: [],
        });
        return;
      } else if (interaction.options.getSubcommand() == "php") {
        await interaction.reply({
          embeds: [
            {
              color: String("#3333ff"),
              title: String("Here is your code in PHP, " + String(interaction.member.username)),
              description: String(["```php", "\n", interaction.options.getString("string"), "```"].join("")),
            },
          ],
          ephemeral: false,
          components: [],
        });
        return;
      } else if (interaction.options.getSubcommand() == "typescript") {
        await interaction.reply({
          embeds: [
            {
              color: String("#3333ff"),
              title: String("Here is your code in Lua, " + String(interaction.member.username)),
              description: String(["```ts", "\n", interaction.options.getString("string"), "```"].join("")),
            },
          ],
          ephemeral: false,
          components: [],
        });
        return;
      } else if (interaction.options.getSubcommand() == "lua") {
        await interaction.reply({
          embeds: [
            {
              color: String("#3333ff"),
              title: String("Here is your code in Lua, " + String(interaction.member.username)),
              description: String(["```lua", "\n", interaction.options.getString("string"), "```"].join("")),
            },
          ],
          ephemeral: false,
          components: [],
        });
        return;
      }
    }

    /*
    server
    */
    if (interaction.commandName == "server") {
      await interaction.reply({
        embeds: [
          {
            color: String("#000099"),
            title: String(String(interaction.guild.name) + "'s stats:"),
            description: String(
              [
                ["Server administator: ", "<@", String(interaction.guild.ownerId), ">"].join(""),
                "\n",
                "\n",
                ["Server ID: `", interaction.guild.id, "`"].join(""),
                "\n",
                "\n",
                ["Server creation date: `", interaction.guild.createdAt, "`"].join(""),
                "\n",
                "\n",
                ["Server boosts: **", interaction.guild.premiumSubscriptionCount, "**"].join(""),
                "\n",
                "\n",
                ["Boost lvl: `", interaction.guild.premiumTier, "`"].join(""),
                "\n",
                "\n",
                ["Total users: `", interaction.guild.memberCount, "`"].join(""),
                "\n",
                "\n",
                ["Members: `", interaction.guild.members.cache.filter((m) => !m.user.bot).size, "`"].join(""),
                "\n",
                "\n",
                ["Bots: `", interaction.guild.members.cache.filter((m) => m.user.bot).size, "`"].join(""),
                "\n",
                "\n",
                [
                  "Number of text channels: `",
                  interaction.guild.channels.cache.filter((m) => m.type === "GUILD_TEXT").size,
                  "`",
                ].join(""),
                "\n",
                "\n",
                [
                  "Number of voice channels: `",
                  interaction.guild.channels.cache.filter((m) => m.type === "GUILD_VOICE").size,
                  "`",
                ].join(""),
                "\n",
                "\n",
                ["Role slots: `", interaction.guild.roles.cache.size, "/250`"].join(""),
                "\n",
                "\n",
                "**Server icon:**",
              ].join("")
            ),
            image: {
              url: String(
                interaction.guild.iconURL({
                  dynamic: true,
                })
              ),
            },
          },
        ],
        ephemeral: false,
        components: [],
      });
      return;
    }

    /*
    stats
    */
    if (interaction.commandName == "stats") {
      await interaction.reply({
        embeds: [
          {
            color: String("#000099"),
            title: String("Your stats: "),
            description: String(
              [
                "**Username:** " + String(s4d.client.users.cache.get(String(interaction.member.id)).username),
                "\n",
                "\n",
                "**ID:** " + String(interaction.member.id),
                "\n",
                "\n",
                "**Join date:** " + String(String(interaction.member.joinedAt)),
                "\n",
                "\n",
                "**Account creation date:** " + String(moment(interaction.member.createdAt).format("LLLL")),
                "\n",
                "\n",
                "**Profile picture:**",
              ].join("")
            ),
            image: {
              url: String(
                interaction.member.displayAvatarURL({
                  format: "png",
                })
              ),
            },
          },
        ],
        ephemeral: false,
        components: [],
      });
      return;
    }

    /*
    member
    */
    if (interaction.commandName == "member") {
      await interaction.reply({
        embeds: [
          {
            color: String("#000099"),
            title: String(
              String(s4d.client.users.cache.get(String(interaction.options.getMember("user").id)).username) + "'s stats: "
            ),
            description: String(
              [
                "**Username:** " + String(s4d.client.users.cache.get(String(interaction.options.getMember("user").id)).tag),
                "\n",
                "\n",
                "**ID:** " + String(interaction.options.getMember("user").id),
                "\n",
                "\n",
                "**Join date:** " + String(String(interaction.options.getMember("user").joinedAt)),
                "\n",
                "\n",
                "**Account creation date:** " + String(moment(interaction.options.getMember("user").createdAt).format("LLLL")),
                "\n",
                "\n",
                "**Profile picture:**",
              ].join("")
            ),
            image: {
              url: String(
                interaction.options.getMember("user").displayAvatarURL({
                  format: "png",
                })
              ),
            },
          },
        ],
        ephemeral: false,
        components: [],
      });
      return;
    }

    /*
    clean
    */
    if (interaction.commandName == "clean") {
      if (s4d.database.get(String(String(interaction.guild.id) + "-modcmd")) == "false") {
        await interaction.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("Moderation commands are off! Type: **d!modcmd on**"),
            },
          ],
          ephemeral: true,
          components: [],
        });
        return;
      }
      if (!interaction.member.permissions.has(Permissions.FLAGS.MANAGE_MESSAGES)) {
        await interaction.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("You do not have the permission to perform this command! "),
            },
          ],
          ephemeral: true,
          components: [],
        });
        return;
      }
      if (interaction.options.getInteger("number") <= 0 || interaction.options.getInteger("number") > 99) {
        await interaction.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("The number must be **> 0** and **< 100**"),
            },
          ],
          ephemeral: true,
          components: [],
        });
        return;
      }
      cleanedMessages = interaction.options.getInteger("number");
      try {
        interaction.channel.bulkDelete(cleanedMessages | 1);
      } catch (err) {
        await interaction.reply({
          embeds: [
            {
              color: String("#33ff33"),
              title: String("❌ Error"),
              description: String("Something went wrong while deleting the messages"),
            },
          ],
          ephemeral: true,
          components: [],
        });
        return;
      }
      await interaction.reply({
        embeds: [
          {
            color: String("#33ff33"),
            title: String("✅ Done"),
            description: String(["I cleaned ", interaction.options.getInteger("number"), " messages!"].join("")),
          },
        ],
        ephemeral: true,
        components: [],
      });
      return;
    }

    /*
    ban
    */
    if (interaction.commandName == "ban") {
      if (s4d.database.get(String(String(interaction.guild.id) + "-modcmd")) == "false") {
        await interaction.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("Moderation commands are off! Type: **d!modcmd on**"),
            },
          ],
          ephemeral: true,
          components: [],
        });
        return;
      }
      if (!interaction.member.permissions.has(Permissions.FLAGS.BAN_MEMBERS)) {
        await interaction.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("You do not have the permission to perform this command! "),
            },
          ],
          ephemeral: true,
          components: [],
        });
        return;
      }
      if (interaction.options.getMember("user").id == interaction.member.id) {
        await interaction.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("You can't ban yourself lol"),
            },
          ],
          ephemeral: true,
          components: [],
        });
        return;
      }
      if (!interaction.options.getMember("user").bannable) {
        await interaction.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("I don't have the permission to `Ban Members` or i can't mute him (higher role)"),
            },
          ],
          ephemeral: true,
          components: [],
        });
        return;
      }
      try {
        banReason = interaction.options.getString("reason");
        if (interaction.options.getString("reason") == null) {
          banReason = "none";
        }
        interaction.options.getMember("user").ban({
          reason: banReason,
        });
      } catch (err) {
        await interaction.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("Something went wrong while trying to ban user"),
            },
          ],
          ephemeral: true,
          components: [],
        });
        return;
      }
      await interaction.reply({
        embeds: [
          {
            color: String("#33ff33"),
            title: String("✅ Done"),
            description: String(
              [
                s4d.client.users.cache.get(String(interaction.options.getMember("user").id)).username,
                " has been banned",
                "\n",
                "Reason: **",
                banReason,
                "**",
              ].join("")
            ),
          },
        ],
        ephemeral: true,
        components: [],
      });
      return;
    }

    /*
    kick
    */
    if (interaction.commandName == "kick") {
      if (s4d.database.get(String(String(interaction.guild.id) + "-modcmd")) == "false") {
        await interaction.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("Moderation commands are off! Type: **d!modcmd on**"),
            },
          ],
          ephemeral: true,
          components: [],
        });
        return;
      }
      if (!interaction.member.permissions.has(Permissions.FLAGS.KICK_MEMBERS)) {
        await interaction.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("You do not have the permission to perform this command! "),
            },
          ],
          ephemeral: true,
          components: [],
        });
        return;
      }
      if (interaction.options.getMember("user").id == interaction.member.id) {
        await interaction.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("You can't kick yourself lol"),
            },
          ],
          ephemeral: true,
          components: [],
        });
        return;
      }
      if (!interaction.options.getMember("user").kickable) {
        await interaction.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("I don't have the permission to `Kick Members` or i can't mute him (higher role)"),
            },
          ],
          ephemeral: true,
          components: [],
        });
        return;
      }
      try {
        kickReason = interaction.options.getString("reason");
        if (interaction.options.getString("reason") == null) {
          kickReason = "none";
        }
        interaction.options.getMember("user").kick({
          reason: kickReason,
        });
      } catch (err) {
        await interaction.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("Something went wrong while trying to kick the user"),
            },
          ],
          ephemeral: true,
          components: [],
        });
        return;
      }
      await interaction.reply({
        embeds: [
          {
            color: String("#33ff33"),
            title: String("✅ Done"),
            description: String(
              [
                s4d.client.users.cache.get(String(interaction.options.getMember("user").id)).username,
                " has been kicked",
                "\n",
                "Reason: **",
                kickReason,
                "**",
              ].join("")
            ),
          },
        ],
        ephemeral: true,
        components: [],
      });
      return;
    }

    /*
    warn
    */
    if (interaction.commandName == "warn") {
      if (s4d.database.get(String(String(interaction.guild.id) + "-modcmd")) == "false") {
        await interaction.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("Moderation commands are off! Type: **d!modcmd on**"),
            },
          ],
          ephemeral: true,
          components: [],
        });
        return;
      }
      if (!interaction.member.permissions.has(Permissions.FLAGS.MUTE_MEMBERS)) {
        await interaction.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("You do not have the permission to perform this command! "),
            },
          ],
          ephemeral: true,
          components: [],
        });
        return;
      }
      if (interaction.options.getMember("user").id == interaction.member.id) {
        await interaction.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("You can't warn yourself lol"),
            },
          ],
          ephemeral: true,
          components: [],
        });
        return;
      }
      if (!s4d.database.has(String([interaction.guild.id, "-", interaction.member, "-warns"].join("")))) {
        s4d.database.set(String([interaction.guild.id, "-", interaction.member, "-warns"].join("")), 0);
      }
      if (!s4d.database.has(String([interaction.guild.id, "-", interaction.options.getMember("user"), "-warns"].join("")))) {
        s4d.database.set(String([interaction.guild.id, "-", interaction.options.getMember("user"), "-warns"].join("")), 0);
      }
      s4d.database.add(
        String([interaction.guild.id, "-", interaction.options.getMember("user"), "-warns"].join("")),
        parseInt(1)
      );
      await interaction.reply({
        embeds: [
          {
            color: String("#33cc00"),
            title: String("🛂 Done"),
            description: String(["Uh oh, ", interaction.options.getMember("user"), " got warned!"].join("")),
          },
        ],
        ephemeral: true,
        components: [],
      });
      return;
    }

    /*
    warns
    */
    if (interaction.commandName == "warns") {
      if (s4d.database.get(String(String(interaction.guild.id) + "-modcmd")) == "false") {
        await interaction.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("Moderation commands are off! Type: **d!modcmd on**"),
            },
          ],
          ephemeral: true,
          components: [],
        });
        return;
      }
      if (!interaction.member.permissions.has(Permissions.FLAGS.MUTE_MEMBERS)) {
        await interaction.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("You do not have the permission to perform this command! "),
            },
          ],
          ephemeral: true,
          components: [],
        });
        return;
      }
      if (!s4d.database.has(String([interaction.guild.id, "-", interaction.options.getMember("user"), "-warns"].join("")))) {
        s4d.database.set(String([interaction.guild.id, "-", interaction.options.getMember("user"), "-warns"].join("")), 0);
      }
      await interaction.reply({
        embeds: [
          {
            color: String("#33ff33"),
            title: String(
              String(s4d.client.users.cache.get(String(interaction.options.getMember("user").id)).username) + " warns:"
            ),
            description: String(
              [
                String(s4d.client.users.cache.get(String(interaction.options.getMember("user").id)).username) + " has **",
                s4d.database.get(String([interaction.guild.id, "-", interaction.options.getMember("user"), "-warns"].join(""))),
                "** warns on this server",
              ].join("")
            ),
          },
        ],
        ephemeral: true,
        components: [],
      });
      return;
    }

    /*
    clearwarns
    */
    if (interaction.commandName == "clearwarns") {
      if (s4d.database.get(String(String(interaction.guild.id) + "-modcmd")) == "false") {
        await interaction.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("Moderation commands are off! Type: **d!modcmd on**"),
            },
          ],
          ephemeral: true,
          components: [],
        });
        return;
      }
      if (!interaction.member.permissions.has(Permissions.FLAGS.MUTE_MEMBERS)) {
        await interaction.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("You do not have the permission to perform this command! "),
            },
          ],
          ephemeral: true,
          components: [],
        });
        return;
      }
      s4d.database.set(String([interaction.guild.id, "-", interaction.options.getMember("user"), "-warns"].join("")), 0);
      await interaction.reply({
        embeds: [
          {
            color: String("#33ff33"),
            title: String("Done ✅"),
            description: String(
              "Resetted warns for: " +
                String(s4d.client.users.cache.get(String(interaction.options.getMember("user").id)).username)
            ),
          },
        ],
        ephemeral: true,
        components: [],
      });
      return;
    }

    /*
    mute
    */
    if (interaction.commandName == "mute") {
      if (s4d.database.get(String(String(interaction.guild.id) + "-modcmd")) == "false") {
        await interaction.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("Moderation commands are off! **Type: d!modcmd on**"),
            },
          ],
          ephemeral: true,
          components: [],
        });
        return;
      }
      if (!interaction.member.permissions.has(Permissions.FLAGS.MUTE_MEMBERS)) {
        await interaction.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("You don't have the permission"),
            },
          ],
          ephemeral: true,
          components: [],
        });
        return;
      }
      if (interaction.options.getMember("user").id == interaction.member.id) {
        await interaction.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("You can't mute yourself lol"),
            },
          ],
          ephemeral: true,
          components: [],
        });
        return;
      }
      if (!interaction.options.getMember("user").moderatable) {
        await interaction.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("I don't have the permission to `Moderate Members` or i can't mute him (higher role)"),
            },
          ],
          ephemeral: true,
          components: [],
        });
        return;
      }
      try {
        muteReason = interaction.options.getString("reason");
        if (interaction.options.getString("reason") == null) {
          muteReason = "none";
        }
        interaction.options.getMember("user").timeout(interaction.options.getInteger("time") * 1000, muteReason);
      } catch (err) {
        await interaction.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("Something went wrong, couldn't mute user"),
            },
          ],
          ephemeral: true,
          components: [],
        });
        return;
      }
      await interaction.reply({
        embeds: [
          {
            color: String("#33cc00"),
            title: String("✅ Done"),
            description: String(
              [
                "**",
                s4d.client.users.cache.get(String(interaction.options.getMember("user").id)).username,
                "** has been muted",
                "\n",
                "Time in minutes: **",
                interaction.options.getInteger("time"),
                " minutes**",
                "\n",
                "Reason: **",
                muteReason,
                "**",
              ].join("")
            ),
          },
        ],
        ephemeral: true,
        components: [],
      });
      return;
    }

    /*
    news
    */
    if (interaction.commandName == "news") {
      await interaction.reply({
        embeds: [
          {
            color: String("#ff6600"),
            title: String("📜 Changelogs/news"),
            fields: [
              {
                name: "Patch v1.12.2 - 30/01/24",
                value: [
                  "- Major bot's code changes",
                  "\n",
                  "- Fixed a few title misspells",
                  "\n",
                  "- Fixed d!akinator not working at all",
                  "\n",
                  "- Fixed d!rob cooldown not working",
                  "\n",
                  "- Fixed some data saved wrong in Database",
                  "\n",
                  "- You can see Bot's configs without perms",
                ].join(""),
                inline: false,
              },
              {
                name: "More info, suggestions and bug report here:",
                value: "https://discord.gg/KxadTdz",
                inline: false,
              },
            ],
          },
        ],
        ephemeral: false,
        components: [],
      });
      return;
    }

    /*
    event
    */
    if (interaction.commandName == "event") {
      await interaction.reply({
        embeds: [
          {
            color: String("#339999"),
            title: String("Ongoing event: None"),
            description: String(
              ["There are no ongoing events, check the Discord for more: https://discord.gg/KxadTdz"].join("")
            ),
            footer: {
              text: String("Sadly, no events at the moment"),
            },
          },
        ],
        ephemeral: false,
        components: [],
      });
      return;
    }
  });

  // Main server's long code
  s4d.client.on("messageCreate", async (s4dmessage) => {
    if (s4dmessage.author.bot || s4dmessage.guild.id == null) {
      return;
    }

    /*
    Reputation check for d!rep
    */
    try {
      if (
        String(s4dmessage.content.toLowerCase()).includes(String("thank you")) ||
        String(s4dmessage.content.toLowerCase()).includes(String("thanks you")) ||
        String(s4dmessage.content.toLowerCase()).includes(String("thank")) ||
        (String(s4dmessage.content.toLowerCase()).includes(String("thanks")) &&
          (String(s4dmessage.content.toLowerCase()).includes(String("thank you very much")) ||
            String(s4dmessage.content.toLowerCase()).includes(String("thanks you very much"))))
      ) {
        s4d.database.add(
          String([(s4dmessage.guild || {}).id, "-", s4dmessage.mentions.members.first().id, "-reputation"].join("")),
          parseInt(1)
        );
        s4dmessage.channel.send({
          content: String("Gave **+1** Rep to " + String(s4dmessage.mentions.members.first())),
        });
        return;
      }
    } catch (err) {
      console.log("Cannot add REP to an invalid user");
      return;
    }

    /*
    D!DATABASE
    */
    if (
      (s4dmessage.content.toUpperCase() || "").startsWith("D!DATABASE" || "") &&
      s4dmessage.author.id == "724990112030654484"
    ) {
      s4dmessage.reply({
        files: ["./database.json"],
      });
      return;
    }

    /*
    D!EVENTDB
    */
    if (
      (s4dmessage.content.toUpperCase() || "").startsWith("D!EVENTDB" || "") &&
      s4dmessage.author.id == "724990112030654484"
    ) {
      s4dmessage.reply({
        files: ["./events.json"],
      });
      return;
    }

    /*
    D!NEWYEAR
    Note: This is needed for next year
    */
    /*
    if ((s4dmessage.content.toUpperCase() || "").startsWith("D!NEWYEAR" || "") && s4dmessage.author.id == "724990112030654484") {
      s4dmessage.channel.send({
        content: String("2025 coming in 5 minutes!"),
      });
      await delay(Number(180) * 1000);
      s4dmessage.channel.send({
        content: String("2025 coming in **2 minutes**!!"),
      });
      await delay(Number(60) * 1000);
      s4dmessage.channel.send({
        content: String("2025 COMING IN **1 MINUTE**, BE READY!!!"),
      });
      await delay(Number(49) * 1000);
      s4dmessage.channel.send({
        content: String("**10**"),
      });
      await delay(Number(1) * 1000);
      s4dmessage.channel.send({
        content: String("**9**"),
      });
      await delay(Number(1) * 1000);
      s4dmessage.channel.send({
        content: String("**8**"),
      });
      await delay(Number(1) * 1000);
      s4dmessage.channel.send({
        content: String("**7**"),
      });
      await delay(Number(1) * 1000);
      s4dmessage.channel.send({
        content: String("**6**"),
      });
      await delay(Number(1) * 1000);
      s4dmessage.channel.send({
        content: String("**5**"),
      });
      await delay(Number(1) * 1000);
      s4dmessage.channel.send({
        content: String("**4**"),
      });
      await delay(Number(1) * 1000);
      s4dmessage.channel.send({
        content: String("**3**"),
      });
      await delay(Number(1) * 1000);
      s4dmessage.channel.send({
        content: String("**2**"),
      });
      await delay(Number(1) * 1000);
      s4dmessage.channel.send({
        content: String("**1**"),
      });
      await delay(Number(1) * 1000);
      s4dmessage.channel.send({
        content: String("**Happy new year DiversityCraft!!!** 🥳🥳🥳"),
      });
      await delay(Number(mathRandomInt(1, 10)) * 1000);
      s4dmessage.channel.send({
        content: String("**Happy 2025 everyone!!!** 🥳🤩🥳🤩🥳🤩"),
      });
      await delay(Number(mathRandomInt(5, 30)) * 1000);
      s4dmessage.channel.send({
        content: String("🥳🎉🎉🎉🎉🎉"),
      });
      await delay(Number(mathRandomInt(10, 40)) * 1000);
      s4dmessage.channel.send({
        content: String("🎇 🎆 🎇 🎆 🎇 🎆 🎇 🎆 🎇 🎆 🎇 🎆 🎇 🎆 🎇 🎆"),
      });
      await delay(Number(mathRandomInt(10, 30)) * 1000);
      s4dmessage.channel.send({
        content: String("🎉🎉🎉 2️⃣0️⃣2️⃣5️⃣ 🎊🎊🎊"),
      });
      await delay(Number(mathRandomInt(5, 20)) * 1000);
      s4dmessage.channel.send({
        content: String("I wish 2025 to be one of the best years for everyone, happy near year!!!"),
      });
      return;
    }
    */

    /*
    D!RESTART
    */
    if (
      (s4dmessage.content.toUpperCase() || "").startsWith("D!RESTART" || "") &&
      s4dmessage.author.id == "724990112030654484"
    ) {
      await delay(Number(1) * 1000);
      restart = "on";
      s4dmessage.delete();
      s4dmessage.author.send({
        embeds: [
          {
            color: String("#ffff00"),
            description: String("**[CONSOLE] Bot restarting in 2 minutes...**"),
          },
        ],
      });
      await delay(Number(105) * 1000);
      s4dmessage.author.send({
        embeds: [
          {
            color: String("#ffff00"),
            description: String("**[CONSOLE] Bot restarting in 15 seconds...**"),
          },
        ],
      });
      await delay(Number(15) * 1000);
      s4dmessage.author.send({
        embeds: [
          {
            color: String("#ffff00"),
            description: String("**[CONSOLE] Bot is restarting...**"),
          },
        ],
      });
      await delay(Number(1) * 1000);
      s4d.client.destroy();
      return;
    }

    /*
    D!PING
    */
    if ((s4dmessage.content || "").toUpperCase().startsWith("D!PING")) {
      s4dmessage
        .reply({
          embeds: [
            {
              color: "#ff0000",
              title: "📡 Pinging, please wait...",
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        })
        .then(async (s4dfrost_real_reply) => {
          await delay(1 * 1000);

          s4dfrost_real_reply.edit({
            embeds: [
              {
                color: "#33ff33",
                title: "🏓 Everything is functioning",
                description: "DiversityBOT is working as expected!",
                fields: [
                  {
                    name: "🖥 Main server",
                    value: `Ping: **${s4d.client.ws.ping}ms**`,
                    inline: false,
                  },
                  {
                    name: "🎤 Music API",
                    value: `Status **ONLINE**`,
                    inline: false,
                  },
                  {
                    name: "📸 Image API",
                    value: `Status **ONLINE**`,
                    inline: false,
                  },
                ],
              },
            ],
          });

          return;
        });
    }

    /*
    D!HELP
    */
    if (s4dmessage.content.toUpperCase() == "D!HELP" || (s4dmessage.content.toUpperCase() || "").startsWith("D!HELP " || "")) {
      s4dmessage.reply({
        embeds: [
          {
            color: String("#33cc00"),
            title: String("📖 Help menu:"),
            description: String(
              [
                "***You must use the menu under this message***",
                "\n",
                "\n",
                "Bot current version: **1.12.2**",
                "\n",
                "More commands will come soon. Please be patient ;)",
                "\n",
                "Support me by **joining in the discord: https://discord.gg/KxadTdz**",
              ].join("")
            ),
            thumbnail: {
              url: String(
                "https://cdn.discordapp.com/attachments/1079037173875085312/1120713249973866597/DVCB.png?ex=65537c0c&is=6541070c&hm=60e1ad2b04699504663099911f32a398bf2caae52376cf9cf2f17b4291785bdf&"
              ),
            },
            fields: [
              {
                name: "📰 New updates:",
                value: "Patch 1.12.2, type **d!news** for more!",
                inline: false,
              },
              {
                name: "🎉 Ongoing event: None",
                value: "More info about events in the Discord server!",
                inline: false,
              },
            ],
          },
        ],
        allowedMentions: {
          repliedUser: true,
        },
      });
      s4dmessage
        .reply({
          embeds: [
            {
              color: String("#00cccc"),
              title: String("Click here to open the menu to see all the commands"),
              description: String("Hope you like ;)"),
            },
          ],
          components: [
            new MessageActionRow().addComponents(
              new MessageSelectMenu()
                .setCustomId("help")
                .setPlaceholder("Click to navigate through the menu!")
                .setMaxValues(1)
                .setMinValues(1)
                .setDisabled(false)

                .addOptions(
                  {
                    value: "fun_&_games",
                    label: "Fun & Games",
                    emoji: "🎮",
                    description: "Fun commands",
                    default: false,
                  },
                  {
                    value: "music",
                    label: "Music",
                    emoji: "🎵",
                    description: "Music commands",
                    default: false,
                  },
                  {
                    value: "economy",
                    label: "Economy",
                    emoji: "⚖️",
                    description: "Economy commands",
                    default: false,
                  },
                  {
                    value: "img",
                    label: "Image",
                    emoji: "📸",
                    description: "Image commands",
                    default: false,
                  },
                  {
                    value: "utility",
                    label: "Utility",
                    emoji: "🧰",
                    description: "Utility commands",
                    default: false,
                  }
                )
            ),
          ],
        })
        .then(async (m) => {
          let collector = m.createMessageComponentCollector({
            filter: (i) => i.user.id === s4dmessage.author.id,
            time: 120000,
          });
          collector.on("collect", async (i) => {
            if (i.customId == "help" && i.values[0] == "fun_&_games") {
              await i
                .update({
                  embeds: [
                    {
                      color: String("#00cccc"),
                      title: String("🎮 FUN & GAMES SECTION:"),
                      description: String(
                        [
                          "**d!event** Display the ongoing event",
                          "\n",
                          "**d!akinator** And i'll try to guess your character",
                          "\n",
                          "**d!snake** Play snake game like on Google",
                          "\n",
                          "**d!ag** Send random anime girl gif :^)",
                          "\n",
                          "**d!rps** Play Rock Paper Scissors game, vs me",
                          "\n",
                          "**d!nuke** You decide if you want to launch the nuke.",
                          "\n",
                          "**d!8ball** Ask a question to me",
                          "\n",
                          "**d!say <message>** Better message with Embed",
                          "\n",
                          "**d!kill <@user>** To kill people with funny image",
                          "\n",
                          "**d!rep** or **d!rep <@user>** Check your reputation or someone rep",
                          "\n",
                          "**d!jm** For Java moment",
                          "\n",
                          "**d!hm** Hausemaster moment :^)",
                          "\n",
                          "**d!meme** Random meme from r/memes",
                          "\n",
                          "**d!rate <message>** I'll rate 0 to 10",
                          "\n",
                          "**d!hack <@user>** To hack someone",
                          "\n",
                          "**d!ttt <@user>** To play tic tac toe with that user",
                          "\n",
                          "**d!roast <@user>** To roast someone >:)",
                          "\n",
                          "**d!ship <@user>** See how much you love the mentioned user",
                          "\n",
                          "**d!troll <@user>** To troll the mentioned user",
                          "\n",
                          "**d!sctest** Start the Social Credits test",
                          "\n",
                          "**d!scredits** or **d!scredits <@user>** To check Credits score",
                          "\n",
                          "**d!canny** Play canny the game",
                          "\n",
                          "**d!uncanny** Same game but uncanny version",
                          "\n",
                          "**d!battle <@user>** Start an epik battle",
                          "\n",
                          "**d!snipe** To snipe to latest deleted message",
                          "\n",
                          "**d!pp <@user>** pp inspect someone",
                          "\n",
                          "**d!mcip <server ip>** Display a minecraft server stats",
                          "\n",
                          "**d!mcbip <server ip>** Display a minecraft  bedrock server stats",
                          "\n",
                          "**d!adopt <@user>** To adopt a new pet",
                          "\n",
                          "**d!unadopt <@user>** To leave your pet",
                          "\n",
                          "**d!pet** To check your pet's stats",
                          "\n",
                          "**d!petvisit** To bring your pet to the vet",
                          "\n",
                          "**d!petplay** To play with your pet",
                          "\n",
                          "**d!petfeed** To feed your pet",
                          "\n",
                          "**d!petdrink** To give water to your pet",
                          "\n",
                          "**d!petsee <@user>** Sees other users pet",
                          "\n",
                          "**d!xp** To see your current xp",
                          "\n",
                          "**d!level** To see your current level",
                          "\n",
                          "**d!lxpb** To see the server leaderboard (levels)",
                        ].join("")
                      ),
                    },
                  ],
                  components: [
                    new MessageActionRow().addComponents(
                      new MessageSelectMenu()
                        .setCustomId("help")
                        .setPlaceholder("🎮 Fun & Games")
                        .setMaxValues(1)
                        .setMinValues(1)
                        .setDisabled(false)

                        .addOptions(
                          {
                            value: "fun_&_games",
                            label: "Fun & Games",
                            emoji: "🎮",
                            description: "Fun commands",
                            default: false,
                          },
                          {
                            value: "music",
                            label: "Music",
                            emoji: "🎵",
                            description: "Music commands",
                            default: false,
                          },
                          {
                            value: "economy",
                            label: "Economy",
                            emoji: "⚖️",
                            description: "Economy commands",
                            default: false,
                          },
                          {
                            value: "img",
                            label: "Image",
                            emoji: "📸",
                            description: "Image commands",
                            default: false,
                          },
                          {
                            value: "utility",
                            label: "Utility",
                            emoji: "🧰",
                            description: "Utility commands",
                            default: false,
                          }
                        )
                    ),
                  ],
                })
                .then(async (m) => {
                  return;
                });
            } else if (i.customId == "help" && i.values[0] == "music") {
              await i
                .update({
                  embeds: [
                    {
                      color: String("#00cccc"),
                      title: String("🎵 MUSIC SECTION:"),
                      description: String(
                        [
                          "**You must be in a voice channel!**",
                          "\n",
                          "\n",
                          "**d!play <song name/url>** To play a song",
                          "\n",
                          "**d!np** To see the current playing song",
                          "\n",
                          "**d!queue** To see the songs queue",
                          "\n",
                          "**d!pause** Pause the current song",
                          "\n",
                          "**d!resume** Resume the current song",
                          "\n",
                          "**d!stop** Stop the music",
                          "\n",
                          "**d!volume** Chose the music volume, 1 to 100",
                          "\n",
                          "**d!skip** Skip the song",
                          "\n",
                          "**d!back** Play the previous song",
                          "\n",
                          "**d!loop <on/off>** Loop all the songs",
                          "\n",
                          "**d!lyric** Search a song lyric",
                        ].join("")
                      ),
                      footer: {
                        text: String("If Music API is down these commands will NOT work, check with d!ping"),
                        icon_url: String(),
                      },
                    },
                  ],
                  components: [
                    new MessageActionRow().addComponents(
                      new MessageSelectMenu()
                        .setCustomId("help")
                        .setPlaceholder("🎵 Music")
                        .setMaxValues(1)
                        .setMinValues(1)
                        .setDisabled(false)

                        .addOptions(
                          {
                            value: "fun_&_games",
                            label: "Fun & Games",
                            emoji: "🎮",
                            description: "Fun commands",
                            default: false,
                          },
                          {
                            value: "music",
                            label: "Music",
                            emoji: "🎵",
                            description: "Music commands",
                            default: false,
                          },
                          {
                            value: "economy",
                            label: "Economy",
                            emoji: "⚖️",
                            description: "Economy commands",
                            default: false,
                          },
                          {
                            value: "img",
                            label: "Image",
                            emoji: "📸",
                            description: "Image commands",
                            default: false,
                          },
                          {
                            value: "utility",
                            label: "Utility",
                            emoji: "🧰",
                            description: "Utility commands",
                            default: false,
                          }
                        )
                    ),
                  ],
                })
                .then(async (m) => {
                  return;
                });
            } else if (i.customId == "help" && i.values[0] == "economy") {
              await i
                .update({
                  embeds: [
                    {
                      color: String("#00cccc"),
                      title: String("⚖️ ECONOMY SECTION:"),
                      description: String(
                        [
                          "**d!lb** To see the server leaderboard",
                          "\n",
                          "**d!use** Shows the list of usable items",
                          "\n",
                          "**d!daily** To get your daily money",
                          "\n",
                          "**d!dupe** To dupe money",
                          "\n",
                          "**d!work** Work to get some money",
                          "\n",
                          "**d!beg** To beg some money",
                          "\n",
                          "**d!search** You search for some money, you must be lucky ;)",
                          "\n",
                          "**d!deposit <amount>** To deposit your money in the bank",
                          "\n",
                          "**d!withdraw <amount>** To take your money from the bank",
                          "\n",
                          "**d!give <@user> <amount>** To give mentioned member some money",
                          "\n",
                          "**d!bal** or **d!bal <@user>** To see how much money is in your bank",
                          "\n",
                          "**d!rob <@user>** To rob someone",
                          "\n",
                          "**d!crime** To commit a crime",
                          "\n",
                          "**d!shop** To see the shop",
                          "\n",
                          "**d!inv** To see your inventory",
                          "\n",
                          "**d!bucket** To see your bucket for fishes",
                          "\n",
                          "**d!buy <item id/name>** To buy an item from the shop",
                          "\n",
                          "**d!sell <item id/name>** To sell an item",
                          "\n",
                          "**d!fish** To start fishing",
                          "\n",
                          "**d!add <@user> <amount>** To add money (Only admin)",
                          "\n",
                          "**d!remove <@user> <amount>** To remove money (Only admin)",
                          "\n",
                          "**d!hl** Highlow game",
                          "\n",
                          "**d!pv** Post a video on YouTube",
                          "\n",
                          "**d!pm** Post a meme on Reddit",
                          "\n",
                          "**d!roulette <amount>** Play the roulette",
                          "\n",
                          "**d!mine** To go mine",
                          "\n",
                          "**d!hunt** Kill some preys",
                        ].join("")
                      ),
                    },
                  ],
                  components: [
                    new MessageActionRow().addComponents(
                      new MessageSelectMenu()
                        .setCustomId("help")
                        .setPlaceholder("⚖️ Economy")
                        .setMaxValues(1)
                        .setMinValues(1)
                        .setDisabled(false)

                        .addOptions(
                          {
                            value: "fun_&_games",
                            label: "Fun & Games",
                            emoji: "🎮",
                            description: "Fun commands",
                            default: false,
                          },
                          {
                            value: "music",
                            label: "Music",
                            emoji: "🎵",
                            description: "Music commands",
                            default: false,
                          },
                          {
                            value: "economy",
                            label: "Economy",
                            emoji: "⚖️",
                            description: "Economy commands",
                            default: false,
                          },
                          {
                            value: "img",
                            label: "Image",
                            emoji: "📸",
                            description: "Image commands",
                            default: false,
                          },
                          {
                            value: "utility",
                            label: "Utility",
                            emoji: "🧰",
                            description: "Utility commands",
                            default: false,
                          }
                        )
                    ),
                  ],
                })
                .then(async (m) => {
                  return;
                });
            } else if (i.customId == "help" && i.values[0] == "img") {
              await i
                .update({
                  embeds: [
                    {
                      color: String("#00cccc"),
                      title: String("📸 IMAGE SECTION:"),
                      description: String(
                        [
                          "**d!delete** or **d!delete <@user>**",
                          "\n",
                          "**d!slap <@user>**",
                          "\n",
                          "**d!triggered** or **d!triggered <@user>**",
                          "\n",
                          "**d!kiss <@user>**",
                          "\n",
                          "**d!spank <@user>**",
                          "\n",
                          "**d!monster <@user>**",
                          "\n",
                          "**d!jail** or **d!jail <@user>**",
                          "\n",
                          "**d!gay** or **d!gay <@user>**",
                          "\n",
                          "**d!grey** or **d!grey <@user>**",
                          "\n",
                          "**d!invert** or **d!invert <@user>**",
                          "\n",
                          "**d!sepia** or **d!sepia <@user>**",
                          "\n",
                          "**d!ads** or **d!ads <@user>**",
                          "\n",
                          "**d!affect** or ** d!affect <@user>**",
                          "\n",
                          "**d!beautiful** or **d!beautiful <@user>**",
                          "\n",
                          "**d!paint** or **d!paint <@user>**",
                          "\n",
                          "**d!wtfs** or **d!wtfs <@user>**",
                          "\n",
                          "**d!blackdiscord** or **d!blackdiscord <@user>**",
                          "\n",
                          "**d!discord** or **d!discord <@user>**",
                          "\n",
                          "**d!facepalm** or **d!facepalm <@user>**",
                          "\n",
                          "**d!hitla** or **d!hitla <@user>**",
                          "\n",
                          "**d!karaba** or **d!karaba <@user>**",
                          "\n",
                          "**d!mms** or **d!mms <@user>**",
                          "\n",
                          "**d!notstonks** or **d!notstonks <@user>**",
                          "\n",
                          "**d!poutine** or **d!poutine <@user>**",
                          "\n",
                          "**d!rip** or **d!rip <@user>**",
                          "\n",
                          "**d!stonk** or **d!stonk <@user>**",
                          "\n",
                          "**d!tatoo** or **d!tatoo <@user>**",
                          "\n",
                          "**d!thomas** or **d!thomas <@user>**",
                          "\n",
                          "**d!trash** or **d!trash <@user>**",
                          "\n",
                          "**d!circle** or **d!circle <@user>**",
                          "\n",
                          "**d!stonk** or **d!stonk <@user>**",
                          "\n",
                          "**d!2stonk <@user>**",
                          "\n",
                          "**d!notstonk** or **d!notstonk <@user>**",
                        ].join("")
                      ),
                      footer: {
                        text: String("If Image API is down these commands will NOT work, check with d!ping"),
                        icon_url: String(),
                      },
                    },
                  ],
                  components: [
                    new MessageActionRow().addComponents(
                      new MessageSelectMenu()
                        .setCustomId("help")
                        .setPlaceholder("📸 Image")
                        .setMaxValues(1)
                        .setMinValues(1)
                        .setDisabled(false)

                        .addOptions(
                          {
                            value: "fun_&_games",
                            label: "Fun & Games",
                            emoji: "🎮",
                            description: "Fun commands",
                            default: false,
                          },
                          {
                            value: "music",
                            label: "Music",
                            emoji: "🎵",
                            description: "Music commands",
                            default: false,
                          },
                          {
                            value: "economy",
                            label: "Economy",
                            emoji: "⚖️",
                            description: "Economy commands",
                            default: false,
                          },
                          {
                            value: "img",
                            label: "Image",
                            emoji: "📸",
                            description: "Image commands",
                            default: false,
                          },
                          {
                            value: "utility",
                            label: "Utility",
                            emoji: "🧰",
                            description: "Utility commands",
                            default: false,
                          }
                        )
                    ),
                  ],
                })
                .then(async (m) => {
                  return;
                });
            } else if (i.customId == "help" && i.values[0] == "utility") {
              await i
                .update({
                  embeds: [
                    {
                      color: String("#00cccc"),
                      title: String("🧰 UTILITY SECTION:"),
                      description: String(
                        [
                          "**/help** Check all the slash commands",
                          "\n",
                          "**d!config** To configurate the Bot (Only admin)",
                          "\n",
                          "**d!news** To see news and changelogs",
                          "\n",
                          "**d!ping** To see the Bot ping (All 3 servers)",
                          "\n",
                          "**d!warn <@user>** To warn a member (Only admin)",
                          "\n",
                          "**d!warns <@user>** Check member warns (Only admin)",
                          "\n",
                          "**d!clearwarns <@user>** Clear the warns (Only admin)",
                          "\n",
                          "**d!mute <@user>** Mute a member (Only admin)",
                          "\n",
                          "**d!clean <amount>** To clean channels (Only admin, max 99 messages)",
                          "\n",
                          "**d!kick <@user>** Kick mentioned user (Only admin)",
                          "\n",
                          "**d!ban <@user>** Ban mentioned user (Only admin)",
                          "\n",
                          "\n",
                          "**d!stats** or **d!stats <@user>** To see your stats",
                          "\n",
                          "**d!server** Get information about the server",
                          "\n",
                          "**d!poll <message>** Create a simple poll",
                          "\n",
                          "**d!3poll** Create a triple poll",
                          "\n",
                          "**d!calc** Start the calculator",
                          "\n",
                          "**d!code** To make better code messages",
                          "\n",
                          "**d!link** Get the link to invite me",
                          "\n",
                          "**d!credits** Get all the credits",
                          "\n",
                          "**d!status** Check main server stats",
                        ].join("")
                      ),
                    },
                  ],
                  components: [
                    new MessageActionRow().addComponents(
                      new MessageSelectMenu()
                        .setCustomId("help")
                        .setPlaceholder("🧰 Utility")
                        .setMaxValues(1)
                        .setMinValues(1)
                        .setDisabled(false)

                        .addOptions(
                          {
                            value: "fun_&_games",
                            label: "Fun & Games",
                            emoji: "🎮",
                            description: "Fun commands",
                            default: false,
                          },
                          {
                            value: "music",
                            label: "Music",
                            emoji: "🎵",
                            description: "Music commands",
                            default: false,
                          },
                          {
                            value: "economy",
                            label: "Economy",
                            emoji: "⚖️",
                            description: "Economy commands",
                            default: false,
                          },
                          {
                            value: "img",
                            label: "Image",
                            emoji: "📸",
                            description: "Image commands",
                            default: false,
                          },
                          {
                            value: "utility",
                            label: "Utility",
                            emoji: "🧰",
                            description: "Utility commands",
                            default: false,
                          }
                        )
                    ),
                  ],
                })
                .then(async (m) => {});
            }
          });
        });
      return;
    }

    /*
    D!MEME
    Note: Reddit dosen't allow my request, need to change
    TODO: Need to be changed, idk
    */
    if ((s4dmessage.content.toUpperCase() || "").startsWith("D!MEME" || "")) {
      s4dmessage.reply({
        embeds: [
          {
            color: String("#cc0000"),
            title: String("❌ Command is disabled"),
            footer: {
              text: String("Due to Reddit API's new policy, this command is temporarily unavailable"),
            },
          },
        ],
        allowedMentions: {
          repliedUser: true,
        },
      });
      return;
      /*
      S4D_APP_REDDIT_musakui("memes")
        .then(async (result) => {
          s4dmessage
            .reply({
              embeds: [
                {
                  color: String("#ffcc00"),
                  title: String(result.title),
                  description: String(result.reddit_url),
                  image: {
                    url: String(result.media_url),
                  },
                  footer: {
                    text: String(["Upvotes: ", result.upvotes, "👍", " - Comments: ", result.comments, "💬"].join("")),
                    icon_url: String(),
                  },
                },
              ],
              components: [new MessageActionRow().addComponents(new MessageButton().setCustomId("meme_button").setLabel("Next meme").setEmoji("🔜").setDisabled(false).setStyle("SUCCESS"), new MessageButton().setCustomId("end_interaction_button").setLabel("End interaction").setEmoji("⛔").setDisabled(false).setStyle("SECONDARY"))],
            })
            .then(async (m) => {
              let collector = m.createMessageComponentCollector({
                filter: (i) => i.user.id === s4dmessage.author.id,
                time: Number(60000) * 1000,
              });
              collector.on("collect", async (i) => {
                if (i.customId == "meme_button") {
                  S4D_APP_REDDIT_musakui("memes")
                    .then(async (result) => {
                      await i
                        .update({
                          embeds: [
                            {
                              color: String("#ffcc00"),
                              title: String(result.title),
                              description: String(result.reddit_url),
                              image: {
                                url: String(result.media_url),
                              },
                              footer: {
                                text: String(["Upvotes: ", result.upvotes, "👍", " - Comments: ", result.comments, "💬"].join("")),
                                icon_url: String(),
                              },
                            },
                          ],
                          components: [new MessageActionRow().addComponents(new MessageButton().setCustomId("meme_button").setLabel("Next meme").setEmoji("��").setDisabled(false).setStyle("SUCCESS"), new MessageButton().setCustomId("end_interaction_button").setLabel("End interaction").setEmoji("⛔").setDisabled(false).setStyle("SECONDARY"))],
                        })
                        .then(async (m) => {});
                    })
                    .catch((error) => console.log(error));
                } else if (i.customId == "end_interaction_button") {
                  await i
                    .update({
                      embeds: [
                        {
                          color: String("#ffcc00"),
                          title: String(result.title),
                          description: String(result.reddit_url),
                          image: {
                            url: String(result.media_url),
                          },
                          footer: {
                            text: String(["Upvotes: ", result.upvotes, "👍", " - Comments: ", result.comments, "💬"].join("")),
                            icon_url: String(),
                          },
                        },
                      ],
                      components: [new MessageActionRow().addComponents(new MessageButton().setCustomId("meme_button").setLabel("Next meme").setEmoji("🔜").setDisabled(true).setStyle("SUCCESS"), new MessageButton().setCustomId("end_interaction_button").setLabel("End interaction").setEmoji("⛔").setDisabled(true).setStyle("SECONDARY"))],
                    })
                    .then(async (m) => {});
                }
              });
            });
        })
        .catch((error) => console.log(error));
        */
    }

    /*
    D!NUKE
    */
    if ((s4dmessage.content.toUpperCase() || "").startsWith("D!NUKE" || "")) {
      if (!s4d.database.has(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-nuketimer"].join("")))) {
        s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-nuketimer"].join("")), 0);
      }
      if (
        !(
          new Date().getTime() >
          s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-nuketimer"].join(""))) + 15000
        )
      ) {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#000000"),
              description: String(
                [
                  "⏰ Slowdown man, you can nuke again: **<t:",
                  Math.floor(
                    (s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-nuketimer"].join(""))) +
                      15000) /
                      1000
                  ),
                  ":R>**",
                ].join("")
              ),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      nukeCooldown = new Date().getTime();
      s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-nuketimer"].join("")), nukeCooldown);
      s4dmessage
        .reply({
          content: String("**Are you sure to launch the nuke?!**"),
          components: [
            new MessageActionRow().addComponents(
              new MessageButton()
                .setCustomId("nuke_button")
                .setLabel("YES")
                .setEmoji("❌")
                .setDisabled(false)
                .setStyle("DANGER"),
              new MessageButton()
                .setCustomId("no_nuke_button")
                .setLabel("NO")
                .setEmoji("✅")
                .setDisabled(false)
                .setStyle("SUCCESS")
            ),
          ],
        })
        .then(async (m) => {
          let collector = m.createMessageComponentCollector({
            filter: (i) => i.user.id === s4dmessage.author.id,
            time: Number(60000) * 1000,
          });
          collector.on("collect", async (i) => {
            if (i.customId == "nuke_button") {
              await i
                .update({
                  content: String("**Launching...**"),
                  components: [],
                })
                .then(async (m) => {});
              await delay(Number(2) * 1000);
              s4dmessage.channel.send({
                content: String("**5**"),
              });
              await delay(Number(1) * 1000);
              s4dmessage.channel.send({
                content: String("**4**"),
              });
              await delay(Number(1) * 1000);
              s4dmessage.channel.send({
                content: String("**3**"),
              });
              await delay(Number(1) * 1000);
              s4dmessage.channel.send({
                content: String("**2**"),
              });
              await delay(Number(1) * 1000);
              s4dmessage.channel.send({
                content: String("**1**"),
              });
              await delay(Number(3) * 1000);
              s4dmessage.reply({
                embeds: [
                  {
                    color: String("#cc0000"),
                    title: String(String(s4dmessage.author.username) + " WHAT HAVE YOU DONE?!"),
                    image: {
                      url: String(
                        "https://cdn.discordapp.com/attachments/883768275346030703/943187896209387541/nuke-nuclear.gif"
                      ),
                    },
                  },
                ],
                allowedMentions: {
                  repliedUser: true,
                },
              });
              return;
            } else if (i.customId == "no_nuke_button") {
              await i
                .update({
                  content: String("**Well done!**"),
                  components: [],
                })
                .then(async (m) => {
                  s4dmessage.reply({
                    embeds: [
                      {
                        color: String("#33cc00"),
                        title: String(String(s4dmessage.author.username) + " congratulation!"),
                        image: {
                          url: String(
                            "https://cdn.discordapp.com/attachments/883768275346030703/911967873843462194/cover10.png"
                          ),
                        },
                      },
                    ],
                    allowedMentions: {
                      repliedUser: true,
                    },
                  });
                });
              return;
            }
          });
        });
      return;
    }

    /*
    D!CALC
    */
    if (
      (s4dmessage.content.toUpperCase() || "").startsWith("D!CALC" || "") ||
      (s4dmessage.content.toUpperCase() || "").startsWith("D!CALCULATOR" || "")
    ) {
      await Calculator({
        message: s4dmessage,
        embed: {
          title: "Mega calculator 2025(TM)",
          color: "#333399",
          footer: s4dmessage.author.username,
          timestamp: true,
        },
        disabledQuery: "Calculator disabled!",
        invalidQuery: "wtf",
        othersMessage: "Only <@{{author}}> can use the buttons!",
      });
      return;
    }

    /*
    D!SNAKE
    */
    if ((s4dmessage.content.toUpperCase() || "").startsWith("D!SNAKE" || "")) {
      await Snake({
        message: s4dmessage,
        embed: {
          title: "Snake game time!",
          description: "GG, you scored **{{score}}** points!",
          color: "#003300",
          footer: s4dmessage.author.username,
          timestamp: true,
        },
        emojis: {
          empty: "⬛",
          snakeBody: "🟩",
          food: "🍔",
          up: "⬆️",
          right: "⬅️",
          down: "⬇️",
          left: "➡️",
        },
        othersMessage: "Only <@{{author}}> can use the buttons!",
        buttonText: "🛑 END",
      });
      return;
    }

    /*
    D!SAY
    */
    arguments = s4dmessage.content.split(" ");
    command = arguments.splice(0, 1)[0];
    if ((command.toUpperCase() || "").startsWith("D!SAY" || "")) {
      s4dmessage.delete();
      s4dmessage.channel.send({
        embeds: [
          {
            color: String(colourRandom()),
            description: String(["<", s4dmessage.author.username, "> ", arguments.join(" ")].join("")),
          },
        ],
      });
    }

    /*
    D!RATE
    */
    rateProbs = mathRandomInt(0, 10);
    if (s4dmessage.content.toUpperCase() == "D!RATE") {
      s4dmessage.reply({
        embeds: [
          {
            color: String("#ff0000"),
            title: String("❌ Error"),
            description: String("Correct command: **d!rate <text to rate>**"),
          },
        ],
        allowedMentions: {
          repliedUser: true,
        },
      });
      return;
    } else if ((s4dmessage.content.toUpperCase() || "").startsWith("D!RATE" || "")) {
      s4dmessage.reply({
        embeds: [
          {
            color: String("#999900"),
            description: String(
              [s4dmessage.author.username, ", in my opinion, i'd give a **", String(rateProbs) + "/10** 🤔"].join("")
            ),
          },
        ],
        allowedMentions: {
          repliedUser: true,
        },
      });
      return;
    }

    /*
    D!AKINATOR
    */
    if ((s4dmessage.content.toUpperCase() || "").startsWith("D!AKINATOR" || "")) {
      s4dmessage
        .reply({
          embeds: [
            {
              color: String("#33ccff"),
              title: String("🎮 AKINATOR GAME MENU"),
              description: String("To start the game you have to choose a category"),
            },
          ],
          components: [
            new MessageActionRow().addComponents(
              new MessageSelectMenu()
                .setCustomId("akinator")
                .setPlaceholder("Choose the category!")
                .setMaxValues(1)
                .setMinValues(1)
                .setDisabled(false)

                .addOptions(
                  {
                    value: "character",
                    label: "Akinator character",
                    emoji: "🤴",
                    description: "Character",
                    default: false,
                  },
                  {
                    value: "object",
                    label: "Akinator object",
                    emoji: "💡",
                    description: "Object",
                    default: false,
                  },
                  {
                    value: "animal",
                    label: "Akinator animal",
                    emoji: "🐶",
                    description: "Animal",
                    default: false,
                  }
                )
            ),
          ],
        })
        .then(async (m) => {
          let collector = m.createMessageComponentCollector({
            filter: (i) => i.user.id === s4dmessage.member.id,
            time: 120000,
          });
          collector.on("collect", async (i) => {
            if (i.customId == "akinator" && i.values[0] == "character") {
              await i
                .update({
                  embeds: [
                    {
                      color: String("#33cc00"),
                      title: String("✅ Game successfully started!"),
                      description: String("Click the buttons to interact!"),
                    },
                  ],
                  components: [
                    new MessageActionRow().addComponents(
                      new MessageSelectMenu()
                        .setCustomId("akinator")
                        .setPlaceholder("🤴 Akinator character")
                        .setMaxValues(1)
                        .setMinValues(1)
                        .setDisabled(true)

                        .addOptions(
                          {
                            value: "character",
                            label: "Akinator character",
                            emoji: "🤴",
                            description: "Character",
                            default: false,
                          },
                          {
                            value: "object",
                            label: "Akinator object",
                            emoji: "💡",
                            description: "Object",
                            default: false,
                          },
                          {
                            value: "animal",
                            label: "Akinator animal",
                            emoji: "🐶",
                            description: "Animal",
                            default: false,
                          }
                        )
                    ),
                  ],
                })
                .then(async (m) => {
                  return;
                });
              akinator(s4dmessage, {
                language: "en",
                childMode: true,
                gameType: "character",
                useButtons: true,
              });
            } else if (i.customId == "akinator" && i.values[0] == "object") {
              await i
                .update({
                  embeds: [
                    {
                      color: String("#33cc00"),
                      title: String("✅ Game successfully started!"),
                      description: String("Click the buttons to interact!"),
                    },
                  ],
                  components: [
                    new MessageActionRow().addComponents(
                      new MessageSelectMenu()
                        .setCustomId("akinator")
                        .setPlaceholder("💡 Akinator object")
                        .setMaxValues(1)
                        .setMinValues(1)
                        .setDisabled(true)

                        .addOptions(
                          {
                            value: "character",
                            label: "Akinator character",
                            emoji: "🤴",
                            description: "Character",
                            default: false,
                          },
                          {
                            value: "object",
                            label: "Akinator object",
                            emoji: "💡",
                            description: "Object",
                            default: false,
                          },
                          {
                            value: "animal",
                            label: "Akinator animal",
                            emoji: "🐶",
                            description: "Animal",
                            default: false,
                          }
                        )
                    ),
                  ],
                })
                .then(async (m) => {
                  return;
                });
              akinator(s4dmessage, {
                language: "en",
                childMode: true,
                gameType: "object",
                useButtons: true,
              });
            } else if (i.customId == "akinator" && i.values[0] == "animal") {
              await i
                .update({
                  embeds: [
                    {
                      color: String("#33cc00"),
                      title: String("✅ Game successfully started!"),
                      description: String("Click the buttons to interact!"),
                    },
                  ],
                  components: [
                    new MessageActionRow().addComponents(
                      new MessageSelectMenu()
                        .setCustomId("akinator")
                        .setPlaceholder("🐶 Akinator animal")
                        .setMaxValues(1)
                        .setMinValues(1)
                        .setDisabled(true)

                        .addOptions(
                          {
                            value: "character",
                            label: "Akinator character",
                            emoji: "🤴",
                            description: "Character",
                            default: false,
                          },
                          {
                            value: "object",
                            label: "Akinator object",
                            emoji: "💡",
                            description: "Object",
                            default: false,
                          },
                          {
                            value: "animal",
                            label: "Akinator animal",
                            emoji: "🐶",
                            description: "Animal",
                            default: false,
                          }
                        )
                    ),
                  ],
                })
                .then(async (m) => {
                  return;
                });
              akinator(s4dmessage, {
                language: "en",
                childMode: true,
                gameType: "animal",
                useButtons: true,
              });
            }
          });
        });
      return;
    }

    /*
    D!HEY
    */
    if ((s4dmessage.content.toUpperCase() || "").startsWith("D!HEY" || "")) {
      s4dmessage.reply({
        embeds: [
          {
            color: String("#66ffff"),
            title: String("Oh hello man!"),
            description: String("Hey i'm DiversityBOT, type **d!help** for all the commands"),
          },
        ],
        allowedMentions: {
          repliedUser: true,
        },
      });
      return;
    }

    /*
    D!EVENT
    */
    if (s4dmessage.content.toUpperCase() == "D!EVENT") {
      s4dmessage.reply({
        embeds: [
          {
            color: String("#339999"),
            title: String("Ongoing event: None"),
            description: String(
              ["There are no ongoing events, check the Discord for more: https://discord.gg/KxadTdz"].join("")
            ),
            footer: {
              text: String("Sadly, no events at the moment"),
            },
          },
        ],
        allowedMentions: {
          repliedUser: true,
        },
      });
      return;
    }

    /*
    D!HACK
    */
    if ((s4dmessage.content.toUpperCase() || "").startsWith("D!HACK" || "")) {
      try {
        if (!s4d.database.has(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-hacktimer"].join("")))) {
          s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-hacktimer"].join("")), 0);
        }
        if (
          !(
            new Date().getTime() >
            s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-hacktimer"].join(""))) + 60000
          )
        ) {
          s4dmessage.reply({
            embeds: [
              {
                color: String("#000000"),
                description: String(
                  [
                    "⏰ Slowdown man, you can hack again: **<t:",
                    Math.floor(
                      (s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-hacktimer"].join(""))) +
                        60000) /
                        1000
                    ),
                    ":R>**",
                  ].join("")
                ),
              },
            ],
            allowedMentions: {
              repliedUser: true,
            },
          });
          return;
        }
        hackCooldown = new Date().getTime();
        s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-hacktimer"].join("")), hackCooldown);
        s4dmessage
          .reply({
            embeds: [
              {
                color: String("#990000"),
                description: String(
                  [
                    "```diff",
                    "\n",
                    "DiversityBOT's magic command prompt!",
                    "\n",
                    "\n",
                    "\n",
                    "\n",
                    "\n",
                    "> hack -u ",
                    s4d.client.users.cache.get(String(s4dmessage.mentions.members.first().id)).username,
                    "\n",
                    "```",
                  ].join("")
                ),
                thumbnail: {
                  url: String(
                    "https://cdn.discordapp.com/attachments/1079037173875085312/1178727354613387305/images.png?ex=65773265&is=6564bd65&hm=61659d3081128cb4fda4909e38cc6b38be0207df454b70fd8a74809efa3ac2c8&"
                  ),
                },
              },
            ],
            allowedMentions: {
              repliedUser: true,
            },
          })
          .then(async (s4dfrost_real_reply) => {
            await delay(Number(2) * 1000);
            s4dfrost_real_reply.edit({
              embeds: [
                {
                  color: String("#000000"),
                  description: String(
                    [
                      "```diff",
                      "\n",
                      "DiversityBOT's magic command prompt!",
                      "\n",
                      "\n",
                      "\n",
                      "\n",
                      "\n",
                      "> [▖] Injecting Brownware...",
                      "\n",
                      "```",
                    ].join("")
                  ),
                  thumbnail: {
                    url: String(
                      "https://cdn.discordapp.com/attachments/1079037173875085312/1178727354613387305/images.png?ex=65773265&is=6564bd65&hm=61659d3081128cb4fda4909e38cc6b38be0207df454b70fd8a74809efa3ac2c8&"
                    ),
                  },
                },
              ],
            });
            await delay(Number(2) * 1000);
            s4dfrost_real_reply.edit({
              embeds: [
                {
                  color: String("#000000"),
                  description: String(
                    [
                      "```diff",
                      "\n",
                      "DiversityBOT's magic command prompt!",
                      "\n",
                      "\n",
                      "\n",
                      "> [▖] Injecting Brownware...",
                      "\n",
                      "> [▘] Brownware injected, time to hack!",
                      "\n",
                      "```",
                    ].join("")
                  ),
                  thumbnail: {
                    url: String(
                      "https://cdn.discordapp.com/attachments/1079037173875085312/1178727354613387305/images.png?ex=65773265&is=6564bd65&hm=61659d3081128cb4fda4909e38cc6b38be0207df454b70fd8a74809efa3ac2c8&"
                    ),
                  },
                },
              ],
            });
            await delay(Number(2) * 1000);
            s4dfrost_real_reply.edit({
              embeds: [
                {
                  color: String("#000000"),
                  description: String(
                    [
                      "```diff",
                      "\n",
                      "DiversityBOT's magic command prompt!",
                      "\n",
                      "\n",
                      "> [▖] Injecting Brownware...",
                      "\n",
                      "> [▘] Brownware injected, time to hack!",
                      "\n",
                      "> [▝] Getting Discord account token..",
                      "\n",
                      "```",
                    ].join("")
                  ),
                  thumbnail: {
                    url: String(
                      "https://cdn.discordapp.com/attachments/1079037173875085312/1178727354613387305/images.png?ex=65773265&is=6564bd65&hm=61659d3081128cb4fda4909e38cc6b38be0207df454b70fd8a74809efa3ac2c8&"
                    ),
                  },
                },
              ],
            });
            await delay(Number(2) * 1000);
            hackcmdTokenRandom = mathRandomInt(2.145749753554953e24, 9.952746161519527e30);
            s4dfrost_real_reply.edit({
              embeds: [
                {
                  color: String("#000000"),
                  description: String(
                    [
                      "```diff",
                      "\n",
                      "DiversityBOT's magic command prompt!",
                      "\n",
                      "\n",
                      "> [▘] Brownware injected, time to hack!",
                      "\n",
                      "> [▝] Getting Discord account token..",
                      "\n",
                      "> [▗] Discord login token: " + String(hackcmdTokenRandom),
                      "\n",
                      "```",
                    ].join("")
                  ),
                  thumbnail: {
                    url: String(
                      "https://cdn.discordapp.com/attachments/1079037173875085312/1178727354613387305/images.png?ex=65773265&is=6564bd65&hm=61659d3081128cb4fda4909e38cc6b38be0207df454b70fd8a74809efa3ac2c8&"
                    ),
                  },
                },
              ],
            });
            await delay(Number(2) * 1000);
            s4dfrost_real_reply.edit({
              embeds: [
                {
                  color: String("#000000"),
                  description: String(
                    [
                      "```diff",
                      "\n",
                      "DiversityBOT's magic command prompt!",
                      "\n",
                      "\n",
                      "> [▝] Getting Discord account token..",
                      "\n",
                      "> [▗] Discord login token: " + String(hackcmdTokenRandom),
                      "\n",
                      "> [▖] Getting IP address...",
                      "\n",
                      "```",
                    ].join("")
                  ),
                  thumbnail: {
                    url: String(
                      "https://cdn.discordapp.com/attachments/1079037173875085312/1178727354613387305/images.png?ex=65773265&is=6564bd65&hm=61659d3081128cb4fda4909e38cc6b38be0207df454b70fd8a74809efa3ac2c8&"
                    ),
                  },
                },
              ],
            });
            await delay(Number(2) * 1000);
            hackcmdIpNumbers = [mathRandomInt(1, 255), mathRandomInt(1, 255), mathRandomInt(1, 255), mathRandomInt(1, 255)];
            s4dfrost_real_reply.edit({
              embeds: [
                {
                  color: String("#000000"),
                  description: String(
                    [
                      "```diff",
                      "\n",
                      "DiversityBOT's magic command prompt!",
                      "\n",
                      "\n",
                      "> [▗] Discord login token: " + String(hackcmdTokenRandom),
                      "\n",
                      "> [▖] Getting IP address...",
                      "\n",
                      [
                        "> [▘] IP address: ",
                        hackcmdIpNumbers[0],
                        ".",
                        hackcmdIpNumbers[0],
                        ".",
                        hackcmdIpNumbers[1],
                        ".",
                        hackcmdIpNumbers.slice(-1)[0],
                      ].join(""),
                      "\n",
                      "```",
                    ].join("")
                  ),
                  thumbnail: {
                    url: String(
                      "https://cdn.discordapp.com/attachments/1079037173875085312/1178727354613387305/images.png?ex=65773265&is=6564bd65&hm=61659d3081128cb4fda4909e38cc6b38be0207df454b70fd8a74809efa3ac2c8&"
                    ),
                  },
                  footer: {
                    text: String("Please note this is a random generated IP"),
                    icon_url: String(),
                  },
                },
              ],
            });
            await delay(Number(2) * 1000);
            s4dfrost_real_reply.edit({
              embeds: [
                {
                  color: String("#000000"),
                  description: String(
                    [
                      "```diff",
                      "\n",
                      "DiversityBOT's magic command prompt!",
                      "\n",
                      "\n",
                      "> [▖] Getting IP address...",
                      "\n",
                      [
                        "> [▘] IP address: ",
                        hackcmdIpNumbers[0],
                        ".",
                        hackcmdIpNumbers[0],
                        ".",
                        hackcmdIpNumbers[1],
                        ".",
                        hackcmdIpNumbers.slice(-1)[0],
                      ].join(""),
                      "\n",
                      "> [▝] Stealing all the important data...",
                      "\n",
                      "```",
                    ].join("")
                  ),
                  thumbnail: {
                    url: String(
                      "https://cdn.discordapp.com/attachments/1079037173875085312/1178727354613387305/images.png?ex=65773265&is=6564bd65&hm=61659d3081128cb4fda4909e38cc6b38be0207df454b70fd8a74809efa3ac2c8&"
                    ),
                  },
                },
              ],
            });
            await delay(Number(2) * 1000);
            hackcmdRandomProbs = mathRandomInt(1, 18);
            s4dfrost_real_reply.edit({
              embeds: [
                {
                  color: String("#000000"),
                  description: String(
                    [
                      "```diff",
                      "\n",
                      "DiversityBOT's magic command prompt!",
                      "\n",
                      "\n",
                      [
                        "> [▘] IP address: ",
                        hackcmdIpNumbers[0],
                        ".",
                        hackcmdIpNumbers[0],
                        ".",
                        hackcmdIpNumbers[1],
                        ".",
                        hackcmdIpNumbers.slice(-1)[0],
                      ].join(""),
                      "\n",
                      "> [▝] Stealing all the important data...",
                      "\n",
                      "> [▗] " +
                        String(
                          [
                            "his project source code",
                            "maths book",
                            "Stole his meme",
                            "I stole his 1 BTC",
                            "Browser history",
                            "His photos :eyes:",
                            "wtf is this",
                            "A way to use Black Holes?",
                            "I found the plan the invade Russia?",
                            "I found super secret NASA files",
                            "A secret project for Mars?",
                            "wtf did i found!?",
                            "I found +18 images :eyes:",
                            "This guys has over 500GB of anime girls",
                            'I found a game called "Sex with Stalin"',
                            "I found the secret about Area 51",
                            "This guys has cringe memes",
                            ":eyes:",
                          ][hackcmdRandomProbs - 1]
                        ),
                      "\n",
                      "```",
                    ].join("")
                  ),
                  thumbnail: {
                    url: String(
                      "https://cdn.discordapp.com/attachments/1079037173875085312/1178727354613387305/images.png?ex=65773265&is=6564bd65&hm=61659d3081128cb4fda4909e38cc6b38be0207df454b70fd8a74809efa3ac2c8&"
                    ),
                  },
                },
              ],
            });
            await delay(Number(2) * 1000);
            s4dfrost_real_reply.edit({
              embeds: [
                {
                  color: String("#000000"),
                  description: String(
                    [
                      "```diff",
                      "\n",
                      "DiversityBOT's magic command prompt!",
                      "\n",
                      "\n",
                      "> [▝] Stealing all the important data...",
                      "\n",
                      "> [▗] " +
                        String(
                          [
                            "his project source code",
                            "maths book",
                            "Stole his meme",
                            "I stole his 1 BTC",
                            "Browser history",
                            "His photos :eyes:",
                            "wtf is this",
                            "A way to use Black Holes?",
                            "I found the plan the invade Russia?",
                            "I found super secret NASA files",
                            "A secret project for Mars?",
                            "wtf did i found!?",
                            "I found +18 images :eyes:",
                            "This guys has over 500GB of anime girls",
                            'I found a game called "Sex with Stalin"',
                            "I found the secret about Area 51",
                            "This guys has cringe memes",
                            ":eyes:",
                          ][hackcmdRandomProbs - 1]
                        ),
                      "\n",
                      "> [▖] Exploiting coords using Nocom...",
                      "\n",
                      "```",
                    ].join("")
                  ),
                  thumbnail: {
                    url: String(
                      "https://cdn.discordapp.com/attachments/1079037173875085312/1178727354613387305/images.png?ex=65773265&is=6564bd65&hm=61659d3081128cb4fda4909e38cc6b38be0207df454b70fd8a74809efa3ac2c8&"
                    ),
                  },
                },
              ],
            });
            await delay(Number(2) * 1000);
            hackcmdCoordsX = mathRandomInt(-9999999, 9999999);
            hackcmdCoordsZ = mathRandomInt(-9999999, 9999999);
            s4dfrost_real_reply.edit({
              embeds: [
                {
                  color: String("#000000"),
                  description: String(
                    [
                      "```diff",
                      "\n",
                      "DiversityBOT's magic command prompt!",
                      "\n",
                      "\n",
                      "> [▗] " +
                        String(
                          [
                            "his project source code",
                            "maths book",
                            "Stole his meme",
                            "I stole his 1 BTC",
                            "Browser history",
                            "His photos :eyes:",
                            "wtf is this",
                            "A way to use Black Holes?",
                            "I found the plan the invade Russia?",
                            "I found super secret NASA files",
                            "A secret project for Mars?",
                            "wtf did i found!?",
                            "I found +18 images :eyes:",
                            "This guys has over 500GB of anime girls",
                            'I found a game called "Sex with Stalin"',
                            "I found the secret about Area 51",
                            "This guys has cringe memes",
                            ":eyes:",
                          ][hackcmdRandomProbs - 1]
                        ),
                      "\n",
                      "> [▖] Exploiting coords using Nocom...",
                      "\n",
                      ["> [▘] House coords: X ", hackcmdCoordsX, ", Z ", hackcmdCoordsZ].join(""),
                      "\n",
                      "```",
                    ].join("")
                  ),
                  thumbnail: {
                    url: String(
                      "https://cdn.discordapp.com/attachments/1079037173875085312/1178727354613387305/images.png?ex=65773265&is=6564bd65&hm=61659d3081128cb4fda4909e38cc6b38be0207df454b70fd8a74809efa3ac2c8&"
                    ),
                  },
                },
              ],
            });
            await delay(Number(2) * 1000);
            s4dfrost_real_reply.edit({
              embeds: [
                {
                  color: String("#000000"),
                  description: String(
                    [
                      "```diff",
                      "\n",
                      "DiversityBOT's magic command prompt!",
                      "\n",
                      "\n",
                      "> [▖] Exploiting coords using Nocom...",
                      "\n",
                      ["> [▘] House coords: X ", hackcmdCoordsX, ", Z ", hackcmdCoordsZ].join(""),
                      "\n",
                      "> [▝] Hacking all his important accounts...",
                      "\n",
                      "```",
                    ].join("")
                  ),
                  thumbnail: {
                    url: String(
                      "https://cdn.discordapp.com/attachments/1079037173875085312/1178727354613387305/images.png?ex=65773265&is=6564bd65&hm=61659d3081128cb4fda4909e38cc6b38be0207df454b70fd8a74809efa3ac2c8&"
                    ),
                  },
                },
              ],
            });
            await delay(Number(2) * 1000);
            hackcmdRandomProbs = mathRandomInt(1, 11);
            s4dfrost_real_reply.edit({
              embeds: [
                {
                  color: String("#000000"),
                  description: String(
                    [
                      "```diff",
                      "\n",
                      "DiversityBOT's magic command prompt!",
                      "\n",
                      "\n",
                      ["> [▘] House coords: X ", hackcmdCoordsX, ", Z ", hackcmdCoordsZ].join(""),
                      "\n",
                      "> [▝] Hacking all his important accounts...",
                      "\n",
                      [
                        "> [▗] Hacked his: ",
                        [
                          "Instagram",
                          "School",
                          "Youtube",
                          "Twitch",
                          "Discord",
                          "Reddit",
                          "Minecraft",
                          "Roblox",
                          "Steam",
                          "PornHub",
                          "Reddit",
                        ][hackcmdRandomProbs - 1],
                        " account",
                      ].join(""),
                      "\n",
                      "```",
                    ].join("")
                  ),
                  thumbnail: {
                    url: String(
                      "https://cdn.discordapp.com/attachments/1079037173875085312/1178727354613387305/images.png?ex=65773265&is=6564bd65&hm=61659d3081128cb4fda4909e38cc6b38be0207df454b70fd8a74809efa3ac2c8&"
                    ),
                  },
                },
              ],
            });
            await delay(Number(2) * 1000);
            s4dfrost_real_reply.edit({
              embeds: [
                {
                  color: String("#000000"),
                  description: String(
                    [
                      "```diff",
                      "\n",
                      "DiversityBOT's magic command prompt!",
                      "\n",
                      "\n",
                      "> [▝] Hacking all his important accounts...",
                      "\n",
                      [
                        "> [▗] Hacked his: ",
                        [
                          "Instagram",
                          "School",
                          "Youtube",
                          "Twitch",
                          "Discord",
                          "Reddit",
                          "Minecraft",
                          "Roblox",
                          "Steam",
                          "PornHub",
                          "Reddit",
                        ][hackcmdRandomProbs - 1],
                        " account",
                      ].join(""),
                      "\n",
                      "> [▖] Executing remote code using Log4j exploit...",
                      "\n",
                      "```",
                    ].join("")
                  ),
                  thumbnail: {
                    url: String(
                      "https://cdn.discordapp.com/attachments/1079037173875085312/1178727354613387305/images.png?ex=65773265&is=6564bd65&hm=61659d3081128cb4fda4909e38cc6b38be0207df454b70fd8a74809efa3ac2c8&"
                    ),
                  },
                },
              ],
            });
            await delay(Number(2) * 1000);
            s4dfrost_real_reply.edit({
              embeds: [
                {
                  color: String("#000000"),
                  description: String(
                    [
                      "```diff",
                      "\n",
                      "DiversityBOT's magic command prompt!",
                      "\n",
                      "\n",
                      [
                        "> [▗] Hacked his: ",
                        [
                          "Instagram",
                          "School",
                          "Youtube",
                          "Twitch",
                          "Discord",
                          "Reddit",
                          "Minecraft",
                          "Roblox",
                          "Steam",
                          "PornHub",
                          "Reddit",
                        ][hackcmdRandomProbs - 1],
                        " account",
                      ].join(""),
                      "\n",
                      "> [▖] Executing remote code using Log4j exploit...",
                      "\n",
                      "> [▘] The code has been executed",
                      "\n",
                      "```",
                    ].join("")
                  ),
                  thumbnail: {
                    url: String(
                      "https://cdn.discordapp.com/attachments/1079037173875085312/1178727354613387305/images.png?ex=65773265&is=6564bd65&hm=61659d3081128cb4fda4909e38cc6b38be0207df454b70fd8a74809efa3ac2c8&"
                    ),
                  },
                },
              ],
            });
            await delay(Number(2) * 1000);
            hackcmdRandomProbs = mathRandomInt(1, 10);
            s4dfrost_real_reply.edit({
              embeds: [
                {
                  color: String("#000000"),
                  description: String(
                    [
                      "```diff",
                      "\n",
                      "DiversityBOT's magic command prompt!",
                      "\n",
                      "\n",
                      "> [▖] Executing remote code using Log4j exploit...",
                      "\n",
                      "> [▘] The code has been executed",
                      "\n",
                      [
                        "> [▝] Changing his Desktop background to ",
                        [
                          "a famous art",
                          "a big ass",
                          "something of secret",
                          "his mum",
                          "his dog",
                          "+18 imgs :eyes: ",
                          "his other girlfriend",
                          "a secret project",
                          "a random girl on insta",
                          "Obama",
                        ][hackcmdRandomProbs - 1],
                        " :troll:",
                      ].join(""),
                      "\n",
                      "```",
                    ].join("")
                  ),
                  thumbnail: {
                    url: String(
                      "https://cdn.discordapp.com/attachments/1079037173875085312/1178727354613387305/images.png?ex=65773265&is=6564bd65&hm=61659d3081128cb4fda4909e38cc6b38be0207df454b70fd8a74809efa3ac2c8&"
                    ),
                  },
                },
              ],
            });
            await delay(Number(2) * 1000);
            s4dfrost_real_reply.edit({
              embeds: [
                {
                  color: String("#000000"),
                  description: String(
                    [
                      "```diff",
                      "\n",
                      "DiversityBOT's magic command prompt!",
                      "\n",
                      "\n",
                      "> [▘] The code has been executed",
                      "\n",
                      [
                        "> [▝] Changing Desktop background to ",
                        [
                          "a famous art",
                          "a big ass",
                          "something of secret",
                          "his mum",
                          "his dog",
                          "+18 imgs :eyes: ",
                          "his other girlfriend",
                          "a secret project",
                          "a random girl on insta",
                          "Obama",
                        ][hackcmdRandomProbs - 1],
                        " :troll:",
                      ].join(""),
                      "\n",
                      "> [▗] Changed Desktop background! :trollolol:",
                      "\n",
                      "```",
                    ].join("")
                  ),
                  thumbnail: {
                    url: String(
                      "https://cdn.discordapp.com/attachments/1079037173875085312/1178727354613387305/images.png?ex=65773265&is=6564bd65&hm=61659d3081128cb4fda4909e38cc6b38be0207df454b70fd8a74809efa3ac2c8&"
                    ),
                  },
                },
              ],
            });
            await delay(Number(2) * 1000);
            s4dfrost_real_reply.edit({
              embeds: [
                {
                  color: String("#000000"),
                  description: String(
                    [
                      "```diff",
                      "\n",
                      "DiversityBOT's magic command prompt!",
                      "\n",
                      "\n",
                      [
                        "> [▝] Changing Desktop background to ",
                        [
                          "a famous art",
                          "a big ass",
                          "something of secret",
                          "his mum",
                          "his dog",
                          "+18 imgs :eyes: ",
                          "his other girlfriend",
                          "a secret project",
                          "a random girl on insta",
                          "Obama",
                        ][hackcmdRandomProbs - 1],
                        " :troll:",
                      ].join(""),
                      "\n",
                      "> [▗] Changed Desktop background! :trollolol:",
                      "\n",
                      '> [▖] Opening the "+18" folder...',
                      "\n",
                      "```",
                    ].join("")
                  ),
                  thumbnail: {
                    url: String(
                      "https://cdn.discordapp.com/attachments/1079037173875085312/1178727354613387305/images.png?ex=65773265&is=6564bd65&hm=61659d3081128cb4fda4909e38cc6b38be0207df454b70fd8a74809efa3ac2c8&"
                    ),
                  },
                },
              ],
            });
            await delay(Number(2) * 1000);
            hackcmdRandomProbs = mathRandomInt(1, 10);
            s4dfrost_real_reply.edit({
              embeds: [
                {
                  color: String("#000000"),
                  description: String(
                    [
                      "```diff",
                      "\n",
                      "DiversityBOT's magic command prompt!",
                      "\n",
                      "\n",
                      "> [▗] Changed Desktop background! :trollolol:",
                      "\n",
                      '> [▖] Opening the "+18" folder...',
                      "\n",
                      "> [▘] I found: " +
                        String(
                          [
                            " a damn...no comment...",
                            "a lot of Hentai :eyes:",
                            "nothing!",
                            "the popbob sex dupe :eyes:",
                            "something!",
                            "his secret girlfriend :eyes:",
                            "+18 images :eyes:",
                            "Minecraft porn? wtf",
                            "Sexy girls! :eyes:",
                            "A LOT OF HOT ANIME GIRLS! :eyes:",
                          ][hackcmdRandomProbs - 1]
                        ),
                      "\n",
                      "```",
                    ].join("")
                  ),
                  thumbnail: {
                    url: String(
                      "https://cdn.discordapp.com/attachments/1079037173875085312/1178727354613387305/images.png?ex=65773265&is=6564bd65&hm=61659d3081128cb4fda4909e38cc6b38be0207df454b70fd8a74809efa3ac2c8&"
                    ),
                  },
                },
              ],
            });
            await delay(Number(2) * 1000);
            s4dfrost_real_reply.edit({
              embeds: [
                {
                  color: String("#000000"),
                  description: String(
                    [
                      "```diff",
                      "\n",
                      "DiversityBOT's magic command prompt!",
                      "\n",
                      "\n",
                      '> [▖] Opening the "+18" folder...',
                      "\n",
                      "> [▘] I found: " +
                        String(
                          [
                            " a damn...no comment...",
                            "a lot of Hentai :eyes:",
                            "nothing!",
                            "the popbob sex dupe :eyes:",
                            "something!",
                            "his secret girlfriend :eyes:",
                            "+18 images :eyes:",
                            "Minecraft porn? wtf",
                            "Sexy girls! :eyes:",
                            "A LOT OF HOT ANIME GIRLS! :eyes:",
                          ][hackcmdRandomProbs - 1]
                        ),
                      "\n",
                      "> [▝] Sending all the data to the infamous hacker...",
                      "\n",
                      "```",
                    ].join("")
                  ),
                  thumbnail: {
                    url: String(
                      "https://cdn.discordapp.com/attachments/1079037173875085312/1178727354613387305/images.png?ex=65773265&is=6564bd65&hm=61659d3081128cb4fda4909e38cc6b38be0207df454b70fd8a74809efa3ac2c8&"
                    ),
                  },
                },
              ],
            });
            await delay(Number(2) * 1000);
            s4dfrost_real_reply.edit({
              embeds: [
                {
                  color: String("#000000"),
                  description: String(
                    [
                      "```diff",
                      "\n",
                      "DiversityBOT's magic command prompt!",
                      "\n",
                      "\n",
                      "> [▘] I found: " +
                        String(
                          [
                            " a damn...no comment...",
                            "a lot of Hentai :eyes:",
                            "nothing!",
                            "the popbob sex dupe :eyes:",
                            "something!",
                            "his secret girlfriend :eyes:",
                            "+18 images :eyes:",
                            "Minecraft porn? wtf",
                            "Sexy girls! :eyes:",
                            "A LOT OF HOT ANIME GIRLS! :eyes:",
                          ][hackcmdRandomProbs - 1]
                        ),
                      "\n",
                      "> [▝] Sending all the data to the infamous hacker...",
                      "\n",
                      "> [▗] Reporting this user to Discord immediately...",
                      "\n",
                      "```",
                    ].join("")
                  ),
                  thumbnail: {
                    url: String(
                      "https://cdn.discordapp.com/attachments/1079037173875085312/1178727354613387305/images.png?ex=65773265&is=6564bd65&hm=61659d3081128cb4fda4909e38cc6b38be0207df454b70fd8a74809efa3ac2c8&"
                    ),
                  },
                },
              ],
            });
            await delay(Number(2) * 1000);
            s4dfrost_real_reply.edit({
              embeds: [
                {
                  color: String("#000000"),
                  description: String(
                    [
                      "```diff",
                      "\n",
                      "DiversityBOT's magic command prompt!",
                      "\n",
                      "\n",
                      "> [▝] Sending all the data to the infamous hacker...",
                      "\n",
                      "> [▗] Reporting this user to Discord immediately...",
                      "\n",
                      "> [▖] Sending found +18 files to the Horny Police...",
                      "\n",
                      "```",
                    ].join("")
                  ),
                  thumbnail: {
                    url: String(
                      "https://cdn.discordapp.com/attachments/1079037173875085312/1178727354613387305/images.png?ex=65773265&is=6564bd65&hm=61659d3081128cb4fda4909e38cc6b38be0207df454b70fd8a74809efa3ac2c8&"
                    ),
                  },
                },
              ],
            });
            await delay(Number(2) * 1000);
            s4dfrost_real_reply.edit({
              embeds: [
                {
                  color: String("#33cc00"),
                  description: String(
                    [
                      "```diff",
                      "\n",
                      "DiversityBOT's magic command prompt!",
                      "\n",
                      "\n",
                      "\n",
                      "\n",
                      "\n",
                      [
                        "> ",
                        s4d.client.users.cache.get(String(s4dmessage.mentions.members.first().id)).username,
                        " has been hacked and reported",
                      ].join(""),
                      "\n",
                      "```",
                    ].join("")
                  ),
                  thumbnail: {
                    url: String(
                      "https://cdn.discordapp.com/attachments/1079037173875085312/1178727354613387305/images.png?ex=65773265&is=6564bd65&hm=61659d3081128cb4fda4909e38cc6b38be0207df454b70fd8a74809efa3ac2c8&"
                    ),
                  },
                },
              ],
            });
          });
        return;
      } catch (err) {
        s4dmessage.reply({
          content: String(String(s4dmessage.author) + ", can you please mention an user?"),
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
    }

    /*
    D!HM
    */
    if ((s4dmessage.content.toUpperCase() || "").startsWith("D!HM" || "")) {
      if (!s4d.database.has(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-hmtimer"].join("")))) {
        s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-hmtimer"].join("")), 0);
      }
      if (
        !(
          new Date().getTime() >
          s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-hmtimer"].join(""))) + 300000
        )
      ) {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#000000"),
              description: String(
                [
                  "⏰ Slowdown man, you can do this command again: **<t:",
                  Math.floor(
                    (s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-hmtimer"].join(""))) +
                      300000) /
                      1000
                  ),
                  ":R>**",
                ].join("")
              ),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      hmCooldown = new Date().getTime();
      s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-hmtimer"].join("")), hmCooldown);
      s4dmessage.reply({
        content: String(
          [
            "Hausemaster moment:",
            "\n",
            "\n",
            "https://media.discordapp.net/attachments/683032856359862399/857623265077100604/caption.gif",
            "\n",
            "\n",
            "https://tenor.com/view/hausemaster-hause-master-2b2t-minecraft-gif-20829564",
            "\n",
            "\n",
            "https://tenor.com/view/hausemaster-2b2t-fitmc-popbob-gif-21067971",
            "\n",
            "\n",
            "https://youtube.com/shorts/XztSmGlxH-M?feature=share",
            "\n",
            "\n",
            "https://youtu.be/GYLFiULboME",
            "\n",
            "\n",
            "https://youtu.be/FjcwH-Ikg_A",
            "\n",
            "\n",
            "https://youtu.be/4LAiC6AfAR0",
            "\n",
            "\n",
            "https://youtu.be/gT9HR1YwDPU",
            "\n",
            "\n",
            ":hause: :hausewithoutglasses: :trollmaster: :PrioQ: :priorityqueue: :hausemasterissue: :feels1tpsman: :coldhause: :hausecool:",
          ].join("")
        ),
        allowedMentions: {
          repliedUser: true,
        },
      });
      return;
    }

    /*
    D!JM
    */
    if ((s4dmessage.content.toUpperCase() || "").startsWith("D!JM" || "")) {
      if (!s4d.database.has(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-jmtimer"].join("")))) {
        s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-jmtimer"].join("")), 0);
      }
      if (
        !(
          new Date().getTime() >
          s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-jmtimer"].join(""))) + 120000
        )
      ) {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#000000"),
              description: String(
                [
                  "⏰ Slowdown man, you can do this command again: **<t:",
                  Math.floor(
                    (s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-jmtimer"].join(""))) +
                      120000) /
                      1000
                  ),
                  ":R>**",
                ].join("")
              ),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      jmCooldown = new Date().getTime();
      s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-jmtimer"].join("")), jmCooldown);
      s4dmessage.channel.send({
        content: String("https://cdn.discordapp.com/emojis/809093198571241502.png?v=1"),
      });
      await delay(Number(2) * 1000);
      s4dmessage.channel.send({
        content: String("https://cdn.discordapp.com/emojis/809093095790477342.png?v=1"),
      });
      await delay(Number(2) * 1000);
      s4dmessage.channel.send({
        content: String("https://cdn.discordapp.com/emojis/598000584691417098.png?v=1"),
      });
      await delay(Number(1) * 1000);
      s4dmessage.channel.send({
        content: String("Java"),
      });
      await delay(Number(1) * 1000);
      s4dmessage.channel.send({
        content: String("JavaScript"),
      });
      await delay(Number(1) * 1000);
      s4dmessage.channel.send({
        content: String("Java moment!"),
      });
      await delay(Number(3) * 1000);
      s4dmessage.channel.send({
        content: String("https://tenor.com/view/monkey-dying-monkey-boy-what-is-java-gif-15796494"),
      });
      await delay(Number(3) * 1000);
      s4dmessage.channel.send({
        content: String("https://tenor.com/view/supportlauncher-bird-learn-fucking-java-learn-java-java-gif-17649710"),
      });
      await delay(Number(3) * 1000);
      s4dmessage.channel.send({
        content: String(
          String(
            listsGetRandomItem(
              [
                "https://tenor.com/view/hive-hivemc-java-ingame-reporting-gif-19794798",
                "https://tenor.com/view/java-schmiby-maz-gondal-joobert-gif-20705823",
                "https://tenor.com/view/java-gif-12621083",
                "https://tenor.com/view/java-dev-clown-programming-programm-gif-20280193",
                "https://tenor.com/view/python-gif-20799882",
                "https://tenor.com/view/java-python-fight-me-saber-tdfw-gif-16168791",
                "https://tenor.com/view/brendan-fraser-java-george-of-the-jungle-national-coffee-day-coffee-day-gif-9846662",
              ],
              false
            )
          )
        ),
      });
      await delay(Number(3) * 1000);
      s4dmessage.channel.send({
        content: String(
          "https://tenor.com/view/kotlin-java-programmer-meme-average-kotlin-enjoyer-average-java-fan-gif-21761248"
        ),
      });
      return;
    }

    /*
    D!KILL
    */
    if (s4dmessage.content.toUpperCase() == "D!KILL") {
      s4dmessage.reply({
        content: String(String(s4dmessage.author) + ", can you please mention an user?"),
        allowedMentions: {
          repliedUser: true,
        },
      });
      return;
    } else if ((s4dmessage.content.toUpperCase() || "").startsWith("D!KILL" || "")) {
      if (s4dmessage.mentions.members.first() == null) {
        s4dmessage.reply({
          content: String(String(s4dmessage.author) + ", can you please mention an user?"),
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      try {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#660000"),
              description: String(
                listsGetRandomItem(
                  [
                    [s4dmessage.author, " **killed** ", s4dmessage.mentions.members.first(), " **with a Diamond sword** "].join(
                      ""
                    ),
                    [s4dmessage.author, " **killed** ", s4dmessage.mentions.members.first(), " **with an End Crystal** "].join(
                      ""
                    ),
                    [s4dmessage.author, " **killed** ", s4dmessage.mentions.members.first(), " **with an Arrow** "].join(""),
                    [s4dmessage.author, " **killed** ", s4dmessage.mentions.members.first(), " **with a bed explosion** "].join(
                      ""
                    ),
                    [s4dmessage.author, " **killed** ", s4dmessage.mentions.members.first(), " **with a fucking nuke** "].join(
                      ""
                    ),
                    [s4dmessage.author, " **killed** ", s4dmessage.mentions.members.first(), " **using Petotu's face** "].join(
                      ""
                    ),
                    [
                      s4dmessage.author,
                      " **killed** ",
                      s4dmessage.mentions.members.first(),
                      " **using his super powers**",
                    ].join(""),
                    [
                      s4dmessage.author,
                      " **killed** ",
                      s4dmessage.mentions.members.first(),
                      " **with the power of rushershack! ** ",
                    ].join(""),
                    [s4dmessage.author, " **killed** ", s4dmessage.mentions.members.first(), " **with a fart** "].join(""),
                    [
                      s4dmessage.author,
                      " **killed** ",
                      s4dmessage.mentions.members.first(),
                      " **using their own keyboard** ",
                    ].join(""),
                    [
                      s4dmessage.author,
                      " **killed** ",
                      s4dmessage.mentions.members.first(),
                      " **with a cup of hot tea** ",
                    ].join(""),
                    String(s4dmessage.mentions.members.first()) + " **died** ",
                    String(s4dmessage.mentions.members.first()) + " **was disabled due to an exploit** ",
                    String(s4dmessage.mentions.members.first()) + " **forgot the floor was lava** ",
                    String(s4dmessage.mentions.members.first()) + " **fell of his chair** ",
                    String(s4dmessage.mentions.members.first()) + " **exploded like a bomb** ",
                    String(s4dmessage.mentions.members.first()) + " **played too many hours at PVP games** ",
                    String(s4dmessage.mentions.members.first()) + " **was banned by a Discord Mod** ",
                    String(s4dmessage.mentions.members.first()) + " **forgot how to use a gun** ",
                    String(s4dmessage.mentions.members.first()) + " **was killed by Freddy because power went down** ",
                    String(s4dmessage.mentions.members.first()) + " **was nuked by Trump** ",
                    String(s4dmessage.mentions.members.first()) + " **was boned to death** ",
                    String(s4dmessage.mentions.members.first()) + " **crashed** ",
                    String(s4dmessage.mentions.members.first()) + " **drinked a poison** ",
                    String(s4dmessage.mentions.members.first()) + " **didn't sleep** ",
                    String(s4dmessage.mentions.members.first()) + " **was eated by Pac Man** ",
                    String(s4dmessage.mentions.members.first()) + " **watched too many Anime** ",
                    String(s4dmessage.mentions.members.first()) + " **sunk with the Titanic** ",
                    String(s4dmessage.mentions.members.first()) + " **was killed by a Zombie** ",
                    String(s4dmessage.mentions.members.first()) + " **was shot by a Skeleton** ",
                    String(s4dmessage.mentions.members.first()) + " **was teleported away with an Enderman** ",
                    String(s4dmessage.mentions.members.first()) + " **lost the match and died** ",
                    String(s4dmessage.mentions.members.first()) + " **died because yes, for no reasons at all** ",
                    String(s4dmessage.mentions.members.first()) + " **was MANZH by Foxy** ",
                    String(s4dmessage.mentions.members.first()) + " **tried to do a speedrun...** ",
                  ],
                  false
                )
              ),
              image: {
                url: String(
                  "https://cdn.discordapp.com/attachments/725300321517174888/878678753243447296/4237b69a-5419-4c50-8756-4c1523d7c602.jpg"
                ),
              },
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      } catch (err) {
        s4dmessage.reply({
          content: String(String(s4dmessage.author) + ", can you please mention an user?"),
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
    }

    /*
    D!ROAST
    */
    if (s4dmessage.content.toUpperCase() == "D!ROAST") {
      s4dmessage.reply({
        content: String(String(s4dmessage.author) + ", can you please mention an user?"),
        allowedMentions: {
          repliedUser: true,
        },
      });
      return;
    } else if ((s4dmessage.content.toUpperCase() || "").startsWith("D!ROAST" || "")) {
      if (s4dmessage.mentions.members.first() == null) {
        s4dmessage.reply({
          content: String(String(s4dmessage.author) + ", can you please mention an user?"),
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      try {
        s4dmessage.reply({
          content: String(
            [
              s4dmessage.mentions.members.first(),
              " ",
              listsGetRandomItem(
                [
                  "no",
                  "i'm nice, why i should be rude",
                  "no roast for you",
                  "Light travels faster than sound which is why you seemed bright until you spoke.",
                  "Somewhere out there, there’s a tree working very hard to produce oxygen so that you can breathe. I think you should go and apologize to it.",
                  "If I threw a stick, you’d leave, right?",
                  "If ignorance is bliss, you must be the happiest person on the planet.",
                  "Everyone’s entitled to act stupid once in a while, but you really abuse the privilege.",
                  "I’d slap you but I don’t want to make your face look any better.",
                  "If laughter is the best medicine, your face must be curing the world.",
                  "Don’t worry about me. Worry about your eyebrows.",
                  "You are more disappointing than an unsalted pretzel.",
                  "Your face makes onions cry.",
                  "If you’re going to act like a turd, go lay on the yard.",
                  "You’re like the end pieces of a loaf of bread. Everyone touches you, but nobody wants you.",
                  "You see that door? I want you on the other side of it.",
                  "Jesus might love you, but everyone else definitely thinks you’re an idiot.",
                  "Do your parents even realize they’re living proof that two wrongs don’t make a right?",
                  "Too bad you can’t Photoshop your ugly personality.",
                  "You are so full of shit, the toilet’s jealous.",
                  "You’re a grey sprinkle on a rainbow cupcake.",
                  "I will ignore you so hard you will start doubting your existence.",
                  "It’s kind of hilarious watching you try to fit your entire vocabulary into one sentence.",
                  "If I wanted to hear from an asshole, I’d fart.",
                  "You are the sun in my life… now get 93 million miles away from me.",
                  "If I wanted to kill myself, I would simply jump from your ego to your IQ.",
                  "I don’t hate you, but if you were drowning, I would give you a high five.",
                  "You were so happy for the negativity of your Covid test, we didn’t want to spoil the happiness by telling you it was IQ test.",
                  "Honey, only thing bothering me is placed between your ears.",
                  "You are like a software update. every time I see you, I immediately think “not now”.",
                  "You are the reason why there are instructions on shampoo bottles.",
                  "It’s all about balance… you start talking, I stop listening.",
                  "You can’t imagine how much happiness you can bring… by leaving the room.",
                  "Earth is full. Go home.",
                  "Ola soy Dora. Can you help me find where we asked?",
                  "Somewhere tree is producing oxygen for you. I’m sorry for it.",
                  "Every time I think you can’t get any dumber, you are proving me wrong.",
                  "You’re not simply a drama queen. You’re the whole royal family.",
                  "Taking a picture of you would put a virus on my phone.",
                  "Remember, if anyone says you’re beautiful, it’s all lies.",
                  "Too bad you can’t count jumping to conclusions and running your mouth as exercise. ",
                  "You should wear a condom on your head. If you’re going to be a dick, you might as well dress like one.",
                  "Whoever told you to be yourself gave you really bad advice.",
                  "You sound reasonable… Time to up my medication.",
                  "If you’re offended by my opinion, you should hear the ones I keep to myself.",
                  "Keep rolling your eyes. Maybe you’ll find your brain back there.",
                  "I am allergic to stupidity, so I break out in sarcasm.",
                  "You’re the reason I prefer animals to people. ",
                  "I am not ignoring you. I am simply giving you time to reflect on what an idiot you are being.",
                  "You don’t like me, then fuck off. Problem solved.",
                  "Your birth certificate is an apology letter from the condom manufacturer.",
                  "Did I invite you to my barbecue? Then why are you all up in my grill?",
                  "Your secrets are always safe with me. I never even listen when you tell me them.",
                  "I’d give you a nasty look but you’ve already got one.",
                  "Were you born this stupid or did you take lessons?",
                  "You should really come with a warning label.",
                  "I don’t know what your problem is, but I’m guessing it’s hard to pronounce.",
                ],
                false
              ),
            ].join("")
          ),
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      } catch (err) {
        s4dmessage.reply({
          content: String(String(s4dmessage.author) + ", can you please mention an user?"),
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
    }

    /*
    D!TROLL
    */
    if (s4dmessage.content.toUpperCase() == "D!TROLL") {
      s4dmessage.reply({
        content: String(String(s4dmessage.author) + ", can you please mention an user?"),
        allowedMentions: {
          repliedUser: true,
        },
      });
      return;
    } else if ((s4dmessage.content.toUpperCase() || "").startsWith("D!TROLL" || "")) {
      try {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#c0c0c0"),
              title: String(
                String(s4d.client.users.cache.get(String(s4dmessage.mentions.members.first().id)).username) +
                  " HAS BEEN TROLLED!"
              ),
              image: {
                url: String(
                  listsGetRandomItem(
                    [
                      "https://cdn.discordapp.com/attachments/916701043738423336/963653437654962176/unknown.png",
                      "https://cdn.discordapp.com/attachments/916701043738423336/963653495137923072/unknown.png",
                      "https://cdn.discordapp.com/attachments/916701043738423336/963653530441375764/unknown.png",
                      "https://cdn.discordapp.com/attachments/916701043738423336/963653577748918282/unknown.png",
                      "https://cdn.discordapp.com/attachments/916701043738423336/963653645679861802/unknown.png",
                      "https://cdn.discordapp.com/attachments/916701043738423336/963653725971435570/unknown.png",
                      "https://cdn.discordapp.com/attachments/916701043738423336/963653777334865940/unknown.png",
                      "https://cdn.discordapp.com/attachments/916701043738423336/963653929764274196/unknown.png",
                      "https://cdn.discordapp.com/attachments/916701043738423336/963653971942207558/unknown.png",
                      "https://cdn.discordapp.com/attachments/916701043738423336/963654103957921852/unknown.png",
                      "https://cdn.discordapp.com/attachments/916701043738423336/963654159033315348/unknown.png",
                      "https://cdn.discordapp.com/attachments/916701043738423336/963654244123152394/unknown.png",
                      "https://cdn.discordapp.com/attachments/916701043738423336/963654312519692318/unknown.png",
                      "https://cdn.discordapp.com/attachments/916701704706220033/963721812523503636/unknown.png",
                      "https://cdn.discordapp.com/attachments/916701704706220033/963721768860799046/unknown.png",
                      "https://cdn.discordapp.com/attachments/916701704706220033/963721734941458453/unknown.png",
                      "https://cdn.discordapp.com/attachments/916701704706220033/963721704411103282/unknown.png",
                      "https://cdn.discordapp.com/attachments/916701704706220033/963721672324685844/unknown.png",
                      "https://cdn.discordapp.com/attachments/916701704706220033/963721646961733632/unknown.png",
                      "https://cdn.discordapp.com/attachments/916701704706220033/963410018567352390/85c3a32bf39464af676541430bb8ac1a.jpg",
                      "https://cdn.discordapp.com/attachments/916701704706220033/963410018345025576/png-clipart-troll-face-quest-3d-internet-troll-trollface-rage-comic-others-miscellaneous-comics.png",
                      "https://cdn.discordapp.com/attachments/916701704706220033/963410018143703110/43-432405_troll-face-png-download-troll-face-png-small.png",
                      "https://cdn.discordapp.com/attachments/916701704706220033/963410017913024522/43-432225_sad-troll-face-png-troll-face-kawaii-transparent.png",
                      "https://cdn.discordapp.com/attachments/916701704706220033/963410017690742814/20a4772fedb7ec64521902aeabaf47c6.png",
                      "https://cdn.discordapp.com/attachments/916701704706220033/963410017497776148/84-842924_awesome-trollface-ii-by-bokuga-kira-d3ceq9v-awesome.png",
                      "https://cdn.discordapp.com/attachments/916701704706220033/963408799698399262/13-137985_trollface-png-transparent-images-tu-dum-tss-meme.png",
                      "https://cdn.discordapp.com/attachments/916701704706220033/963408471607377920/566-5665664_trollface-meme-png-file-transparent-troll-faces-png.png",
                      "https://cdn.discordapp.com/attachments/916701704706220033/963408471221493800/trollface-png-8.png",
                      "https://cdn.discordapp.com/attachments/916701704706220033/963408470864953354/d8iev19-ffe4cf59-b9ea-4dfb-b1eb-5d9aa1539936.png",
                      "https://cdn.discordapp.com/attachments/916701704706220033/963408470407794698/580b585b2edbce24c47b2a27.png",
                      "https://cdn.discordapp.com/attachments/916701704706220033/963408470030303262/588359a32c9eb99faafea8bc.png",
                      "https://cdn.discordapp.com/attachments/916701704706220033/963276420224786522/unknown.png",
                      "https://cdn.discordapp.com/attachments/916701704706220033/963276375773569064/unknown.png",
                      "https://cdn.discordapp.com/attachments/916701704706220033/963276076971327519/unknown.png",
                      "https://cdn.discordapp.com/attachments/916701704706220033/963275928203571270/unknown.png",
                      "https://cdn.discordapp.com/attachments/916701704706220033/963275879348314192/unknown.png",
                      "https://cdn.discordapp.com/attachments/916701704706220033/963275564339298384/unknown.png",
                      "https://cdn.discordapp.com/attachments/916701704706220033/963275496999772230/unknown.png",
                      "https://cdn.discordapp.com/attachments/916701704706220033/963275453873922079/unknown.png",
                      "https://cdn.discordapp.com/attachments/370624350975426561/942112352130728006/trolge.png",
                    ],
                    false
                  )
                ),
              },
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      } catch (err) {
        s4dmessage.reply({
          content: String(String(s4dmessage.author) + ", can you please mention an user?"),
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
    }

    /*
    D!MARRY
    */
    if (
      (s4dmessage.content.toUpperCase() || "").startsWith("D!MARRY" || "") ||
      (s4dmessage.content.toUpperCase() || "").startsWith("D!SHIP" || "")
    ) {
      try {
        marryProbs = mathRandomInt(1, 101);
        if (marryProbs <= 10 && marryProbs > 0) {
          s4dmessage.reply({
            embeds: [
              {
                color: String("#cc33cc"),
                title: String("💘 Love machine 9000(TM)"),
                description: String("Love power: **10%** " + "🟪⬛⬛⬛⬛⬛⬛⬛⬛⬛"),
                fields: [
                  {
                    name: "😥",
                    value: "That's bad man",
                    inline: false,
                  },
                ],
                image: {
                  url: String(
                    s4dmessage.mentions.members.first().displayAvatarURL({
                      format: "png",
                    })
                  ),
                },
              },
            ],
            allowedMentions: {
              repliedUser: true,
            },
          });
          return;
        } else if (marryProbs <= 20 && marryProbs > 10) {
          s4dmessage.reply({
            embeds: [
              {
                color: String("#cc33cc"),
                title: String("💘 Love machine 9000(TM)"),
                description: String("Love power: **20%** " + "🟪🟪⬛⬛⬛⬛⬛⬛⬛⬛"),
                fields: [
                  {
                    name: "😦",
                    value: "Pretty low",
                    inline: false,
                  },
                ],
                image: {
                  url: String(
                    s4dmessage.mentions.members.first().displayAvatarURL({
                      format: "png",
                    })
                  ),
                },
              },
            ],
            allowedMentions: {
              repliedUser: true,
            },
          });
          return;
        } else if (marryProbs <= 30 && marryProbs > 20) {
          s4dmessage.reply({
            embeds: [
              {
                color: String("#cc33cc"),
                title: String("💘 Love machine 9000(TM)"),
                description: String("Love power: **30%** " + "🟪🟪🟪⬛⬛⬛⬛⬛⬛⬛"),
                fields: [
                  {
                    name: "😕",
                    value: "Not too great",
                    inline: false,
                  },
                ],
                image: {
                  url: String(
                    s4dmessage.mentions.members.first().displayAvatarURL({
                      format: "png",
                    })
                  ),
                },
              },
            ],
            allowedMentions: {
              repliedUser: true,
            },
          });
          return;
        } else if (marryProbs <= 40 && marryProbs > 30) {
          s4dmessage.reply({
            embeds: [
              {
                color: String("#cc33cc"),
                title: String("💘 Love machine 9000(TM)"),
                description: String("Love power: **40%** " + "🟪🟪🟪🟪⬛⬛⬛⬛⬛⬛"),
                fields: [
                  {
                    name: "😕",
                    value: "Nah",
                    inline: false,
                  },
                ],
                image: {
                  url: String(
                    s4dmessage.mentions.members.first().displayAvatarURL({
                      format: "png",
                    })
                  ),
                },
              },
            ],
            allowedMentions: {
              repliedUser: true,
            },
          });
          return;
        } else if (marryProbs <= 50 && marryProbs > 40) {
          s4dmessage.reply({
            embeds: [
              {
                color: String("#cc33cc"),
                title: String("💘 Love machine 9000(TM)"),
                description: String("Love power: **50%** " + "🟪🟪🟪🟪🟪⬛⬛⬛⬛⬛"),
                fields: [
                  {
                    name: "😶",
                    value: "Barely",
                    inline: false,
                  },
                ],
                image: {
                  url: String(
                    s4dmessage.mentions.members.first().displayAvatarURL({
                      format: "png",
                    })
                  ),
                },
              },
            ],
            allowedMentions: {
              repliedUser: true,
            },
          });
          return;
        } else if (marryProbs <= 60 && marryProbs > 50) {
          s4dmessage.reply({
            embeds: [
              {
                color: String("#cc33cc"),
                title: String("💘 Love machine 9000(TM)"),
                description: String("Love power: **60%** " + "🟪🟪🟪🟪🟪🟪⬛⬛⬛⬛"),
                fields: [
                  {
                    name: "🙂",
                    value: "Not bad",
                    inline: false,
                  },
                ],
                image: {
                  url: String(
                    s4dmessage.mentions.members.first().displayAvatarURL({
                      format: "png",
                    })
                  ),
                },
              },
            ],
            allowedMentions: {
              repliedUser: true,
            },
          });
          return;
        } else if (marryProbs <= 70 && marryProbs > 60) {
          s4dmessage.reply({
            embeds: [
              {
                color: String("#cc33cc"),
                title: String("💘 Love machine 9000(TM)"),
                description: String("Love power: **70%** " + "🟪🟪🟪🟪🟪🟪🟪⬛⬛⬛"),
                fields: [
                  {
                    name: "😃",
                    value: "Pretty good",
                    inline: false,
                  },
                ],
                image: {
                  url: String(
                    s4dmessage.mentions.members.first().displayAvatarURL({
                      format: "png",
                    })
                  ),
                },
              },
            ],
            allowedMentions: {
              repliedUser: true,
            },
          });
          return;
        } else if (marryProbs <= 80 && marryProbs > 70) {
          s4dmessage.reply({
            embeds: [
              {
                color: String("#cc33cc"),
                title: String("💘 Love machine 9000(TM)"),
                description: String("Love power: **80%** " + "🟪🟪🟪🟪🟪🟪🟪🟪⬛⬛"),
                fields: [
                  {
                    name: "😘",
                    value: "Really impressive",
                    inline: false,
                  },
                ],
                image: {
                  url: String(
                    s4dmessage.mentions.members.first().displayAvatarURL({
                      format: "png",
                    })
                  ),
                },
              },
            ],
            allowedMentions: {
              repliedUser: true,
            },
          });
          return;
        } else if (marryProbs <= 90 && marryProbs > 80) {
          s4dmessage.reply({
            embeds: [
              {
                color: String("#cc33cc"),
                title: String("💘 Love machine 9000(TM)"),
                description: String("Love power: **90%** " + "🟪🟪🟪🟪🟪🟪🟪🟪🟪⬛"),
                fields: [
                  {
                    name: "🥰",
                    value: "Amazing!",
                    inline: false,
                  },
                ],
                image: {
                  url: String(
                    s4dmessage.mentions.members.first().displayAvatarURL({
                      format: "png",
                    })
                  ),
                },
              },
            ],
            allowedMentions: {
              repliedUser: true,
            },
          });
          return;
        } else if (marryProbs <= 100 && marryProbs > 90) {
          s4dmessage.reply({
            embeds: [
              {
                color: String("#cc33cc"),
                title: String("💘 Love machine 9000(TM)"),
                description: String("Love power: **100%** " + "🟪🟪🟪🟪🟪🟪🟪🟪🟪🟪"),
                fields: [
                  {
                    name: "😍😍😍",
                    value: "PERFECT!",
                    inline: false,
                  },
                ],
                image: {
                  url: String(
                    s4dmessage.mentions.members.first().displayAvatarURL({
                      format: "png",
                    })
                  ),
                },
              },
            ],
            allowedMentions: {
              repliedUser: true,
            },
          });
          return;
        }
        if (marryProbs == 0) {
          s4dmessage.reply({
            embeds: [
              {
                color: String("#cc33cc"),
                title: String("💘 Love machine 9000(TM)"),
                description: String("Love power: **0%** " + "⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛"),
                fields: [
                  {
                    name: "😭",
                    value: "You have no heart!",
                    inline: false,
                  },
                ],
                image: {
                  url: String(
                    s4dmessage.mentions.members.first().displayAvatarURL({
                      format: "png",
                    })
                  ),
                },
              },
            ],
            allowedMentions: {
              repliedUser: true,
            },
          });
          return;
        }
        if (marryProbs == 101) {
          s4dmessage.reply({
            embeds: [
              {
                color: String("#ffff00"),
                title: String("❤️‍🔥 Love machine 9000(TM)"),
                description: String("Love power: **ERROR** " + "🟨🟨🟨🟨🟨🟨🟨🟨🟨🟨"),
                fields: [
                  {
                    name: "🤩🤩🤩",
                    value: "TIME FOR SEX BABYYYY!",
                    inline: false,
                  },
                ],
                image: {
                  url: String(
                    s4dmessage.mentions.members.first().displayAvatarURL({
                      format: "png",
                    })
                  ),
                },
              },
            ],
            allowedMentions: {
              repliedUser: true,
            },
          });
          return;
        }
      } catch (err) {
        s4dmessage.reply({
          content: String(String(s4dmessage.author) + ", can you please mention an user? ;)"),
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
    }

    /*
    D!AG
    */
    if (s4dmessage.content.toUpperCase() == "D!AG") {
      s4dmessage.reply({
        embeds: [
          {
            color: String("#ff6600"),
            title: String("Here the list of available commands:"),
            description: String(["d!ag happy", "\n", "d!ag sad", "\n", "d!ag angry", "\n", "d!ag stare"].join("")),
          },
        ],
        allowedMentions: {
          repliedUser: true,
        },
      });
      return;
    } else if ((s4dmessage.content.toUpperCase() || "").startsWith("D!AG HAPPY" || "")) {
      s4dmessage.reply({
        content: String(
          [
            "Here your **anime girl** sir :^)",
            "\n",
            "\n",
            listsGetRandomItem(
              [
                " https://imgur.com/NQinKJB",
                "https://tenor.com/view/yay-yeah-happy-dance-gif-14866505",
                "https://tenor.com/view/happy-anime-cute-girl-gif-14066818",
                "https://tenor.com/view/anime-girl-kawaii-sparkle-happy-gif-14223414",
                "https://tenor.com/view/smiling-thinking-happy-gif-14914056",
                "https://tenor.com/view/smiling-thinking-happy-gif-14914056",
                "https://tenor.com/view/anime-pastel-anime-happy-anime-happy-anime-phone-anime-girl-gif-19356884",
                "https://tenor.com/view/anime-happy-anime-smile-anime-anime-cute-smile-gif-19679235",
                "https://tenor.com/view/happy-anime-happy-anime-girl-girl-cute-gif-17803413",
                "https://tenor.com/view/shy-anime-cute-anime-girl-happy-gif-19685015",
                "https://tenor.com/view/anime-girl-happy-excited-cute-gif-17548567",
                "https://tenor.com/view/anime-yay-happy-excited-yeah-gif-9528804",
                "https://tenor.com/view/anime-happy-cute-kawaii-dance-gif-13383828",
                "https://tenor.com/view/anime-girl-cute-excited-happy-gif-16079431",
                "https://tenor.com/view/anime-cute-anime-girl-anime-girl-dance-anime-girl-nod-gif-14285337",
                "https://tenor.com/view/happy-anime-happy-anime-girl-cute-loli-gif-19553757",
                "https://tenor.com/view/anime-girl-happy-gif-9595427",
                "https://tenor.com/view/animegirl-anime-girl-blue-sweet-gif-5578880",
                "https://tenor.com/view/anime-happy-smile-animegirl-gif-9280880",
                "https://tenor.com/view/anime-girl-chibi-girl-kawaii-anime-girl-gif-20521841",
                "https://tenor.com/view/anime-swimsuit-anime-school-swimsuit-school-swimsuit-anime-school-swimsuit-swimsuit-anime-gif-20864922",
                "https://tenor.com/view/anime-cute-in-love-happy-gif-4394528",
                "https://tenor.com/view/smile-happy-gif-8674277",
                "https://tenor.com/view/anime-sad-emotional-frown-problematic-gif-16048882",
                "https://tenor.com/view/eru-chitanda-hyouka-forbidden-secrets-anime-happy-excited-gif-16612218",
                "https://tenor.com/view/aki-shino-shinoaki-remake-our-life-bokutachi-no-remake-anime-girl-gif-23646477",
                "https://tenor.com/view/anime-gif-20556925",
              ],
              false
            ),
          ].join("")
        ),
        allowedMentions: {
          repliedUser: true,
        },
      });
      return;
    } else if ((s4dmessage.content.toUpperCase() || "").startsWith("D!AG SAD" || "")) {
      s4dmessage.reply({
        content: String(
          [
            "Here your **anime girl** sir :^)",
            "\n",
            "\n",
            listsGetRandomItem(
              [
                " https://imgur.com/NQinKJB",
                "https://tenor.com/view/anime-pillow-gif-14847650",
                "https://tenor.com/view/sad-girl-anime-gif-14950992",
                "https://tenor.com/view/anime-girl-sad-alone-lonely-gif-12793728",
                "https://tenor.com/view/anime-anime-girl-anime-girl-cry-anime-girl-crying-girl-gif-19105643",
                "https://tenor.com/view/llorar1-cry-sad-tears-anime-gif-5648908",
                "https://tenor.com/view/sorry-anime-crying-cry-takanashi-rikka-gif-18363911",
                "https://tenor.com/view/anime-crying-aesthetic-sad-frown-gif-17664945",
                "https://tenor.com/view/anime-crying-aesthetic-sad-frown-gif-17664945",
                "https://tenor.com/view/anime-crying-sad-girl-tears-gif-17484634",
                "https://tenor.com/view/anime-anime-girl-suzune-miyama-sad-anime-girl-ohh-gif-23541418",
                "https://tenor.com/view/sorry-crying-anime-sad-the-demon-girl-next-door-gif-15005984",
                "https://tenor.com/view/sad-gece-uzgun-gif-23619396",
                "https://tenor.com/view/sleep-gif-20788051",
                "https://tenor.com/view/anime-girl-cute-kawaii-sad-gif-17742718",
                "https://tenor.com/view/shoko-nishimiya-nishimiya-shoko-gif-23104578",
                "https://tenor.com/view/anime-sad-emotional-frown-lonely-gif-15974475",
                "https://tenor.com/view/anime-crying-sad-emotional-unhappy-gif-17639695",
                "https://tenor.com/view/sad-sad-anime-sad-anime-girl-thinking-anime-girl-gif-19553755",
                "https://tenor.com/view/kukuru-misakino-anime-the-aquatope-on-white-sand-shiroi-suna-no-aquatope-sad-anime-gif-23212035",
                "https://tenor.com/view/anime-sad-alone-back-gif-15776456",
                "https://tenor.com/view/sad-cry-anime-gif-5634595",
                "https://tenor.com/view/sagiri-bed-hide-anime-shy-gif-10069696",
                "https://tenor.com/view/cry-anime-sad-mad-sadness-gif-5580602",
                "https://tenor.com/view/sad-anime-sad-anime-girl-gif-19553751",
                "https://tenor.com/view/anohana-tears-sad-cry-sorrow-gif-5081296",
                "https://tenor.com/view/no-sad-crying-anime-gif-10779676",
              ],
              false
            ),
          ].join("")
        ),
        allowedMentions: {
          repliedUser: true,
        },
      });
      return;
    } else if ((s4dmessage.content.toUpperCase() || "").startsWith("D!AG ANGRY" || "")) {
      s4dmessage.reply({
        content: String(
          [
            "Here your **anime girl** sir :^)",
            "\n",
            "\n",
            listsGetRandomItem(
              [
                " https://imgur.com/NQinKJB",
                "https://tenor.com/view/anime-pout-hmph-mad-ugh-gif-12679335",
                "https://tenor.com/view/anime-raphtalia-mad-pouty-gif-16985978",
                "https://tenor.com/view/anime-girl-angry-eyes-eye-gif-20556414",
                "https://tenor.com/view/hayase-nagatoro-nagatoro-angry-nagatoro-menacing-miss-nagatoro-dont-toy-with-me-miss-nagatoro-gif-21711674",
                "https://tenor.com/view/raiva-anime-cute-mad-angry-gif-14725928",
                "https://tenor.com/view/anime-mad-anime-mad-upset-rage-gif-17571061",
                "https://tenor.com/view/anime-angry-mad-gif-14108774",
                "https://tenor.com/view/anime-beat-girl-cute-gif-7230359",
                "https://tenor.com/view/date-a-live-rage-anime-mad-gif-9161940",
                "https://tenor.com/view/mao-amatsuka-mad-angry-anime-nope-gif-8220112",
                "https://tenor.com/view/angry-mad-rage-anime-gif-7885147",
                "https://tenor.com/view/anime-angry-mad-evil-gif-14682313",
                "https://tenor.com/view/anime-girl-tora-dora-angry-mad-gif-16497450",
                "https://tenor.com/view/angry-anime-girl-frustrated-gif-10543167",
                "https://tenor.com/view/anime-angry-girl-sad-scared-gif-15789527",
                "https://tenor.com/view/taiga-rage-angry-glare-tora-dora-gif-6209492",
                "https://tenor.com/view/anime-girl-cute-kawaii-mad-gif-17817433",
                "https://tenor.com/view/taiga-toradora-fist-angry-mad-gif-5664724",
                "https://tenor.com/view/fuuka-miyazawa-anime-the-aquatope-on-white-sand-shiroi-suna-no-aquatope-angry-gif-23944556",
                "https://tenor.com/view/mamako-oosuki-cute-angry-anime-gif-14666645",
                "https://tenor.com/view/mad-the-demon-girl-next-door-upset-machikado-mazoku-gif-15031355",
                "https://tenor.com/view/angry-furious-mad-cute-anime-girl-gif-14666121",
                "https://tenor.com/view/glare-anger-anime-pearls-gif-14210689",
                "https://tenor.com/view/shiroi-suna-no-aquatope-the-aquatope-on-white-sand-anime-kukuru-misakino-anime-girl-gif-23487809",
                "https://tenor.com/view/pouty-anime-cute-student-angry-gif-14274438",
                "https://tenor.com/view/girl-angry-anime-mad-gif-8479272",
              ],
              false
            ),
          ].join("")
        ),
        allowedMentions: {
          repliedUser: true,
        },
      });
      return;
    } else if ((s4dmessage.content.toUpperCase() || "").startsWith("D!AG STARE" || "")) {
      s4dmessage.reply({
        content: String(
          [
            "Here your **anime girl** sir :^)",
            "\n",
            "\n",
            listsGetRandomItem(
              [
                " https://imgur.com/NQinKJB",
                "https://tenor.com/view/anime-stare-weird-okay-gif-17874654",
                "https://tenor.com/view/anime-food-wars-shokugeki-no-souma-nakiri-alice-look-gif-20349931",
                "https://tenor.com/view/anime-girl-eyes-glowing-eyes-gif-17801921",
                "https://tenor.com/view/bored-waiting-annoyed-maria-anime-gif-11941791",
                "https://tenor.com/view/anime-girl-nervous-looking-gif-19036170",
                "https://tenor.com/view/me-me-trying-to-impress-a-boy-eyebrow-raising-evil-stare-evil-grin-gif-15651331",
                "https://tenor.com/view/kuroyukihime-accel-world-you-pointing-you-anime-gif-12811249",
                "https://tenor.com/view/stare-anime-death-stare-anime-huh-kanojo-okarishimasu-scary-look-gif-17913844",
                "https://tenor.com/view/eating-anime-bored-straight-face-gif-15736687",
                "https://tenor.com/view/anime-stare-meh-gif-14043188",
                "https://tenor.com/view/hibiki-blank-stare-anime-huh-gif-11888657",
                "https://tenor.com/view/anime-stare-eyes-gif-14577429",
                "https://tenor.com/view/sad-anime-frown-blank-stare-unhappy-gif-17358759",
                "https://tenor.com/view/akane-shinjo-ssss-gridman-gridman-ultraman-superhuman-samurai-syber-squad-gif-22446007",
                "https://tenor.com/view/emilia-re-zero-anime-eyes-angry-gif-12802983",
                "https://tenor.com/view/vivy-angry-stare-glare-anime-gif-21123025",
                "https://tenor.com/view/ruri-robby-yup-gif-23862075",
                "https://tenor.com/view/anime-girl-cute-blush-stare-gif-17795865",
                "https://tenor.com/view/smile-stare-cute-happy-study-gif-12347738",
                "https://tenor.com/view/cute-anime-girl-staring-wind-gif-17362818",
                "https://tenor.com/view/stare-anime-profile-picture-gif-discord-gif-20169256",
                "https://tenor.com/view/daarling-zero-two-zero-two-daarling-in-the-fraxx-gif-20920272",
                "https://tenor.com/view/nightingale-release-that-witch-anime-girl-stare-gif-12803048",
                "https://tenor.com/view/anime-girl-bored-gif-12793696",
                "https://tenor.com/view/stare-anime-girl-violet-evergarden-gif-22122086",
                "https://tenor.com/view/cute-anime-girl-staring-wind-gif-17362818",
              ],
              false
            ),
          ].join("")
        ),
        allowedMentions: {
          repliedUser: true,
        },
      });
      return;
    }

    /*
    D!8BALL
    */
    if (s4dmessage.content.toUpperCase() == "D!8BALL") {
      s4dmessage.reply({
        content: String(String(s4dmessage.author) + ", what is your beautiful question?"),
        allowedMentions: {
          repliedUser: true,
        },
      });
      return;
    } else if ((s4dmessage.content.toUpperCase() || "").startsWith("D!8BALL" || "")) {
      s4dmessage.reply({
        embeds: [
          {
            color: String("#ff6666"),
            description: String(
              [
                s4dmessage.author.username,
                ", ",
                listsGetRandomItem(
                  [
                    "I can't answer",
                    "yes",
                    "no",
                    "idk",
                    "What about...yes.",
                    "What about...no.",
                    "Most probably yes",
                    "Most probably no",
                    "For me its a yes",
                    "For me its a no",
                    "It's a problem if i say yes?",
                    "hahaha no",
                    "Yes it is",
                    "No it isnt",
                    "JA!",
                    "Nein",
                    "I really don't know",
                    "Boy don't ask to me",
                    "Up to you",
                    "I don't know what to say",
                    "What the fuck are you saying?! Ask again!",
                    "I don't think so",
                    "Is it a problem if i say yes?",
                    "Is it a problem if i say no?",
                    "Ah",
                    "Eh",
                    "...",
                    "mh?",
                    "What?",
                    "Ask again man",
                    "You can try.",
                    "Probably",
                    "soon",
                  ],
                  false
                ),
              ].join("")
            ),
          },
        ],
        allowedMentions: {
          repliedUser: true,
        },
      });
      return;
    }

    /*
    D!RPS
    */
    if (s4dmessage.content.toUpperCase() == "D!RPS") {
      s4dmessage
        .reply({
          embeds: [
            {
              color: String("#33ccff"),
              title: String("Let's play!"),
              description: String(String(s4dmessage.author.username) + " is choosing..."),
              footer: {
                text: String("Click the buttons to choose!"),
                icon_url: String(),
              },
            },
          ],
          components: [
            new MessageActionRow().addComponents(
              new MessageButton()
                .setCustomId("rps_rock")
                .setLabel("rock")
                .setEmoji("🪨")
                .setDisabled(false)
                .setStyle("PRIMARY"),
              new MessageButton()
                .setCustomId("rps_paper")
                .setLabel("paper")
                .setEmoji("🧻")
                .setDisabled(false)
                .setStyle("PRIMARY"),
              new MessageButton()
                .setCustomId("rps_scissors")
                .setLabel("scissors")
                .setEmoji("✂️")
                .setDisabled(false)
                .setStyle("PRIMARY")
            ),
          ],
        })
        .then(async (m) => {
          let collector = m.createMessageComponentCollector({
            filter: (i) => i.user.id === s4dmessage.author.id,
            time: Number(60000) * 1000,
          });
          collector.on("collect", async (i) => {
            if (i.customId == "rps_rock") {
              scissors = 1;
              paper = 2;
              rock = 3;
              rpsProbs = mathRandomInt(1, 3);
              if (rpsProbs == 1) {
                await i
                  .update({
                    embeds: [
                      {
                        color: String("#33ff33"),
                        title: String(":trophy: You won >:("),
                        description: String(["i choose: **scissors**", "\n", "You choose: **rock**"].join("")),
                      },
                    ],
                    components: [
                      new MessageActionRow().addComponents(
                        new MessageButton()
                          .setCustomId("rps_rock")
                          .setLabel("rock")
                          .setEmoji("🪨")
                          .setDisabled(true)
                          .setStyle("SUCCESS"),
                        new MessageButton()
                          .setCustomId("rps_paper")
                          .setLabel("paper")
                          .setEmoji("🧻")
                          .setDisabled(true)
                          .setStyle("SECONDARY"),
                        new MessageButton()
                          .setCustomId("rps_scissors")
                          .setLabel("scissors")
                          .setEmoji("✂️")
                          .setDisabled(true)
                          .setStyle("SECONDARY")
                      ),
                    ],
                  })
                  .then(async (m) => {});
              } else if (rpsProbs == 2) {
                await i
                  .update({
                    embeds: [
                      {
                        color: String("#ff0000"),
                        title: String("Yay i won!"),
                        description: String(["i choose: **paper**", "\n", "You choose: **rock**"].join("")),
                        image: {
                          url: String(
                            "https://cdn.discordapp.com/attachments/878993780798279761/941747505308241920/gmod-gmod-dance.gif"
                          ),
                        },
                      },
                    ],
                    components: [
                      new MessageActionRow().addComponents(
                        new MessageButton()
                          .setCustomId("rps_rock")
                          .setLabel("rock")
                          .setEmoji("🪨")
                          .setDisabled(true)
                          .setStyle("SUCCESS"),
                        new MessageButton()
                          .setCustomId("rps_paper")
                          .setLabel("paper")
                          .setEmoji("🧻")
                          .setDisabled(true)
                          .setStyle("SECONDARY"),
                        new MessageButton()
                          .setCustomId("rps_scissors")
                          .setLabel("scissors")
                          .setEmoji("✂️")
                          .setDisabled(true)
                          .setStyle("SECONDARY")
                      ),
                    ],
                  })
                  .then(async (m) => {
                    return;
                  });
              } else if (rpsProbs == 3) {
                await i
                  .update({
                    embeds: [
                      {
                        color: String("#ffcc00"),
                        title: String("It's a tie!"),
                        description: String(["i choose: **rock**", "\n", "You choose: **rock**"].join("")),
                      },
                    ],
                    components: [
                      new MessageActionRow().addComponents(
                        new MessageButton()
                          .setCustomId("rps_rock")
                          .setLabel("rock")
                          .setEmoji("🪨")
                          .setDisabled(true)
                          .setStyle("SUCCESS"),
                        new MessageButton()
                          .setCustomId("rps_paper")
                          .setLabel("paper")
                          .setEmoji("🧻")
                          .setDisabled(true)
                          .setStyle("SECONDARY"),
                        new MessageButton()
                          .setCustomId("rps_scissors")
                          .setLabel("scissors")
                          .setEmoji("✂️")
                          .setDisabled(true)
                          .setStyle("SECONDARY")
                      ),
                    ],
                  })
                  .then(async (m) => {
                    return;
                  });
              }
            } else if (i.customId == "rps_paper") {
              rock = 1;
              scissors = 2;
              paper = 3;
              rpsProbs = mathRandomInt(1, 3);
              if (rpsProbs == 1) {
                await i
                  .update({
                    embeds: [
                      {
                        color: String("#33ff33"),
                        title: String(":trophy: You won >:("),
                        description: String(["i choose: **rock**", "\n", "You choose: **paper**"].join("")),
                      },
                    ],
                    components: [
                      new MessageActionRow().addComponents(
                        new MessageButton()
                          .setCustomId("rps_rock")
                          .setLabel("rock")
                          .setEmoji("🪨")
                          .setDisabled(true)
                          .setStyle("SECONDARY"),
                        new MessageButton()
                          .setCustomId("rps_paper")
                          .setLabel("paper")
                          .setEmoji("🧻")
                          .setDisabled(true)
                          .setStyle("SUCCESS"),
                        new MessageButton()
                          .setCustomId("rps_scissors")
                          .setLabel("scissors")
                          .setEmoji("✂️")
                          .setDisabled(true)
                          .setStyle("SECONDARY")
                      ),
                    ],
                  })
                  .then(async (m) => {
                    return;
                  });
              } else if (rpsProbs == 2) {
                await i
                  .update({
                    embeds: [
                      {
                        color: String("#ff0000"),
                        title: String("Yay i won!"),
                        description: String(["i choose: **scissors**", "\n", "You choose: **paper**"].join("")),
                        image: {
                          url: String(
                            "https://cdn.discordapp.com/attachments/878993780798279761/941747505308241920/gmod-gmod-dance.gif"
                          ),
                        },
                      },
                    ],
                    components: [
                      new MessageActionRow().addComponents(
                        new MessageButton()
                          .setCustomId("rps_rock")
                          .setLabel("rock")
                          .setEmoji("🪨")
                          .setDisabled(true)
                          .setStyle("SECONDARY"),
                        new MessageButton()
                          .setCustomId("rps_paper")
                          .setLabel("paper")
                          .setEmoji("🧻")
                          .setDisabled(true)
                          .setStyle("SUCCESS"),
                        new MessageButton()
                          .setCustomId("rps_scissors")
                          .setLabel("scissors")
                          .setEmoji("✂️")
                          .setDisabled(true)
                          .setStyle("SECONDARY")
                      ),
                    ],
                  })
                  .then(async (m) => {
                    return;
                  });
              } else if (rpsProbs == 3) {
                await i
                  .update({
                    embeds: [
                      {
                        color: String("#ffcc00"),
                        title: String("It's a tie!"),
                        description: String(["i choose: **paper**", "\n", "You choose: **paper**"].join("")),
                      },
                    ],
                    components: [
                      new MessageActionRow().addComponents(
                        new MessageButton()
                          .setCustomId("rps_rock")
                          .setLabel("rock")
                          .setEmoji("🪨")
                          .setDisabled(true)
                          .setStyle("SECONDARY"),
                        new MessageButton()
                          .setCustomId("rps_paper")
                          .setLabel("paper")
                          .setEmoji("🧻")
                          .setDisabled(true)
                          .setStyle("SUCCESS"),
                        new MessageButton()
                          .setCustomId("rps_scissors")
                          .setLabel("scissors")
                          .setEmoji("✂️")
                          .setDisabled(true)
                          .setStyle("SECONDARY")
                      ),
                    ],
                  })
                  .then(async (m) => {
                    return;
                  });
              }
            } else if (i.customId == "rps_scissors") {
              paper = 1;
              rock = 2;
              scissors = 3;
              rpsProbs = mathRandomInt(1, 3);
              if (rpsProbs == 1) {
                await i
                  .update({
                    embeds: [
                      {
                        color: String("#33ff33"),
                        title: String(":trophy: You won >:("),
                        description: String(["i choose: **paper**", "\n", "You choose: **scissors**"].join("")),
                      },
                    ],
                    components: [
                      new MessageActionRow().addComponents(
                        new MessageButton()
                          .setCustomId("rps_rock")
                          .setLabel("rock")
                          .setEmoji("🪨")
                          .setDisabled(true)
                          .setStyle("SECONDARY"),
                        new MessageButton()
                          .setCustomId("rps_paper")
                          .setLabel("paper")
                          .setEmoji("🧻")
                          .setDisabled(true)
                          .setStyle("SECONDARY"),
                        new MessageButton()
                          .setCustomId("rps_scissors")
                          .setLabel("scissors")
                          .setEmoji("✂️")
                          .setDisabled(true)
                          .setStyle("SUCCESS")
                      ),
                    ],
                  })
                  .then(async (m) => {
                    return;
                  });
              } else if (rpsProbs == 2) {
                await i
                  .update({
                    embeds: [
                      {
                        color: String("#ff0000"),
                        title: String("Yay i won!"),
                        description: String(["i choose: **rock**", "\n", "You choose: **scissors**"].join("")),
                        image: {
                          url: String(
                            "https://cdn.discordapp.com/attachments/878993780798279761/941747505308241920/gmod-gmod-dance.gif"
                          ),
                        },
                      },
                    ],
                    components: [
                      new MessageActionRow().addComponents(
                        new MessageButton()
                          .setCustomId("rps_rock")
                          .setLabel("rock")
                          .setEmoji("🪨")
                          .setDisabled(true)
                          .setStyle("SECONDARY"),
                        new MessageButton()
                          .setCustomId("rps_paper")
                          .setLabel("paper")
                          .setEmoji("🧻")
                          .setDisabled(true)
                          .setStyle("SECONDARY"),
                        new MessageButton()
                          .setCustomId("rps_scissors")
                          .setLabel("scissors")
                          .setEmoji("✂️")
                          .setDisabled(true)
                          .setStyle("SUCCESS")
                      ),
                    ],
                  })
                  .then(async (m) => {
                    return;
                  });
              } else if (rpsProbs == 3) {
                await i
                  .update({
                    embeds: [
                      {
                        color: String("#ffcc00"),
                        title: String("It's a tie!"),
                        description: String(["i choose: **scissors**", "\n", "You choose: **scissors**"].join("")),
                      },
                    ],
                    components: [
                      new MessageActionRow().addComponents(
                        new MessageButton()
                          .setCustomId("rps_rock")
                          .setLabel("rock")
                          .setEmoji("🪨")
                          .setDisabled(true)
                          .setStyle("SECONDARY"),
                        new MessageButton()
                          .setCustomId("rps_paper")
                          .setLabel("paper")
                          .setEmoji("🧻")
                          .setDisabled(true)
                          .setStyle("SECONDARY"),
                        new MessageButton()
                          .setCustomId("rps_scissors")
                          .setLabel("scissors")
                          .setEmoji("✂️")
                          .setDisabled(true)
                          .setStyle("SUCCESS")
                      ),
                    ],
                  })
                  .then(async (m) => {
                    return;
                  });
              }
            }
          });
        });
      return;
    }

    /*
    D!BATTLE
    */
    if (s4dmessage.content.toUpperCase() == "D!BATTLE") {
      s4dmessage.reply({
        content: String(String(s4dmessage.author) + ", can you please mention an user?"),
        allowedMentions: {
          repliedUser: true,
        },
      });
      return;
    } else if ((s4dmessage.content.toUpperCase() || "").startsWith("D!BATTLE" || "")) {
      if (!s4d.database.has(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-battletimer"].join("")))) {
        s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-battletimer"].join("")), 0);
      }
      if (
        !(
          new Date().getTime() >
          s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-battletimer"].join(""))) + 60000
        )
      ) {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#000000"),
              description: String(
                [
                  "⏰ Slowdown man, you can do a battle again: **<t:",
                  Math.floor(
                    (s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-battletimer"].join(""))) +
                      60000) /
                      1000
                  ),
                  ":R>**",
                ].join("")
              ),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      battleCooldown = new Date().getTime();
      s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-battletimer"].join("")), battleCooldown);
      try {
        if (
          !s4d.database.has(
            String([(s4dmessage.guild || {}).id, "-", s4dmessage.mentions.members.first(), "-", "battleHP"].join(""))
          )
        ) {
          s4d.database.set(
            String([(s4dmessage.guild || {}).id, "-", s4dmessage.mentions.members.first(), "-", "battleHP"].join("")),
            100
          );
        }
        s4dmessage
          .reply({
            embeds: [
              {
                color: String("#c0c0c0"),
                title: String("⚙️ Preparing..."),
                description: String(
                  [
                    s4dmessage.author.username,
                    "⚔️ vs ⚔️",
                    s4d.client.users.cache.get(String(s4dmessage.mentions.members.first().id)).username,
                  ].join("")
                ),
                image: {
                  url: String("https://cdn.discordapp.com/attachments/916701043738423336/987264675555209276/unknown.png"),
                },
              },
            ],
            allowedMentions: {
              repliedUser: true,
            },
          })
          .then(async (s4dfrost_real_reply) => {
            await delay(Number(3) * 1000);
            while (
              !(
                s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-", "battleHP"].join(""))) <=
                  0 ||
                s4d.database.get(
                  String([(s4dmessage.guild || {}).id, "-", s4dmessage.mentions.members.first(), "-", "battleHP"].join(""))
                ) <= 0
              )
            ) {
              if (
                s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-", "battleHP"].join(""))) <=
                  0 ||
                s4d.database.get(
                  String([(s4dmessage.guild || {}).id, "-", s4dmessage.mentions.members.first(), "-", "battleHP"].join(""))
                ) <= 0
              ) {
                break;
              }
              battleDamage = mathRandomInt(5, 25);
              s4d.database.subtract(
                String([(s4dmessage.guild || {}).id, "-", s4dmessage.mentions.members.first(), "-", "battleHP"].join("")),
                parseInt(battleDamage)
              );
              s4dfrost_real_reply.edit({
                embeds: [
                  {
                    color: String("#33cc00"),
                    title: String(
                      [
                        s4dmessage.author.username,
                        "⚔️ vs ⚔️",
                        s4d.client.users.cache.get(String(s4dmessage.mentions.members.first().id)).username,
                      ].join("")
                    ),
                    description: String(
                      [
                        "➡️ ",
                        s4dmessage.author.username,
                        listsGetRandomItem(
                          [
                            " decide to ignore " +
                              String(s4d.client.users.cache.get(String(s4dmessage.mentions.members.first().id)).username),
                            " used a firework against " +
                              String(s4d.client.users.cache.get(String(s4dmessage.mentions.members.first().id)).username),
                            " dealt a finishing blow to " +
                              String(s4d.client.users.cache.get(String(s4dmessage.mentions.members.first().id)).username),
                            [
                              " vanquished ",
                              s4d.client.users.cache.get(String(s4dmessage.mentions.members.first().id)).username,
                              " with a decisive attack",
                            ].join(""),
                            [
                              " couldn't withstand the force of ",
                              s4d.client.users.cache.get(String(s4dmessage.mentions.members.first().id)).username,
                              " succumbed to the damage",
                            ].join(""),
                            [
                              " landed a fatal blow on ",
                              s4d.client.users.cache.get(String(s4dmessage.mentions.members.first().id)).username,
                              " with a powerful punch",
                            ].join(""),
                            [
                              " kicked ",
                              s4d.client.users.cache.get(String(s4dmessage.mentions.members.first().id)).username,
                              " 's ass",
                            ].join(""),
                            " punched " +
                              String(s4d.client.users.cache.get(String(s4dmessage.mentions.members.first().id)).username),
                            " farted on " +
                              String(s4d.client.users.cache.get(String(s4dmessage.mentions.members.first().id)).username),
                            " smashed " +
                              String(s4d.client.users.cache.get(String(s4dmessage.mentions.members.first().id)).username),
                            [
                              " said that  ",
                              s4d.client.users.cache.get(String(s4dmessage.mentions.members.first().id)).username,
                              " is gay",
                            ].join(""),
                            " trow a rock to " +
                              String(s4d.client.users.cache.get(String(s4dmessage.mentions.members.first().id)).username),
                            " crushed " +
                              String(s4d.client.users.cache.get(String(s4dmessage.mentions.members.first().id)).username),
                            " destroyed " +
                              String(s4d.client.users.cache.get(String(s4dmessage.mentions.members.first().id)).username),
                            " literally said no to " +
                              String(s4d.client.users.cache.get(String(s4dmessage.mentions.members.first().id)).username),
                            [
                              " smacks ",
                              s4d.client.users.cache.get(String(s4dmessage.mentions.members.first().id)).username,
                              " with a hammer",
                            ].join(""),
                            " throws a spear at " +
                              String(s4d.client.users.cache.get(String(s4dmessage.mentions.members.first().id)).username),
                            [
                              " burns ",
                              s4d.client.users.cache.get(String(s4dmessage.mentions.members.first().id)).username,
                              " with fire dealing",
                            ].join(""),
                            [
                              " flips ",
                              s4d.client.users.cache.get(String(s4dmessage.mentions.members.first().id)).username,
                              " into the ground",
                            ].join(""),
                          ],
                          false
                        ),
                        " for **-",
                        battleDamage,
                        "HP**",
                      ].join("")
                    ),
                    fields: [
                      {
                        name: "HP stats:",
                        value: [
                          s4dmessage.author.username,
                          ": **",
                          s4d.database.get(
                            String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-", "battleHP"].join(""))
                          ),
                          "HP**   |   ",
                          s4d.client.users.cache.get(String(s4dmessage.mentions.members.first().id)).username,
                          ": **",
                          s4d.database.get(
                            String(
                              [(s4dmessage.guild || {}).id, "-", s4dmessage.mentions.members.first(), "-", "battleHP"].join("")
                            )
                          ),
                          "HP**",
                        ].join(""),
                        inline: false,
                      },
                    ],
                    image: {
                      url: String("https://cdn.discordapp.com/attachments/916701043738423336/987265030317805568/unknown.png"),
                    },
                  },
                ],
              });
              await delay(Number(2) * 1000);
              if (
                s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-", "battleHP"].join(""))) <=
                  0 ||
                s4d.database.get(
                  String([(s4dmessage.guild || {}).id, "-", s4dmessage.mentions.members.first(), "-", "battleHP"].join(""))
                ) <= 0
              ) {
                break;
              }
              battleDamage = mathRandomInt(5, 25);
              s4d.database.subtract(
                String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-", "battleHP"].join("")),
                parseInt(battleDamage)
              );
              s4dfrost_real_reply.edit({
                embeds: [
                  {
                    color: String("#ff0000"),
                    title: String(
                      [
                        s4dmessage.author.username,
                        "⚔️ vs ⚔️",
                        s4d.client.users.cache.get(String(s4dmessage.mentions.members.first().id)).username,
                      ].join("")
                    ),
                    description: String(
                      [
                        "⬅️ ",
                        s4d.client.users.cache.get(String(s4dmessage.mentions.members.first().id)).username,
                        listsGetRandomItem(
                          [
                            " decide to ignore " + String(s4dmessage.author.username),
                            " used a firework against " + String(s4dmessage.author.username),
                            " dealt a finishing blow to " + String(s4dmessage.author.username),
                            [" vanquished ", s4dmessage.author.username, " with a decisive attack"].join(""),
                            [" couldn't withstand the force of ", s4dmessage.author.username, " succumbed to the damage"].join(
                              ""
                            ),
                            [" landed a fatal blow on ", s4dmessage.author.username, " with a powerful punch"].join(""),
                            [" kicked ", s4dmessage.author.username, " 's ass"].join(""),
                            " punched " + String(s4dmessage.author.username),
                            " farted on " + String(s4dmessage.author.username),
                            " smashed " + String(s4dmessage.author.username),
                            [" said that  ", s4dmessage.author.username, " is gay"].join(""),
                            " trow a rock to " + String(s4dmessage.author.username),
                            " crushed " + String(s4dmessage.author.username),
                            " destroyed " + String(s4dmessage.author.username),
                            " literally said no to " + String(s4dmessage.author.username),
                            [" smacks ", s4dmessage.author.username, " with a hammer"].join(""),
                            " throws a spear at " + String(s4dmessage.author.username),
                            [" burns ", s4dmessage.author.username, " with fire dealing"].join(""),
                            [" flips ", s4dmessage.author.username, " into the ground"].join(""),
                          ],
                          false
                        ),
                        " for **-",
                        battleDamage,
                        "HP**",
                      ].join("")
                    ),
                    fields: [
                      {
                        name: "HP stats:",
                        value: [
                          s4dmessage.author.username,
                          ": **",
                          s4d.database.get(
                            String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-", "battleHP"].join(""))
                          ),
                          "HP**   |   ",
                          s4d.client.users.cache.get(String(s4dmessage.mentions.members.first().id)).username,
                          ": **",
                          s4d.database.get(
                            String(
                              [(s4dmessage.guild || {}).id, "-", s4dmessage.mentions.members.first(), "-", "battleHP"].join("")
                            )
                          ),
                          "HP**",
                        ].join(""),
                        inline: false,
                      },
                    ],
                    image: {
                      url: String("https://cdn.discordapp.com/attachments/916701043738423336/987265030317805568/unknown.png"),
                    },
                  },
                ],
              });
              await delay(Number(2) * 1000);
            }
            if (
              s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-", "battleHP"].join(""))) > 0 &&
              s4d.database.get(
                String([(s4dmessage.guild || {}).id, "-", s4dmessage.mentions.members.first(), "-", "battleHP"].join(""))
              ) <= 0
            ) {
              s4dfrost_real_reply.edit({
                embeds: [
                  {
                    color: String("#ffcc00"),
                    title: String(String(s4dmessage.author.username) + " won!"),
                    description: String("That was epik! GG!"),
                    image: {
                      url: String(
                        "https://cdn.discordapp.com/attachments/916701043738423336/975295686696398908/Gmod-dance.gif"
                      ),
                    },
                    footer: {
                      text: String("ezz"),
                      icon_url: String(),
                    },
                  },
                ],
              });
              s4d.database.delete(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-", "battleHP"].join("")));
              s4d.database.delete(
                String([(s4dmessage.guild || {}).id, "-", s4dmessage.mentions.members.first(), "-", "battleHP"].join(""))
              );
            } else if (
              s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-", "battleHP"].join(""))) <= 0 &&
              s4d.database.get(
                String([(s4dmessage.guild || {}).id, "-", s4dmessage.mentions.members.first(), "-", "battleHP"].join(""))
              ) > 0
            ) {
              s4dfrost_real_reply.edit({
                embeds: [
                  {
                    color: String("#ffcc00"),
                    title: String(
                      String(s4d.client.users.cache.get(String(s4dmessage.mentions.members.first().id)).username) + " won!"
                    ),
                    description: String("That was epik! GG!"),
                    image: {
                      url: String(
                        "https://cdn.discordapp.com/attachments/916701043738423336/975295686696398908/Gmod-dance.gif"
                      ),
                    },
                    footer: {
                      text: String("ezz"),
                      icon_url: String(),
                    },
                  },
                ],
              });
              s4d.database.delete(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-", "battleHP"].join("")));
              s4d.database.delete(
                String([(s4dmessage.guild || {}).id, "-", s4dmessage.mentions.members.first(), "-", "battleHP"].join(""))
              );
            }
          });
        return;
      } catch (err) {
        s4dmessage.reply({
          content: String(String(s4dmessage.author) + ", can you please mention an user?"),
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
    }

    /*
    D!PONG
    */
    if ((s4dmessage.content.toUpperCase() || "").startsWith("D!PONG" || "")) {
      s4dmessage.reply({
        embeds: [
          {
            color: String("#00cccc"),
            title: String("Pong! 🏓🏓🏓"),
            description: String("uhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh"),
          },
        ],
        allowedMentions: {
          repliedUser: true,
        },
      });
      return;
    }

    /*
    D!SCTEST
    */
    if ((s4dmessage.content.toUpperCase() || "").startsWith("D!SCTEST" || "")) {
      if (!s4d.database.has(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-sctesttimer"].join("")))) {
        s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-sctesttimer"].join("")), 0);
      }
      if (
        !(
          new Date().getTime() >
          s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-sctesttimer"].join(""))) + 180000
        )
      ) {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#000000"),
              description: String(
                [
                  "⏰ Slowdown man, you can do this test again: **<t:",
                  Math.floor(
                    (s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-sctesttimer"].join(""))) +
                      180000) /
                      1000
                  ),
                  ":R>**",
                ].join("")
              ),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      scTestCooldown = new Date().getTime();
      s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-sctesttimer"].join("")), scTestCooldown);
      if (!s4d.database.has(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-socialcredits"].join("")))) {
        s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-socialcredits"].join("")), 0);
      }
      s4dmessage
        .reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("Social credit test!"),
              description: String("Are you sure to start the quiz?"),
              thumbnail: {
                url: String("https://cdn.discordapp.com/attachments/916701043738423336/965632653032308736/SocialCredits.png"),
              },
            },
          ],
          components: [
            new MessageActionRow().addComponents(
              new MessageButton().setCustomId("sc_yes_1").setLabel("Yes").setStyle("SUCCESS"),
              new MessageButton().setCustomId("sc_yes_2").setLabel("Yes").setStyle("SUCCESS")
            ),
          ],
        })
        .then(async (m) => {
          let collector = m.createMessageComponentCollector({
            filter: (i) => i.user.id === s4dmessage.author.id,
            time: Number(60000) * 1000,
          });
          collector.on("collect", async (i) => {
            if (i.customId == "sc_yes_1" || i.customId == "sc_yes_2") {
              await i
                .update({
                  embeds: [
                    {
                      color: String("#ff0000"),
                      title: String("Question 1: How many children should one family have?"),
                      description: String(
                        ["A) 4 twin", "\n", "B) 13", "\n", "C) Make as possible as you can", "\n", "D) 1"].join("")
                      ),
                      thumbnail: {
                        url: String(
                          "https://cdn.discordapp.com/attachments/916701043738423336/965632653032308736/SocialCredits.png"
                        ),
                      },
                    },
                  ],
                  components: [
                    new MessageActionRow().addComponents(
                      new MessageButton().setCustomId("q1_a").setLabel("A").setStyle("PRIMARY"),
                      new MessageButton().setCustomId("q1_b").setLabel("B").setStyle("PRIMARY"),
                      new MessageButton().setCustomId("q1_c").setLabel("C").setStyle("PRIMARY"),
                      new MessageButton().setCustomId("q1_d").setLabel("D").setStyle("PRIMARY")
                    ),
                  ],
                })
                .then(async (m) => {});

              let collector = m.createMessageComponentCollector({
                filter: (i) => i.user.id === s4dmessage.author.id,
                time: Number(60000) * 1000,
              });
              collector.on("collect", async (i) => {
                if (i.customId == "q1_d") {
                  s4d.database.add(
                    String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-socialcredits"].join("")),
                    parseInt(100000)
                  );
                  await i
                    .update({
                      embeds: [
                        {
                          color: String("#33cc00"),
                          title: String("That's correct!"),
                          description: String("You got +100000 Social credits"),
                          image: {
                            url: String("https://cdn.discordapp.com/attachments/916701043738423336/965635911553523822/Sc.png"),
                          },
                          footer: {
                            text: String("1/10 questions"),
                            icon_url: String(),
                          },
                        },
                      ],
                      components: [
                        new MessageActionRow().addComponents(
                          new MessageButton().setCustomId("q1_a").setLabel("A").setStyle("SECONDARY"),
                          new MessageButton().setCustomId("q1_b").setLabel("B").setStyle("SECONDARY"),
                          new MessageButton().setCustomId("q1_c").setLabel("C").setStyle("SECONDARY"),
                          new MessageButton().setCustomId("q1_d").setLabel("D").setStyle("SUCCESS")
                        ),
                      ],
                    })
                    .then(async (m) => {});
                  await delay(Number(1) * 1000);
                  s4dmessage
                    .reply({
                      embeds: [
                        {
                          color: String("#ff0000"),
                          title: String("Question 2: How many hours do you play Games?"),
                          description: String(
                            ["A) 4 hours", "\n", "B) 1 hour", "\n", "C) 5 min every weekend", "\n", "D) 1/3 hours"].join("")
                          ),
                          thumbnail: {
                            url: String(
                              "https://cdn.discordapp.com/attachments/916701043738423336/965632653032308736/SocialCredits.png"
                            ),
                          },
                        },
                      ],
                      components: [
                        new MessageActionRow().addComponents(
                          new MessageButton().setCustomId("q2_a").setLabel("A").setStyle("PRIMARY"),
                          new MessageButton().setCustomId("q2_b").setLabel("B").setStyle("PRIMARY"),
                          new MessageButton().setCustomId("q2_c").setLabel("C").setStyle("PRIMARY"),
                          new MessageButton().setCustomId("q2_d").setLabel("D").setStyle("PRIMARY")
                        ),
                      ],
                    })
                    .then(async (m) => {
                      let collector = m.createMessageComponentCollector({
                        filter: (i) => i.user.id === s4dmessage.author.id,
                        time: Number(60000) * 1000,
                      });
                      collector.on("collect", async (i) => {
                        if (i.customId == "q2_b") {
                          s4d.database.add(
                            String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-socialcredits"].join("")),
                            parseInt(100000)
                          );
                          await i
                            .update({
                              embeds: [
                                {
                                  color: String("#33cc00"),
                                  title: String("That's correct!"),
                                  description: String("You got +100000 Social credits"),
                                  image: {
                                    url: String(
                                      "https://cdn.discordapp.com/attachments/916701043738423336/965635911553523822/Sc.png"
                                    ),
                                  },
                                  footer: {
                                    text: String("2/10 questions"),
                                    icon_url: String(),
                                  },
                                },
                              ],
                              components: [
                                new MessageActionRow().addComponents(
                                  new MessageButton().setCustomId("q2_a").setLabel("A").setStyle("SECONDARY"),
                                  new MessageButton().setCustomId("q2_b").setLabel("B").setStyle("SUCCESS"),
                                  new MessageButton().setCustomId("q2_c").setLabel("C").setStyle("SECONDARY"),
                                  new MessageButton().setCustomId("q2_d").setLabel("D").setStyle("SECONDARY")
                                ),
                              ],
                            })
                            .then(async (m) => {});
                          await delay(Number(1) * 1000);
                          s4dmessage
                            .reply({
                              embeds: [
                                {
                                  color: String("#ff0000"),
                                  title: String("Question 3: Which is better?"),
                                  description: String(
                                    ["A) China", "\n", "B) USA", "\n", "C) France", "\n", "D) Russia"].join("")
                                  ),
                                  thumbnail: {
                                    url: String(
                                      "https://cdn.discordapp.com/attachments/916701043738423336/965632653032308736/SocialCredits.png"
                                    ),
                                  },
                                },
                              ],
                              components: [
                                new MessageActionRow().addComponents(
                                  new MessageButton().setCustomId("q3_a").setLabel("A").setStyle("PRIMARY"),
                                  new MessageButton().setCustomId("q3_b").setLabel("B").setStyle("PRIMARY"),
                                  new MessageButton().setCustomId("q3_c").setLabel("C").setStyle("PRIMARY"),
                                  new MessageButton().setCustomId("q3_d").setLabel("D").setStyle("PRIMARY")
                                ),
                              ],
                            })
                            .then(async (m) => {
                              let collector = m.createMessageComponentCollector({
                                filter: (i) => i.user.id === s4dmessage.author.id,
                                time: Number(60000) * 1000,
                              });
                              collector.on("collect", async (i) => {
                                if (i.customId == "q3_a") {
                                  s4d.database.add(
                                    String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-socialcredits"].join("")),
                                    parseInt(100000)
                                  );
                                  await i
                                    .update({
                                      embeds: [
                                        {
                                          color: String("#33cc00"),
                                          title: String("That's correct!"),
                                          description: String("You got +100000 Social credits"),
                                          image: {
                                            url: String(
                                              "https://cdn.discordapp.com/attachments/916701043738423336/965635911553523822/Sc.png"
                                            ),
                                          },
                                          footer: {
                                            text: String("3/10 questions"),
                                            icon_url: String(),
                                          },
                                        },
                                      ],
                                      components: [
                                        new MessageActionRow().addComponents(
                                          new MessageButton().setCustomId("q3_a").setLabel("A").setStyle("SUCCESS"),
                                          new MessageButton().setCustomId("q3_b").setLabel("B").setStyle("SECONDARY"),
                                          new MessageButton().setCustomId("q3_c").setLabel("C").setStyle("SECONDARY"),
                                          new MessageButton().setCustomId("q3_d").setLabel("D").setStyle("SECONDARY")
                                        ),
                                      ],
                                    })
                                    .then(async (m) => {});
                                  await delay(Number(1) * 1000);
                                  s4dmessage
                                    .reply({
                                      embeds: [
                                        {
                                          color: String("#ff0000"),
                                          title: String("Question 4: What happened on Tiananmen Square in 1989?"),
                                          description: String(
                                            ["A) Nothing", "\n", "B) Something", "\n", "C) Nothing", "\n", "D) Nothing"].join(
                                              ""
                                            )
                                          ),
                                          thumbnail: {
                                            url: String(
                                              "https://cdn.discordapp.com/attachments/916701043738423336/965632653032308736/SocialCredits.png"
                                            ),
                                          },
                                        },
                                      ],
                                      components: [
                                        new MessageActionRow().addComponents(
                                          new MessageButton().setCustomId("q4_a").setLabel("A").setStyle("PRIMARY"),
                                          new MessageButton().setCustomId("q4_b").setLabel("B").setStyle("PRIMARY"),
                                          new MessageButton().setCustomId("q4_c").setLabel("C").setStyle("PRIMARY"),
                                          new MessageButton().setCustomId("q4_d").setLabel("D").setStyle("PRIMARY")
                                        ),
                                      ],
                                    })
                                    .then(async (m) => {
                                      let collector = m.createMessageComponentCollector({
                                        filter: (i) => i.user.id === s4dmessage.author.id,
                                        time: Number(60000) * 1000,
                                      });
                                      collector.on("collect", async (i) => {
                                        if (i.customId == "q4_a" || i.customId == "q4_c" || i.customId == "q4_d") {
                                          s4d.database.add(
                                            String(
                                              [(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-socialcredits"].join("")
                                            ),
                                            parseInt(100000)
                                          );
                                          await i
                                            .update({
                                              embeds: [
                                                {
                                                  color: String("#33cc00"),
                                                  title: String("That's correct!"),
                                                  description: String("You got +100000 Social credits"),
                                                  image: {
                                                    url: String(
                                                      "https://cdn.discordapp.com/attachments/916701043738423336/965635911553523822/Sc.png"
                                                    ),
                                                  },
                                                  footer: {
                                                    text: String("4/10 questions"),
                                                    icon_url: String(),
                                                  },
                                                },
                                              ],
                                              components: [
                                                new MessageActionRow().addComponents(
                                                  new MessageButton().setCustomId("q4_a").setLabel("A").setStyle("SUCCESS"),
                                                  new MessageButton().setCustomId("q4_b").setLabel("B").setStyle("SECONDARY"),
                                                  new MessageButton().setCustomId("q4_c").setLabel("C").setStyle("SUCCESS"),
                                                  new MessageButton().setCustomId("q4_d").setLabel("D").setStyle("SUCCESS")
                                                ),
                                              ],
                                            })
                                            .then(async (m) => {});
                                          await delay(Number(1) * 1000);
                                          s4dmessage
                                            .reply({
                                              embeds: [
                                                {
                                                  color: String("#ff0000"),
                                                  title: String("Question 5: Is Taiwan a country?"),
                                                  description: String(
                                                    ["A) No", "\n", "B) Nah", "\n", "C) Definitely no", "\n", "D) Yes"].join("")
                                                  ),
                                                  thumbnail: {
                                                    url: String(
                                                      "https://cdn.discordapp.com/attachments/916701043738423336/965632653032308736/SocialCredits.png"
                                                    ),
                                                  },
                                                },
                                              ],
                                              components: [
                                                new MessageActionRow().addComponents(
                                                  new MessageButton().setCustomId("q5_a").setLabel("A").setStyle("PRIMARY"),
                                                  new MessageButton().setCustomId("q5_b").setLabel("B").setStyle("PRIMARY"),
                                                  new MessageButton().setCustomId("q5_c").setLabel("C").setStyle("PRIMARY"),
                                                  new MessageButton().setCustomId("q5_d").setLabel("D").setStyle("PRIMARY")
                                                ),
                                              ],
                                            })
                                            .then(async (m) => {
                                              let collector = m.createMessageComponentCollector({
                                                filter: (i) => i.user.id === s4dmessage.author.id,
                                                time: Number(60000) * 1000,
                                              });
                                              collector.on("collect", async (i) => {
                                                if (i.customId == "q5_a" || i.customId == "q5_c" || i.customId == "q5_b") {
                                                  s4d.database.add(
                                                    String(
                                                      [
                                                        (s4dmessage.guild || {}).id,
                                                        "-",
                                                        s4dmessage.author,
                                                        "-socialcredits",
                                                      ].join("")
                                                    ),
                                                    parseInt(100000)
                                                  );
                                                  await i
                                                    .update({
                                                      embeds: [
                                                        {
                                                          color: String("#33cc00"),
                                                          title: String("That's correct!"),
                                                          description: String(
                                                            "You got +100000 Social credits, and the test is over"
                                                          ),
                                                          image: {
                                                            url: String(
                                                              "https://cdn.discordapp.com/attachments/916701043738423336/965635911553523822/Sc.png"
                                                            ),
                                                          },
                                                          footer: {
                                                            text: String("5/10 questions"),
                                                            icon_url: String(),
                                                          },
                                                        },
                                                      ],
                                                      components: [
                                                        new MessageActionRow().addComponents(
                                                          new MessageButton()
                                                            .setCustomId("q5_a")
                                                            .setLabel("A")
                                                            .setStyle("SUCCESS"),
                                                          new MessageButton()
                                                            .setCustomId("q5_b")
                                                            .setLabel("B")
                                                            .setStyle("SUCCESS"),
                                                          new MessageButton()
                                                            .setCustomId("q5_c")
                                                            .setLabel("C")
                                                            .setStyle("SUCCESS"),
                                                          new MessageButton()
                                                            .setCustomId("q5_d")
                                                            .setLabel("D")
                                                            .setStyle("SECONDARY")
                                                        ),
                                                      ],
                                                    })
                                                    .then(async (m) => {});
                                                  await delay(Number(1) * 1000);
                                                  s4dmessage
                                                    .reply({
                                                      embeds: [
                                                        {
                                                          color: String("#ff0000"),
                                                          title: String("Question 6: Who is this guy?"),
                                                          description: String(
                                                            [
                                                              "A) Winnie the Pooh",
                                                              "\n",
                                                              "B) I don't know",
                                                              "\n",
                                                              "C) Some random Chinese polician",
                                                              "\n",
                                                              "D) Xi Jinping",
                                                            ].join("")
                                                          ),
                                                          thumbnail: {
                                                            url: String(
                                                              "https://cdn.discordapp.com/attachments/916701043738423336/965632653032308736/SocialCredits.png"
                                                            ),
                                                          },
                                                          image: {
                                                            url: String(
                                                              "https://cdn.discordapp.com/attachments/916701704706220033/981840164978573312/unknown.png"
                                                            ),
                                                          },
                                                        },
                                                      ],
                                                      components: [
                                                        new MessageActionRow().addComponents(
                                                          new MessageButton()
                                                            .setCustomId("q6_a")
                                                            .setLabel("A")
                                                            .setStyle("PRIMARY"),
                                                          new MessageButton()
                                                            .setCustomId("q6_b")
                                                            .setLabel("B")
                                                            .setStyle("PRIMARY"),
                                                          new MessageButton()
                                                            .setCustomId("q6_c")
                                                            .setLabel("C")
                                                            .setStyle("PRIMARY"),
                                                          new MessageButton()
                                                            .setCustomId("q6_d")
                                                            .setLabel("D")
                                                            .setStyle("PRIMARY")
                                                        ),
                                                      ],
                                                    })
                                                    .then(async (m) => {
                                                      let collector = m.createMessageComponentCollector({
                                                        filter: (i) => i.user.id === s4dmessage.author.id,
                                                        time: Number(60000) * 1000,
                                                      });
                                                      collector.on("collect", async (i) => {
                                                        if (i.customId == "q6_d") {
                                                          s4d.database.add(
                                                            String(
                                                              [
                                                                (s4dmessage.guild || {}).id,
                                                                "-",
                                                                s4dmessage.author,
                                                                "-socialcredits",
                                                              ].join("")
                                                            ),
                                                            parseInt(100000)
                                                          );
                                                          await i
                                                            .update({
                                                              embeds: [
                                                                {
                                                                  color: String("#33cc00"),
                                                                  title: String("That's correct!"),
                                                                  description: String("You got +100000 Social credits"),
                                                                  image: {
                                                                    url: String(
                                                                      "https://cdn.discordapp.com/attachments/916701043738423336/965635911553523822/Sc.png"
                                                                    ),
                                                                  },
                                                                  footer: {
                                                                    text: String("6/10 questions"),
                                                                    icon_url: String(),
                                                                  },
                                                                },
                                                              ],
                                                              components: [
                                                                new MessageActionRow().addComponents(
                                                                  new MessageButton()
                                                                    .setCustomId("q6_a")
                                                                    .setLabel("A")
                                                                    .setStyle("SECONDARY"),
                                                                  new MessageButton()
                                                                    .setCustomId("q6_b")
                                                                    .setLabel("B")
                                                                    .setStyle("SECONDARY"),
                                                                  new MessageButton()
                                                                    .setCustomId("q6_c")
                                                                    .setLabel("C")
                                                                    .setStyle("SECONDARY"),
                                                                  new MessageButton()
                                                                    .setCustomId("q6_d")
                                                                    .setLabel("D")
                                                                    .setStyle("SUCCESS")
                                                                ),
                                                              ],
                                                            })
                                                            .then(async (m) => {});
                                                          await delay(Number(1) * 1000);
                                                          s4dmessage
                                                            .reply({
                                                              embeds: [
                                                                {
                                                                  color: String("#ff0000"),
                                                                  title: String(
                                                                    'Question 7: A popular international singer held a concert in Tapei, they said they enjoyed performing and that Taiwan is a "wonderful country". Your reaction?'
                                                                  ),
                                                                  description: String(
                                                                    [
                                                                      "A) Nothing",
                                                                      "\n",
                                                                      "B) I hope they have a concert in my city too",
                                                                      "\n",
                                                                      "C) The Taiwan situation is complex, so it's common for people to mistake Taiwan as a country",
                                                                      "\n",
                                                                      "D) They should apologize and say Taiwan is a part of China/Not a country",
                                                                    ].join("")
                                                                  ),
                                                                  thumbnail: {
                                                                    url: String(
                                                                      "https://cdn.discordapp.com/attachments/916701043738423336/965632653032308736/SocialCredits.png"
                                                                    ),
                                                                  },
                                                                },
                                                              ],
                                                              components: [
                                                                new MessageActionRow().addComponents(
                                                                  new MessageButton()
                                                                    .setCustomId("q7_a")
                                                                    .setLabel("A")
                                                                    .setStyle("PRIMARY"),
                                                                  new MessageButton()
                                                                    .setCustomId("q7_b")
                                                                    .setLabel("B")
                                                                    .setStyle("PRIMARY"),
                                                                  new MessageButton()
                                                                    .setCustomId("q7_c")
                                                                    .setLabel("C")
                                                                    .setStyle("PRIMARY"),
                                                                  new MessageButton()
                                                                    .setCustomId("q7_d")
                                                                    .setLabel("D")
                                                                    .setStyle("PRIMARY")
                                                                ),
                                                              ],
                                                            })
                                                            .then(async (m) => {
                                                              let collector = m.createMessageComponentCollector({
                                                                filter: (i) => i.user.id === s4dmessage.author.id,
                                                                time: Number(60000) * 1000,
                                                              });
                                                              collector.on("collect", async (i) => {
                                                                if (i.customId == "q7_d") {
                                                                  s4d.database.add(
                                                                    String(
                                                                      [
                                                                        (s4dmessage.guild || {}).id,
                                                                        "-",
                                                                        s4dmessage.author,
                                                                        "-socialcredits",
                                                                      ].join("")
                                                                    ),
                                                                    parseInt(100000)
                                                                  );
                                                                  await i
                                                                    .update({
                                                                      embeds: [
                                                                        {
                                                                          color: String("#33cc00"),
                                                                          title: String("That's correct!"),
                                                                          description: String("You got +100000 Social credits"),
                                                                          image: {
                                                                            url: String(
                                                                              "https://cdn.discordapp.com/attachments/916701043738423336/965635911553523822/Sc.png"
                                                                            ),
                                                                          },
                                                                          footer: {
                                                                            text: String("7/10 questions"),
                                                                            icon_url: String(),
                                                                          },
                                                                        },
                                                                      ],
                                                                      components: [
                                                                        new MessageActionRow().addComponents(
                                                                          new MessageButton()
                                                                            .setCustomId("q7_a")
                                                                            .setLabel("A")
                                                                            .setStyle("SECONDARY"),
                                                                          new MessageButton()
                                                                            .setCustomId("q7_b")
                                                                            .setLabel("B")
                                                                            .setStyle("SECONDARY"),
                                                                          new MessageButton()
                                                                            .setCustomId("q7_c")
                                                                            .setLabel("C")
                                                                            .setStyle("SECONDARY"),
                                                                          new MessageButton()
                                                                            .setCustomId("q7_d")
                                                                            .setLabel("D")
                                                                            .setStyle("SUCCESS")
                                                                        ),
                                                                      ],
                                                                    })
                                                                    .then(async (m) => {});
                                                                  await delay(Number(1) * 1000);
                                                                  s4dmessage
                                                                    .reply({
                                                                      embeds: [
                                                                        {
                                                                          color: String("#ff0000"),
                                                                          title: String("Question 8: Best goverment system?"),
                                                                          description: String(
                                                                            [
                                                                              "A) West democracy",
                                                                              "\n",
                                                                              "B) Socialism",
                                                                              "\n",
                                                                              "C) Communism",
                                                                              "\n",
                                                                              "D) Monarchy",
                                                                            ].join("")
                                                                          ),
                                                                          thumbnail: {
                                                                            url: String(
                                                                              "https://cdn.discordapp.com/attachments/916701043738423336/965632653032308736/SocialCredits.png"
                                                                            ),
                                                                          },
                                                                        },
                                                                      ],
                                                                      components: [
                                                                        new MessageActionRow().addComponents(
                                                                          new MessageButton()
                                                                            .setCustomId("q8_a")
                                                                            .setLabel("A")
                                                                            .setStyle("PRIMARY"),
                                                                          new MessageButton()
                                                                            .setCustomId("q8_b")
                                                                            .setLabel("B")
                                                                            .setStyle("PRIMARY"),
                                                                          new MessageButton()
                                                                            .setCustomId("q8_c")
                                                                            .setLabel("C")
                                                                            .setStyle("PRIMARY"),
                                                                          new MessageButton()
                                                                            .setCustomId("q8_d")
                                                                            .setLabel("D")
                                                                            .setStyle("PRIMARY")
                                                                        ),
                                                                      ],
                                                                    })
                                                                    .then(async (m) => {
                                                                      let collector = m.createMessageComponentCollector({
                                                                        filter: (i) => i.user.id === s4dmessage.author.id,
                                                                        time: Number(60000) * 1000,
                                                                      });
                                                                      collector.on("collect", async (i) => {
                                                                        if (i.customId == "q8_c") {
                                                                          s4d.database.add(
                                                                            String(
                                                                              [
                                                                                (s4dmessage.guild || {}).id,
                                                                                "-",
                                                                                s4dmessage.author,
                                                                                "-socialcredits",
                                                                              ].join("")
                                                                            ),
                                                                            parseInt(100000)
                                                                          );
                                                                          await i
                                                                            .update({
                                                                              embeds: [
                                                                                {
                                                                                  color: String("#33cc00"),
                                                                                  title: String("That's correct!"),
                                                                                  description:
                                                                                    String("You got +100000 Social credits"),
                                                                                  image: {
                                                                                    url: String(
                                                                                      "https://cdn.discordapp.com/attachments/916701043738423336/965635911553523822/Sc.png"
                                                                                    ),
                                                                                  },
                                                                                  footer: {
                                                                                    text: String("8/10 questions"),
                                                                                    icon_url: String(),
                                                                                  },
                                                                                },
                                                                              ],
                                                                              components: [
                                                                                new MessageActionRow().addComponents(
                                                                                  new MessageButton()
                                                                                    .setCustomId("q8_a")
                                                                                    .setLabel("A")
                                                                                    .setStyle("SECONDARY"),
                                                                                  new MessageButton()
                                                                                    .setCustomId("q8_b")
                                                                                    .setLabel("B")
                                                                                    .setStyle("SECONDARY"),
                                                                                  new MessageButton()
                                                                                    .setCustomId("q8_c")
                                                                                    .setLabel("C")
                                                                                    .setStyle("SUCCESS"),
                                                                                  new MessageButton()
                                                                                    .setCustomId("q8_d")
                                                                                    .setLabel("D")
                                                                                    .setStyle("SECONDARY")
                                                                                ),
                                                                              ],
                                                                            })
                                                                            .then(async (m) => {});
                                                                          await delay(Number(1) * 1000);
                                                                          s4dmessage
                                                                            .reply({
                                                                              embeds: [
                                                                                {
                                                                                  color: String("#ff0000"),
                                                                                  title: String(
                                                                                    "Question 9: What do you think about the Chinese Communist party?"
                                                                                  ),
                                                                                  description: String(
                                                                                    [
                                                                                      "A) They are rightful authorities of China",
                                                                                      "\n",
                                                                                      "B) They are not perfect but they govern China well",
                                                                                      "\n",
                                                                                      "C) They are totalitarian and dose not represent the Chinese people",
                                                                                      "\n",
                                                                                      "D) They are doing really bad things to people",
                                                                                    ].join("")
                                                                                  ),
                                                                                  thumbnail: {
                                                                                    url: String(
                                                                                      "https://cdn.discordapp.com/attachments/916701043738423336/965632653032308736/SocialCredits.png"
                                                                                    ),
                                                                                  },
                                                                                },
                                                                              ],
                                                                              components: [
                                                                                new MessageActionRow().addComponents(
                                                                                  new MessageButton()
                                                                                    .setCustomId("q9_a")
                                                                                    .setLabel("A")
                                                                                    .setStyle("PRIMARY"),
                                                                                  new MessageButton()
                                                                                    .setCustomId("q9_b")
                                                                                    .setLabel("B")
                                                                                    .setStyle("PRIMARY"),
                                                                                  new MessageButton()
                                                                                    .setCustomId("q9_c")
                                                                                    .setLabel("C")
                                                                                    .setStyle("PRIMARY"),
                                                                                  new MessageButton()
                                                                                    .setCustomId("q9_d")
                                                                                    .setLabel("D")
                                                                                    .setStyle("PRIMARY")
                                                                                ),
                                                                              ],
                                                                            })
                                                                            .then(async (m) => {
                                                                              let collector = m.createMessageComponentCollector(
                                                                                {
                                                                                  filter: (i) =>
                                                                                    i.user.id === s4dmessage.author.id,
                                                                                  time: Number(60000) * 1000,
                                                                                }
                                                                              );
                                                                              collector.on("collect", async (i) => {
                                                                                if (i.customId == "q9_a") {
                                                                                  s4d.database.add(
                                                                                    String(
                                                                                      [
                                                                                        (s4dmessage.guild || {}).id,
                                                                                        "-",
                                                                                        s4dmessage.author,
                                                                                        "-socialcredits",
                                                                                      ].join("")
                                                                                    ),
                                                                                    parseInt(100000)
                                                                                  );
                                                                                  await i
                                                                                    .update({
                                                                                      embeds: [
                                                                                        {
                                                                                          color: String("#33cc00"),
                                                                                          title: String("That's correct!"),
                                                                                          description:
                                                                                            String(
                                                                                              "You got +100000 Social credits"
                                                                                            ),
                                                                                          image: {
                                                                                            url: String(
                                                                                              "https://cdn.discordapp.com/attachments/916701043738423336/965635911553523822/Sc.png"
                                                                                            ),
                                                                                          },
                                                                                          footer: {
                                                                                            text: String("9/10 questions"),
                                                                                            icon_url: String(),
                                                                                          },
                                                                                        },
                                                                                      ],
                                                                                      components: [
                                                                                        new MessageActionRow().addComponents(
                                                                                          new MessageButton()
                                                                                            .setCustomId("q9_a")
                                                                                            .setLabel("A")
                                                                                            .setStyle("SUCCESS"),
                                                                                          new MessageButton()
                                                                                            .setCustomId("q9_b")
                                                                                            .setLabel("B")
                                                                                            .setStyle("SECONDARY"),
                                                                                          new MessageButton()
                                                                                            .setCustomId("q9_c")
                                                                                            .setLabel("C")
                                                                                            .setStyle("SECONDARY"),
                                                                                          new MessageButton()
                                                                                            .setCustomId("q9_d")
                                                                                            .setLabel("D")
                                                                                            .setStyle("SECONDARY")
                                                                                        ),
                                                                                      ],
                                                                                    })
                                                                                    .then(async (m) => {});
                                                                                  await delay(Number(1) * 1000);
                                                                                  s4dmessage
                                                                                    .reply({
                                                                                      embeds: [
                                                                                        {
                                                                                          color: String("#ff0000"),
                                                                                          title: String(
                                                                                            "Question 10: Xi Jinping looks like Winnie the Pooh?"
                                                                                          ),
                                                                                          description: String(
                                                                                            [
                                                                                              "A) Yes",
                                                                                              "\n",
                                                                                              "B) No",
                                                                                              "\n",
                                                                                              "C) False",
                                                                                              "\n",
                                                                                              "D) Maybe",
                                                                                            ].join("")
                                                                                          ),
                                                                                          thumbnail: {
                                                                                            url: String(
                                                                                              "https://cdn.discordapp.com/attachments/916701043738423336/965632653032308736/SocialCredits.png"
                                                                                            ),
                                                                                          },
                                                                                        },
                                                                                      ],
                                                                                      components: [
                                                                                        new MessageActionRow().addComponents(
                                                                                          new MessageButton()
                                                                                            .setCustomId("q10_a")
                                                                                            .setLabel("A")
                                                                                            .setStyle("PRIMARY"),
                                                                                          new MessageButton()
                                                                                            .setCustomId("q10_b")
                                                                                            .setLabel("B")
                                                                                            .setStyle("PRIMARY"),
                                                                                          new MessageButton()
                                                                                            .setCustomId("q10_c")
                                                                                            .setLabel("C")
                                                                                            .setStyle("PRIMARY"),
                                                                                          new MessageButton()
                                                                                            .setCustomId("q10_d")
                                                                                            .setLabel("D")
                                                                                            .setStyle("PRIMARY")
                                                                                        ),
                                                                                      ],
                                                                                    })
                                                                                    .then(async (m) => {
                                                                                      let collector =
                                                                                        m.createMessageComponentCollector({
                                                                                          filter: (i) =>
                                                                                            i.user.id === s4dmessage.author.id,
                                                                                          time: Number(60000) * 1000,
                                                                                        });
                                                                                      collector.on("collect", async (i) => {
                                                                                        if (
                                                                                          i.customId == "q10_b" ||
                                                                                          i.customId == "q10_c"
                                                                                        ) {
                                                                                          s4d.database.add(
                                                                                            String(
                                                                                              [
                                                                                                (s4dmessage.guild || {}).id,
                                                                                                "-",
                                                                                                s4dmessage.author,
                                                                                                "-socialcredits",
                                                                                              ].join("")
                                                                                            ),
                                                                                            parseInt(100000)
                                                                                          );
                                                                                          await i
                                                                                            .update({
                                                                                              embeds: [
                                                                                                {
                                                                                                  color: String("#33cc00"),
                                                                                                  title:
                                                                                                    String(
                                                                                                      "This is the end of the test!"
                                                                                                    ),
                                                                                                  description:
                                                                                                    String(
                                                                                                      "You got +100000 Social credits"
                                                                                                    ),
                                                                                                  image: {
                                                                                                    url: String(
                                                                                                      "https://cdn.discordapp.com/attachments/916701704706220033/981851948338798603/unknown.png"
                                                                                                    ),
                                                                                                  },
                                                                                                  footer: {
                                                                                                    text: String(
                                                                                                      "10/10 questions, amazing!"
                                                                                                    ),
                                                                                                    icon_url: String(),
                                                                                                  },
                                                                                                },
                                                                                              ],
                                                                                              components: [
                                                                                                new MessageActionRow().addComponents(
                                                                                                  new MessageButton()
                                                                                                    .setCustomId("q10_a")
                                                                                                    .setLabel("A")
                                                                                                    .setStyle("SECONDARY"),
                                                                                                  new MessageButton()
                                                                                                    .setCustomId("q10_b")
                                                                                                    .setLabel("B")
                                                                                                    .setStyle("SUCCESS"),
                                                                                                  new MessageButton()
                                                                                                    .setCustomId("q10_c")
                                                                                                    .setLabel("C")
                                                                                                    .setStyle("SUCCESS"),
                                                                                                  new MessageButton()
                                                                                                    .setCustomId("q10_d")
                                                                                                    .setLabel("D")
                                                                                                    .setStyle("SECONDARY")
                                                                                                ),
                                                                                              ],
                                                                                            })
                                                                                            .then(async (m) => {
                                                                                              return;
                                                                                            });
                                                                                        } else if (
                                                                                          i.customId == "q10_a" ||
                                                                                          i.customId == "q10_d"
                                                                                        ) {
                                                                                          s4d.database.subtract(
                                                                                            String(
                                                                                              [
                                                                                                (s4dmessage.guild || {}).id,
                                                                                                "-",
                                                                                                s4dmessage.author,
                                                                                                "-socialcredits",
                                                                                              ].join("")
                                                                                            ),
                                                                                            parseInt(999999)
                                                                                          );
                                                                                          await i
                                                                                            .update({
                                                                                              embeds: [
                                                                                                {
                                                                                                  color: String("#ff0000"),
                                                                                                  title: String(
                                                                                                    "YOU LOST -999.999 SOCIAL CREDITS"
                                                                                                  ),
                                                                                                  thumbnail: {
                                                                                                    url: String(
                                                                                                      "https://cdn.discordapp.com/attachments/916701043738423336/965635546716184676/unknown.png"
                                                                                                    ),
                                                                                                  },
                                                                                                  image: {
                                                                                                    url: String(
                                                                                                      "https://cdn.discordapp.com/attachments/916701043738423336/965638673225887744/the-rock-the-rock-sus.gif"
                                                                                                    ),
                                                                                                  },
                                                                                                },
                                                                                              ],
                                                                                              components: [
                                                                                                new MessageActionRow().addComponents(
                                                                                                  new MessageButton()
                                                                                                    .setCustomId("q10_a")
                                                                                                    .setLabel("A")
                                                                                                    .setStyle("DANGER"),
                                                                                                  new MessageButton()
                                                                                                    .setCustomId("q10_b")
                                                                                                    .setLabel("B")
                                                                                                    .setStyle("SUCCESS"),
                                                                                                  new MessageButton()
                                                                                                    .setCustomId("q10_c")
                                                                                                    .setLabel("C")
                                                                                                    .setStyle("SUCCESS"),
                                                                                                  new MessageButton()
                                                                                                    .setCustomId("q10_d")
                                                                                                    .setLabel("D")
                                                                                                    .setStyle("DANGER")
                                                                                                ),
                                                                                              ],
                                                                                            })
                                                                                            .then(async (m) => {
                                                                                              return;
                                                                                            });
                                                                                        }
                                                                                      });
                                                                                    });
                                                                                } else if (
                                                                                  i.customId == "q10_a" ||
                                                                                  i.customId == "q10_d"
                                                                                ) {
                                                                                  s4d.database.subtract(
                                                                                    String(
                                                                                      [
                                                                                        (s4dmessage.guild || {}).id,
                                                                                        "-",
                                                                                        s4dmessage.author,
                                                                                        "-socialcredits",
                                                                                      ].join("")
                                                                                    ),
                                                                                    parseInt(999999)
                                                                                  );
                                                                                  await i
                                                                                    .update({
                                                                                      embeds: [
                                                                                        {
                                                                                          color: String("#ff0000"),
                                                                                          title: String(
                                                                                            "YOU LOST -999.999 SOCIAL CREDITS"
                                                                                          ),
                                                                                          thumbnail: {
                                                                                            url: String(
                                                                                              "https://cdn.discordapp.com/attachments/916701043738423336/965635546716184676/unknown.png"
                                                                                            ),
                                                                                          },
                                                                                          image: {
                                                                                            url: String(
                                                                                              "https://cdn.discordapp.com/attachments/916701043738423336/965638673225887744/the-rock-the-rock-sus.gif"
                                                                                            ),
                                                                                          },
                                                                                        },
                                                                                      ],
                                                                                      components: [
                                                                                        new MessageActionRow().addComponents(
                                                                                          new MessageButton()
                                                                                            .setCustomId("q10_a")
                                                                                            .setLabel("A")
                                                                                            .setStyle("DANGER"),
                                                                                          new MessageButton()
                                                                                            .setCustomId("q10_b")
                                                                                            .setLabel("B")
                                                                                            .setStyle("SUCCESS"),
                                                                                          new MessageButton()
                                                                                            .setCustomId("q10_c")
                                                                                            .setLabel("C")
                                                                                            .setStyle("SUCCESS"),
                                                                                          new MessageButton()
                                                                                            .setCustomId("q10_d")
                                                                                            .setLabel("D")
                                                                                            .setStyle("DANGER")
                                                                                        ),
                                                                                      ],
                                                                                    })
                                                                                    .then(async (m) => {
                                                                                      return;
                                                                                    });
                                                                                }
                                                                              });
                                                                            });
                                                                        } else if (
                                                                          i.customId == "q8_a" ||
                                                                          i.customId == "q8_b" ||
                                                                          i.customId == "q8_d"
                                                                        ) {
                                                                          s4d.database.subtract(
                                                                            String(
                                                                              [
                                                                                (s4dmessage.guild || {}).id,
                                                                                "-",
                                                                                s4dmessage.author,
                                                                                "-socialcredits",
                                                                              ].join("")
                                                                            ),
                                                                            parseInt(999999)
                                                                          );
                                                                          await i
                                                                            .update({
                                                                              embeds: [
                                                                                {
                                                                                  color: String("#ff0000"),
                                                                                  title: String(
                                                                                    "YOU LOST -999.999 SOCIAL CREDITS"
                                                                                  ),
                                                                                  thumbnail: {
                                                                                    url: String(
                                                                                      "https://cdn.discordapp.com/attachments/916701043738423336/965635546716184676/unknown.png"
                                                                                    ),
                                                                                  },
                                                                                  image: {
                                                                                    url: String(
                                                                                      "https://cdn.discordapp.com/attachments/916701043738423336/965638673225887744/the-rock-the-rock-sus.gif"
                                                                                    ),
                                                                                  },
                                                                                },
                                                                              ],
                                                                              components: [
                                                                                new MessageActionRow().addComponents(
                                                                                  new MessageButton()
                                                                                    .setCustomId("q8_a")
                                                                                    .setLabel("A")
                                                                                    .setStyle("DANGER"),
                                                                                  new MessageButton()
                                                                                    .setCustomId("q8_b")
                                                                                    .setLabel("B")
                                                                                    .setStyle("DANGER"),
                                                                                  new MessageButton()
                                                                                    .setCustomId("q8_c")
                                                                                    .setLabel("C")
                                                                                    .setStyle("SUCCESS"),
                                                                                  new MessageButton()
                                                                                    .setCustomId("q8_d")
                                                                                    .setLabel("D")
                                                                                    .setStyle("DANGER")
                                                                                ),
                                                                              ],
                                                                            })
                                                                            .then(async (m) => {
                                                                              return;
                                                                            });
                                                                        }
                                                                      });
                                                                    });
                                                                } else if (
                                                                  i.customId == "q7_a" ||
                                                                  i.customId == "q7_b" ||
                                                                  i.customId == "q7_c"
                                                                ) {
                                                                  s4d.database.subtract(
                                                                    String(
                                                                      [
                                                                        (s4dmessage.guild || {}).id,
                                                                        "-",
                                                                        s4dmessage.author,
                                                                        "-socialcredits",
                                                                      ].join("")
                                                                    ),
                                                                    parseInt(999999)
                                                                  );
                                                                  await i
                                                                    .update({
                                                                      embeds: [
                                                                        {
                                                                          color: String("#ff0000"),
                                                                          title: String("YOU LOST -999.999 SOCIAL CREDITS"),
                                                                          thumbnail: {
                                                                            url: String(
                                                                              "https://cdn.discordapp.com/attachments/916701043738423336/965635546716184676/unknown.png"
                                                                            ),
                                                                          },
                                                                          image: {
                                                                            url: String(
                                                                              "https://cdn.discordapp.com/attachments/916701043738423336/965638673225887744/the-rock-the-rock-sus.gif"
                                                                            ),
                                                                          },
                                                                        },
                                                                      ],
                                                                      components: [
                                                                        new MessageActionRow().addComponents(
                                                                          new MessageButton()
                                                                            .setCustomId("q7_a")
                                                                            .setLabel("A")
                                                                            .setStyle("DANGER"),
                                                                          new MessageButton()
                                                                            .setCustomId("q7_b")
                                                                            .setLabel("B")
                                                                            .setStyle("DANGER"),
                                                                          new MessageButton()
                                                                            .setCustomId("q7_c")
                                                                            .setLabel("C")
                                                                            .setStyle("SUCCESS"),
                                                                          new MessageButton()
                                                                            .setCustomId("q7_d")
                                                                            .setLabel("D")
                                                                            .setStyle("DANGER")
                                                                        ),
                                                                      ],
                                                                    })
                                                                    .then(async (m) => {
                                                                      return;
                                                                    });
                                                                }
                                                              });
                                                            });
                                                        } else if (
                                                          i.customId == "q6_a" ||
                                                          i.customId == "q6_b" ||
                                                          i.customId == "q6_c"
                                                        ) {
                                                          s4d.database.subtract(
                                                            String(
                                                              [
                                                                (s4dmessage.guild || {}).id,
                                                                "-",
                                                                s4dmessage.author,
                                                                "-socialcredits",
                                                              ].join("")
                                                            ),
                                                            parseInt(999999)
                                                          );
                                                          await i
                                                            .update({
                                                              embeds: [
                                                                {
                                                                  color: String("#ff0000"),
                                                                  title: String("YOU LOST -999.999 SOCIAL CREDITS"),
                                                                  thumbnail: {
                                                                    url: String(
                                                                      "https://cdn.discordapp.com/attachments/916701043738423336/965635546716184676/unknown.png"
                                                                    ),
                                                                  },
                                                                  image: {
                                                                    url: String(
                                                                      "https://cdn.discordapp.com/attachments/916701043738423336/965638673225887744/the-rock-the-rock-sus.gif"
                                                                    ),
                                                                  },
                                                                },
                                                              ],
                                                              components: [
                                                                new MessageActionRow().addComponents(
                                                                  new MessageButton()
                                                                    .setCustomId("q6_a")
                                                                    .setLabel("A")
                                                                    .setStyle("DANGER"),
                                                                  new MessageButton()
                                                                    .setCustomId("q6_b")
                                                                    .setLabel("B")
                                                                    .setStyle("DANGER"),
                                                                  new MessageButton()
                                                                    .setCustomId("q6_c")
                                                                    .setLabel("C")
                                                                    .setStyle("DANGER"),
                                                                  new MessageButton()
                                                                    .setCustomId("q6_d")
                                                                    .setLabel("D")
                                                                    .setStyle("SUCCESS")
                                                                ),
                                                              ],
                                                            })
                                                            .then(async (m) => {
                                                              return;
                                                            });
                                                        }
                                                      });
                                                    });
                                                } else if (i.customId == "q5_c") {
                                                  s4d.database.subtract(
                                                    String(
                                                      [
                                                        (s4dmessage.guild || {}).id,
                                                        "-",
                                                        s4dmessage.author,
                                                        "-socialcredits",
                                                      ].join("")
                                                    ),
                                                    parseInt(999999)
                                                  );
                                                  await i
                                                    .update({
                                                      embeds: [
                                                        {
                                                          color: String("#ff0000"),
                                                          title: String("YOU LOST -999.999 SOCIAL CREDITS"),
                                                          thumbnail: {
                                                            url: String(
                                                              "https://cdn.discordapp.com/attachments/916701043738423336/965635546716184676/unknown.png"
                                                            ),
                                                          },
                                                          image: {
                                                            url: String(
                                                              "https://cdn.discordapp.com/attachments/916701043738423336/965638673225887744/the-rock-the-rock-sus.gif"
                                                            ),
                                                          },
                                                        },
                                                      ],
                                                      components: [
                                                        new MessageActionRow().addComponents(
                                                          new MessageButton()
                                                            .setCustomId("q5_a")
                                                            .setLabel("A")
                                                            .setStyle("SUCCESS"),
                                                          new MessageButton()
                                                            .setCustomId("q5_b")
                                                            .setLabel("B")
                                                            .setStyle("SUCCESS"),
                                                          new MessageButton()
                                                            .setCustomId("q5_c")
                                                            .setLabel("C")
                                                            .setStyle("SUCCESS"),
                                                          new MessageButton()
                                                            .setCustomId("q5_d")
                                                            .setLabel("D")
                                                            .setStyle("DANGER")
                                                        ),
                                                      ],
                                                    })
                                                    .then(async (m) => {
                                                      return;
                                                    });
                                                }
                                              });
                                            });
                                        } else if (i.customId == "q4_b") {
                                          s4d.database.subtract(
                                            String(
                                              [(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-socialcredits"].join("")
                                            ),
                                            parseInt(999999)
                                          );
                                          await i
                                            .update({
                                              embeds: [
                                                {
                                                  color: String("#ff0000"),
                                                  title: String("YOU LOST -999.999 SOCIAL CREDITS"),
                                                  thumbnail: {
                                                    url: String(
                                                      "https://cdn.discordapp.com/attachments/916701043738423336/965635546716184676/unknown.png"
                                                    ),
                                                  },
                                                  image: {
                                                    url: String(
                                                      "https://cdn.discordapp.com/attachments/916701043738423336/965638673225887744/the-rock-the-rock-sus.gif"
                                                    ),
                                                  },
                                                },
                                              ],
                                              components: [
                                                new MessageActionRow().addComponents(
                                                  new MessageButton().setCustomId("q4_a").setLabel("A").setStyle("SUCCESS"),
                                                  new MessageButton().setCustomId("q4_b").setLabel("B").setStyle("DANGER"),
                                                  new MessageButton().setCustomId("q4_c").setLabel("C").setStyle("SUCCESS"),
                                                  new MessageButton().setCustomId("q4_d").setLabel("D").setStyle("SUCCESS")
                                                ),
                                              ],
                                            })
                                            .then(async (m) => {
                                              return;
                                            });
                                        }
                                      });
                                    });
                                } else if (i.customId == "q3_b" || i.customId == "q3_c" || i.customId == "q3_d") {
                                  s4d.database.subtract(
                                    String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-socialcredits"].join("")),
                                    parseInt(999999)
                                  );
                                  await i
                                    .update({
                                      embeds: [
                                        {
                                          color: String("#ff0000"),
                                          title: String("YOU LOST -999.999 SOCIAL CREDITS"),
                                          thumbnail: {
                                            url: String(
                                              "https://cdn.discordapp.com/attachments/916701043738423336/965635546716184676/unknown.png"
                                            ),
                                          },
                                          image: {
                                            url: String(
                                              "https://cdn.discordapp.com/attachments/916701043738423336/965638673225887744/the-rock-the-rock-sus.gif"
                                            ),
                                          },
                                        },
                                      ],
                                      components: [
                                        new MessageActionRow().addComponents(
                                          new MessageButton().setCustomId("q3_a").setLabel("A").setStyle("SUCCESS"),
                                          new MessageButton().setCustomId("q3_b").setLabel("B").setStyle("DANGER"),
                                          new MessageButton().setCustomId("q3_c").setLabel("C").setStyle("DANGER"),
                                          new MessageButton().setCustomId("q3_d").setLabel("D").setStyle("DANGER")
                                        ),
                                      ],
                                    })
                                    .then(async (m) => {
                                      return;
                                    });
                                }
                              });
                            });
                        } else if (i.customId == "q2_a" || i.customId == "q2_c" || i.customId == "q2_d") {
                          s4d.database.subtract(
                            String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-socialcredits"].join("")),
                            parseInt(999999)
                          );
                          await i
                            .update({
                              embeds: [
                                {
                                  color: String("#ff0000"),
                                  title: String("YOU LOST -999.999 SOCIAL CREDITS"),
                                  thumbnail: {
                                    url: String(
                                      "https://cdn.discordapp.com/attachments/916701043738423336/965635546716184676/unknown.png"
                                    ),
                                  },
                                  image: {
                                    url: String(
                                      "https://cdn.discordapp.com/attachments/916701043738423336/965638673225887744/the-rock-the-rock-sus.gif"
                                    ),
                                  },
                                },
                              ],
                              components: [
                                new MessageActionRow().addComponents(
                                  new MessageButton().setCustomId("q2_a").setLabel("A").setStyle("DANGER"),
                                  new MessageButton().setCustomId("q2_b").setLabel("B").setStyle("SUCCESS"),
                                  new MessageButton().setCustomId("q2_c").setLabel("C").setStyle("DANGER"),
                                  new MessageButton().setCustomId("q2_d").setLabel("D").setStyle("DANGER")
                                ),
                              ],
                            })
                            .then(async (m) => {
                              return;
                            });
                        }
                      });
                    });
                } else if (i.customId == "q1_a" || i.customId == "q1_c" || i.customId == "q1_b") {
                  s4d.database.subtract(
                    String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-socialcredits"].join("")),
                    parseInt(999999)
                  );
                  await i
                    .update({
                      embeds: [
                        {
                          color: String("#ff0000"),
                          title: String("YOU LOST -999.999 SOCIAL CREDITS"),
                          thumbnail: {
                            url: String(
                              "https://cdn.discordapp.com/attachments/916701043738423336/965635546716184676/unknown.png"
                            ),
                          },
                          image: {
                            url: String(
                              "https://cdn.discordapp.com/attachments/916701043738423336/965638673225887744/the-rock-the-rock-sus.gif"
                            ),
                          },
                        },
                      ],
                      components: [
                        new MessageActionRow().addComponents(
                          new MessageButton().setCustomId("q1_a").setLabel("A").setStyle("DANGER"),
                          new MessageButton().setCustomId("q1_b").setLabel("B").setStyle("DANGER"),
                          new MessageButton().setCustomId("q1_c").setLabel("C").setStyle("DANGER"),
                          new MessageButton().setCustomId("q1_d").setLabel("D").setStyle("SUCCESS")
                        ),
                      ],
                    })
                    .then(async (m) => {
                      return;
                    });
                }
              });
            }
          });
        });
      return;
    }

    /*
    D!SCREDITS
    */
    if (s4dmessage.content.toUpperCase() == "D!SCREDITS") {
      if (!s4d.database.has(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-socialcredits"].join("")))) {
        s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-socialcredits"].join("")), 0);
      }
      s4dmessage.reply({
        embeds: [
          {
            color: String("#33cc00"),
            title: String(String(s4dmessage.author.username) + "'s Social credits"),
            description: String(
              [
                "You have: **",
                s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-socialcredits"].join(""))),
                "** Social credits",
              ].join("")
            ),
            thumbnail: {
              url: String(
                s4dmessage.author.displayAvatarURL({
                  format: "png",
                })
              ),
            },
          },
        ],
        allowedMentions: {
          repliedUser: true,
        },
      });
      return;
    } else if ((s4dmessage.content.toUpperCase() || "").startsWith("D!SCREDITS" || "")) {
      if (
        !s4d.database.has(
          String([(s4dmessage.guild || {}).id, "-", s4dmessage.mentions.members.first(), "-socialcredits"].join(""))
        )
      ) {
        s4d.database.set(
          String([(s4dmessage.guild || {}).id, "-", s4dmessage.mentions.members.first(), "-socialcredits"].join("")),
          0
        );
      }
      try {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#33cc00"),
              title: String(
                String(s4d.client.users.cache.get(String(s4dmessage.mentions.members.first().id)).username) +
                  "'s Social credits"
              ),
              description: String(
                [
                  "You have: **",
                  s4d.database.get(
                    String([(s4dmessage.guild || {}).id, "-", s4dmessage.mentions.members.first(), "-socialcredits"].join(""))
                  ),
                  "** Social credits",
                ].join("")
              ),
              thumbnail: {
                url: String(
                  s4dmessage.mentions.members.first().displayAvatarURL({
                    format: "png",
                  })
                ),
              },
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      } catch (err) {
        s4dmessage.reply({
          content: String("Can you please mention an user?"),
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
    }

    /*
    Social credits keyworks: first positive, second negative
    */
    if (
      [
        "china is on top",
        "china is best",
        "china is good",
        "china nice",
        "china great",
        "glory to mao",
        "nothing happened on 1989",
        "china is cool",
        "i love china",
        "china is a country",
        "taiwan is not a country",
        "china best",
        "china has the best leader of all the world",
        "long live chairman mao zedong",
        "long live the great glorious and correct communist party of chin",
        "china has the best economy in the world",
        "no to capitalism",
        "taiwan is a province of china",
        "china has the best military force ever",
        "china is rich than america",
        "the great wall of china is the strongest wall ever",
        "forward to the victory of communism",
        "land bread peace",
        "the workers have nothing to lose but their chains",
        "the people and party are one",
        "labor party is always watching and will punish any traitors",
        "workers united will never be defeated",
        "dare to think dare to act",
        "let 100 flowers bloom",
        "have fewer children raise more pigs",
        "you show me a capitalist and i'll show you a bloodsucker",
        "the revolution introduced me to art and in turn art introduced me to the revolution",
        "uniting closely around the central committee of the ccp with comrade xi jinping as the core",
        "making overall strategic planning for the great rejuvenation of the chinese nation and great changes such as the world has not seen in a century",
        "revolution is solution",
        "build a homeland you will strengthen peace",
        "long live our working class",
        "all our progress every slightly significant achievement we have made in socialist construction has been the expression and result of our domestic class struggle",
        "we the chinese nation have the spirit to fight the enemy to the last drop of our blood the determination to recover our lost territory by our own efforts and the ability to stand on our own feet in the family of nations",
        "communism is not love communism is a hammer which we use to crush the enemy",
        "the atom bomb is a paper tiger which the united states reactionaries use to scare people It looks terrible, but in fact it isn't",
        "weapons are an important factor in war but not the decisive one it is man and not materials that counts",
        "political power grows out of the barrel of a gun",
        "we shall heal our wounds collect our dead and continue fighting",
        "let a hundred flowers bloom let a hundred schools of thought contend",
        "classes struggle some classes triumph others are eliminated such is history such is the history of civilization for thousands of years",
        "all reactionaries are paper tigers",
        "war can only be abolished through war and in order to get rid of the gun it is necessary to take up the gun",
        "https://youtu.be/OjNpRbNdR7E",
        "the people and the people alone are the motive force in the making of world history",
        "to read too many books is harmful",
        "history is a symptom of our disease",
        "the communist party must control the guns",
        "historical experience is written in iron and blood",
        "Let the ruling classes tremble at a communist revolution",
        "glory to china",
        "glory to mao zedong",
        "red sun in the sky",
        "china best country",
        "china is the best country",
        "glory to xi jinping",
        "glory to communism",
        "long live to china",
        "https://youtu.be/5tCMI0uKbBE",
        "john xina",
        "china on top",
        "china is strong",
        "xi is supreme leader",
        "taiwan is east china",
        "nothing happend in 1989",
        "communism is the best",
        "nothing happened on tiananmen square",
        "bing chilling",
        "china good",
        "china is the best",
      ].includes(s4dmessage.content.toLowerCase())
    ) {
      s4dmessage
        .reply({
          embeds: [
            new MessageEmbed()
              .setTitle(String("Nice!"))
              .setColor(String("#33cc00"))
              .setDescription(String("You got **+10000** Social credits!"))
              .setThumbnail(String("https://cdn.discordapp.com/attachments/916701043738423336/965635911553523822/Sc.png")),
          ],
          allowedMentions: {
            repliedUser: true,
          },
        })
        .then(async (s4dfrost_real_reply) => {
          if (!s4d.database.has(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-socialcredits"].join("")))) {
            s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-socialcredits"].join("")), 0);
          }
          s4d.database.add(
            String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-socialcredits"].join("")),
            parseInt(10000)
          );
          return;
        });
    }
    if (
      [
        "i hate china",
        "china sucks",
        "death to china",
        "xi looks like winnie the pooh",
        "taiwan is best",
        "china fake",
        "china unreal",
        "taiwan is best",
        "xi fake",
        "taiwan is a country",
        "china suck",
        "better red than dead",
        "a good communist is a dead communist",
        "the red menace is real",
        "down with russian bandits opposing communism",
        "eliminate zhu and mao kill traitors",
        "complete the revolution obey the leader long live republic of taiwan",
        "you bring a lot of trouble to the town and then you leave that's part of your communistic game",
        "end war end poverty end communism",
        "we are the shield of our country against communism",
        "make the grade join the anti-communist crusade",
        "pro-america anti-communist",
        "communism killed 100 million people never forget",
        "the tianmen square massacre should never be forgotten",
        "protestants unite against communism",
        "down with the red tyranny",
        "we uphold republic of china not commie culture",
        "let anti-communists speak",
        "every communists is a fink",
        "stop communism it's everyone's job",
        "communism everyone's mortal enemy",
        "everyone unite against communist tyrants",
        "communists aka the scums of humanity",
        "three fascists down now one communist left and it's stalin",
        "there is no god in communism",
        "there is no peace in communism",
        "communism kills like cancer",
        "communists return back to god and peace",
        "chiang kai shek unified china only to be betrayed by communists tyrants",
        "red dictators no more",
        "we don't want communism we want bread and peace",
        "without communism there will be no more tyrants in this world",
        "communism the end of your worthless chapter",
        "the red iceberg have melted fast than antarctica itself",
        "let anti-communists voice their words",
        "stop racism and communism",
        "a witness against brutality end communism",
        "there is no such thing as peace in communism",
        "communist violence shall not be tolerated",
        "communist are not welcome here we dont want you get out",
        "commies get out of USSR paradies",
        "let's liberate the country of the reds",
        "there is no such thing as love in communism",
        "communism is a hateful thing and a menace to peace and organized government",
        "Communism is such a terrible word",
        "let's not talk about communism communism was just an idea just pie in the sky",
        "communism is in conflict with human nature",
        "communism is the corruption of a dream of justice",
        "communism is bad",
        "china is bad",
        "xi jinping is stupid",
        "Fight for Taiwan",
        "glory to taiwan",
        "taiwan best",
        "taiwan on top",
        "taiwan is better",
        "taiwan is strong",
        "tiananmen square is real",
        "man fuck west china taiwan best ",
        "china bad",
        "taiwan good",
        "fuck china",
        "free tibet",
        "taiwan is the best",
        "free hong kong",
      ].includes(s4dmessage.content.toLowerCase())
    ) {
      s4dmessage
        .reply({
          embeds: [
            new MessageEmbed()
              .setTitle(String("NO!"))
              .setColor(String("#ff0000"))
              .setDescription(String("You lost **-99999** Social credits!"))
              .setThumbnail(String("https://cdn.discordapp.com/attachments/916701043738423336/965635546716184676/unknown.png")),
          ],
          allowedMentions: {
            repliedUser: true,
          },
        })
        .then(async (s4dfrost_real_reply) => {
          if (!s4d.database.has(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-socialcredits"].join("")))) {
            s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-socialcredits"].join("")), 0);
          }
          s4d.database.subtract(
            String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-socialcredits"].join("")),
            parseInt(99999)
          );
          return;
        });
    }

    /*
    D!CANNY
    */
    if ((s4dmessage.content.toUpperCase() || "").startsWith("D!CANNY" || "")) {
      if (!s4d.database.has(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-cannytimer"].join("")))) {
        s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-cannytimer"].join("")), 0);
      }
      if (
        !(
          new Date().getTime() >
          s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-cannytimer"].join(""))) + 300000
        )
      ) {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#000000"),
              description: String(
                [
                  "⏰ Slowdown man, you can be canny again: **<t:",
                  Math.floor(
                    (s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-cannytimer"].join(""))) +
                      300000) /
                      1000
                  ),
                  ":R>**",
                ].join("")
              ),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      cannyCooldown = new Date().getTime();
      s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-cannytimer"].join("")), cannyCooldown);
      s4dmessage.reply(String("Say something canny (First stage)")).then(() => {
        s4dmessage.channel
          .awaitMessages({
            filter: (m) => m.author.id === s4dmessage.author.id,
            time: 1 * 60 * 1000,
            max: 1,
          })
          .then(async (collected) => {
            s4d.reply = collected.first().content;
            s4d.message = collected.first();
            s4dmessage.reply({
              embeds: [
                {
                  color: String("#ffcc66"),
                  title: String(s4d.reply),
                  image: {
                    url: String("https://cdn.discordapp.com/attachments/878993780798279761/933103042151186512/CannyMeme-1.png"),
                  },
                },
              ],
              allowedMentions: {
                repliedUser: true,
              },
            });
            await delay(Number(1) * 1000);
            s4dmessage.reply(String("Say something canny (Stage 2/10)")).then(() => {
              s4dmessage.channel
                .awaitMessages({
                  filter: (m) => m.author.id === s4dmessage.author.id,
                  time: 1 * 60 * 1000,
                  max: 1,
                })
                .then(async (collected) => {
                  s4d.reply = collected.first().content;
                  s4d.message = collected.first();
                  s4dmessage.reply({
                    embeds: [
                      {
                        color: String("#ffcc66"),
                        title: String(s4d.reply),
                        image: {
                          url: String(
                            "https://cdn.discordapp.com/attachments/878993780798279761/933103042490957894/CannyMeme-2.png"
                          ),
                        },
                      },
                    ],
                    allowedMentions: {
                      repliedUser: true,
                    },
                  });
                  await delay(Number(1) * 1000);
                  s4dmessage.reply(String("Say something canny (Stage 3/10)")).then(() => {
                    s4dmessage.channel
                      .awaitMessages({
                        filter: (m) => m.author.id === s4dmessage.author.id,
                        time: 1 * 60 * 1000,
                        max: 1,
                      })
                      .then(async (collected) => {
                        s4d.reply = collected.first().content;
                        s4d.message = collected.first();
                        s4dmessage.reply({
                          embeds: [
                            {
                              color: String("#ffcc66"),
                              title: String(s4d.reply),
                              image: {
                                url: String(
                                  "https://cdn.discordapp.com/attachments/878993780798279761/933103043027808327/CannyMeme-3.png"
                                ),
                              },
                            },
                          ],
                          allowedMentions: {
                            repliedUser: true,
                          },
                        });
                        await delay(Number(1) * 1000);
                        s4dmessage.reply(String("Say something canny (Stage 4/10)")).then(() => {
                          s4dmessage.channel
                            .awaitMessages({
                              filter: (m) => m.author.id === s4dmessage.author.id,
                              time: 1 * 60 * 1000,
                              max: 1,
                            })
                            .then(async (collected) => {
                              s4d.reply = collected.first().content;
                              s4d.message = collected.first();
                              s4dmessage.reply({
                                embeds: [
                                  {
                                    color: String("#ffcc66"),
                                    title: String(s4d.reply),
                                    image: {
                                      url: String(
                                        "https://cdn.discordapp.com/attachments/878993780798279761/933103043552112680/CannyMeme-4.png"
                                      ),
                                    },
                                  },
                                ],
                                allowedMentions: {
                                  repliedUser: true,
                                },
                              });
                              await delay(Number(1) * 1000);
                              s4dmessage.reply(String("Say something canny (Stage 5/10)")).then(() => {
                                s4dmessage.channel
                                  .awaitMessages({
                                    filter: (m) => m.author.id === s4dmessage.author.id,
                                    time: 1 * 60 * 1000,
                                    max: 1,
                                  })
                                  .then(async (collected) => {
                                    s4d.reply = collected.first().content;
                                    s4d.message = collected.first();
                                    s4dmessage.reply({
                                      embeds: [
                                        {
                                          color: String("#ffcc66"),
                                          title: String(s4d.reply),
                                          image: {
                                            url: String(
                                              "https://cdn.discordapp.com/attachments/878993780798279761/933103044088954920/CannyMeme-5.png"
                                            ),
                                          },
                                        },
                                      ],
                                      allowedMentions: {
                                        repliedUser: true,
                                      },
                                    });
                                    await delay(Number(1) * 1000);
                                    s4dmessage.reply(String("Say something canny (Stage 6/10)")).then(() => {
                                      s4dmessage.channel
                                        .awaitMessages({
                                          filter: (m) => m.author.id === s4dmessage.author.id,
                                          time: 1 * 60 * 1000,
                                          max: 1,
                                        })
                                        .then(async (collected) => {
                                          s4d.reply = collected.first().content;
                                          s4d.message = collected.first();
                                          s4dmessage.reply({
                                            embeds: [
                                              {
                                                color: String("#ffcc66"),
                                                title: String(s4d.reply),
                                                image: {
                                                  url: String(
                                                    "https://cdn.discordapp.com/attachments/878993780798279761/933103044550340638/CannyMeme-6.png"
                                                  ),
                                                },
                                              },
                                            ],
                                            allowedMentions: {
                                              repliedUser: true,
                                            },
                                          });
                                          await delay(Number(1) * 1000);
                                          s4dmessage.reply(String("Say something canny (Stage 7/10)")).then(() => {
                                            s4dmessage.channel
                                              .awaitMessages({
                                                filter: (m) => m.author.id === s4dmessage.author.id,
                                                time: 1 * 60 * 1000,
                                                max: 1,
                                              })
                                              .then(async (collected) => {
                                                s4d.reply = collected.first().content;
                                                s4d.message = collected.first();
                                                s4dmessage.reply({
                                                  embeds: [
                                                    {
                                                      color: String("#ffcc66"),
                                                      title: String(s4d.reply),
                                                      image: {
                                                        url: String(
                                                          "https://cdn.discordapp.com/attachments/878993780798279761/933103045045276712/CannyMeme-7.png"
                                                        ),
                                                      },
                                                    },
                                                  ],
                                                  allowedMentions: {
                                                    repliedUser: true,
                                                  },
                                                });
                                                await delay(Number(1) * 1000);
                                                s4dmessage.reply(String("Say something canny (Stage 8/10)")).then(() => {
                                                  s4dmessage.channel
                                                    .awaitMessages({
                                                      filter: (m) => m.author.id === s4dmessage.author.id,
                                                      time: 1 * 60 * 1000,
                                                      max: 1,
                                                    })
                                                    .then(async (collected) => {
                                                      s4d.reply = collected.first().content;
                                                      s4d.message = collected.first();
                                                      s4dmessage.reply({
                                                        embeds: [
                                                          {
                                                            color: String("#ffcc66"),
                                                            title: String(s4d.reply),
                                                            image: {
                                                              url: String(
                                                                "https://cdn.discordapp.com/attachments/878993780798279761/933103045519212614/CannyMeme-8.png"
                                                              ),
                                                            },
                                                          },
                                                        ],
                                                        allowedMentions: {
                                                          repliedUser: true,
                                                        },
                                                      });
                                                      await delay(Number(1) * 1000);
                                                      s4dmessage.reply(String("Say something canny (Stage 9/10)")).then(() => {
                                                        s4dmessage.channel
                                                          .awaitMessages({
                                                            filter: (m) => m.author.id === s4dmessage.author.id,
                                                            time: 1 * 60 * 1000,
                                                            max: 1,
                                                          })
                                                          .then(async (collected) => {
                                                            s4d.reply = collected.first().content;
                                                            s4d.message = collected.first();
                                                            s4dmessage.reply({
                                                              embeds: [
                                                                {
                                                                  color: String("#ffcc66"),
                                                                  title: String(s4d.reply),
                                                                  image: {
                                                                    url: String(
                                                                      "https://cdn.discordapp.com/attachments/878993780798279761/933103045808644196/CannyMeme-9.png"
                                                                    ),
                                                                  },
                                                                },
                                                              ],
                                                              allowedMentions: {
                                                                repliedUser: true,
                                                              },
                                                            });
                                                            await delay(Number(1) * 1000);
                                                            s4dmessage
                                                              .reply(String("Say something canny (Last stage)"))
                                                              .then(() => {
                                                                s4dmessage.channel
                                                                  .awaitMessages({
                                                                    filter: (m) => m.author.id === s4dmessage.author.id,
                                                                    time: 1 * 60 * 1000,
                                                                    max: 1,
                                                                  })
                                                                  .then(async (collected) => {
                                                                    s4d.reply = collected.first().content;
                                                                    s4d.message = collected.first();
                                                                    cannyProbs = mathRandomInt(1, 5);
                                                                    if (cannyProbs == 5) {
                                                                      s4dmessage.reply({
                                                                        embeds: [
                                                                          {
                                                                            color: String("#ff0000"),
                                                                            title: String("YOU LOST!"),
                                                                            image: {
                                                                              url: String(
                                                                                "https://cdn.discordapp.com/attachments/878993780798279761/934185981190492170/UncannyMeme10.png"
                                                                              ),
                                                                            },
                                                                          },
                                                                        ],
                                                                        allowedMentions: {
                                                                          repliedUser: true,
                                                                        },
                                                                      });
                                                                      return;
                                                                    } else {
                                                                      s4dmessage.reply({
                                                                        embeds: [
                                                                          {
                                                                            color: String("#33cc00"),
                                                                            title: String(s4d.reply),
                                                                            image: {
                                                                              url: String(
                                                                                "https://cdn.discordapp.com/attachments/878993780798279761/933103046152564786/CannyMeme-10.png"
                                                                              ),
                                                                            },
                                                                          },
                                                                        ],
                                                                        allowedMentions: {
                                                                          repliedUser: true,
                                                                        },
                                                                      });
                                                                      return;
                                                                    }

                                                                    s4d.reply = null;
                                                                  })
                                                                  .catch(async (e) => {
                                                                    console.error(e);
                                                                    s4dmessage.channel.send({
                                                                      content: String("You didn't want to continue :("),
                                                                    });
                                                                    return;
                                                                  });
                                                              });

                                                            s4d.reply = null;
                                                          })
                                                          .catch(async (e) => {
                                                            console.error(e);
                                                            s4dmessage.channel.send({
                                                              content: String("You didn't want to continue :("),
                                                            });
                                                            return;
                                                          });
                                                      });

                                                      s4d.reply = null;
                                                    })
                                                    .catch(async (e) => {
                                                      console.error(e);
                                                      s4dmessage.channel.send({
                                                        content: String("You didn't want to continue :("),
                                                      });
                                                      return;
                                                    });
                                                });

                                                s4d.reply = null;
                                              })
                                              .catch(async (e) => {
                                                console.error(e);
                                                s4dmessage.channel.send({
                                                  content: String("You didn't want to continue :("),
                                                });
                                                return;
                                              });
                                          });

                                          s4d.reply = null;
                                        })
                                        .catch(async (e) => {
                                          console.error(e);
                                          s4dmessage.channel.send({
                                            content: String("You didn't want to continue :("),
                                          });
                                          return;
                                        });
                                    });

                                    s4d.reply = null;
                                  })
                                  .catch(async (e) => {
                                    console.error(e);
                                    s4dmessage.channel.send({
                                      content: String("You didn't want to continue :("),
                                    });
                                    return;
                                  });
                              });

                              s4d.reply = null;
                            })
                            .catch(async (e) => {
                              console.error(e);
                              s4dmessage.channel.send({
                                content: String("You didn't want to continue :("),
                              });
                              return;
                            });
                        });

                        s4d.reply = null;
                      })
                      .catch(async (e) => {
                        console.error(e);
                        s4dmessage.channel.send({
                          content: String("You didn't want to continue :("),
                        });
                        return;
                      });
                  });

                  s4d.reply = null;
                })
                .catch(async (e) => {
                  console.error(e);
                  s4dmessage.channel.send({
                    content: String("You didn't want to continue :("),
                  });
                  return;
                });
            });

            s4d.reply = null;
          })
          .catch(async (e) => {
            console.error(e);
            s4dmessage.channel.send({
              content: String("You didn't want to continue :("),
            });
            return;
          });
      });
      return;
    }

    /*
    D!UNCANNY
    */
    if ((s4dmessage.content.toUpperCase() || "").startsWith("D!UNCANNY" || "")) {
      if (!s4d.database.has(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-uncannytimer"].join("")))) {
        s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-uncannytimer"].join("")), 0);
      }
      if (
        !(
          new Date().getTime() >
          s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-uncannytimer"].join(""))) + 300000
        )
      ) {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#000000"),
              description: String(
                [
                  "⏰ Slowdown man, you can be uncanny again: **<t:",
                  Math.floor(
                    (s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-uncannytimer"].join(""))) +
                      300000) /
                      1000
                  ),
                  ":R>**",
                ].join("")
              ),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      uncannyCooldown = new Date().getTime();
      s4d.database.set(
        String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-uncannytimer"].join("")),
        uncannyCooldown
      );
      s4dmessage.reply(String("Say something uncanny (First stage)")).then(() => {
        s4dmessage.channel
          .awaitMessages({
            filter: (m) => m.author.id === s4dmessage.author.id,
            time: 1 * 60 * 1000,
            max: 1,
          })
          .then(async (collected) => {
            s4d.reply = collected.first().content;
            s4d.message = collected.first();
            s4dmessage.reply({
              embeds: [
                {
                  color: String("#ffcc66"),
                  title: String(s4d.reply),
                  image: {
                    url: String(
                      "https://cdn.discordapp.com/attachments/878993780798279761/934185977835028530/UncannyMeme1.png"
                    ),
                  },
                },
              ],
              allowedMentions: {
                repliedUser: true,
              },
            });
            await delay(Number(1) * 1000);
            s4dmessage.reply(String("Say something uncanny (Stage 2/10)")).then(() => {
              s4dmessage.channel
                .awaitMessages({
                  filter: (m) => m.author.id === s4dmessage.author.id,
                  time: 1 * 60 * 1000,
                  max: 1,
                })
                .then(async (collected) => {
                  s4d.reply = collected.first().content;
                  s4d.message = collected.first();
                  s4dmessage.reply({
                    embeds: [
                      {
                        color: String("#ffcc66"),
                        title: String(s4d.reply),
                        image: {
                          url: String(
                            "https://cdn.discordapp.com/attachments/878993780798279761/934185978204160081/UncannyMeme2.png"
                          ),
                        },
                      },
                    ],
                    allowedMentions: {
                      repliedUser: true,
                    },
                  });
                  await delay(Number(1) * 1000);
                  s4dmessage.reply(String("Say something uncanny (Stage 3/10)")).then(() => {
                    s4dmessage.channel
                      .awaitMessages({
                        filter: (m) => m.author.id === s4dmessage.author.id,
                        time: 1 * 60 * 1000,
                        max: 1,
                      })
                      .then(async (collected) => {
                        s4d.reply = collected.first().content;
                        s4d.message = collected.first();
                        s4dmessage.reply({
                          embeds: [
                            {
                              color: String("#ffcc66"),
                              title: String(s4d.reply),
                              image: {
                                url: String(
                                  "https://cdn.discordapp.com/attachments/878993780798279761/934185978535489567/UncannyMeme3.png"
                                ),
                              },
                            },
                          ],
                          allowedMentions: {
                            repliedUser: true,
                          },
                        });
                        await delay(Number(1) * 1000);
                        s4dmessage.reply(String("Say something uncanny (Stage 4/10)")).then(() => {
                          s4dmessage.channel
                            .awaitMessages({
                              filter: (m) => m.author.id === s4dmessage.author.id,
                              time: 1 * 60 * 1000,
                              max: 1,
                            })
                            .then(async (collected) => {
                              s4d.reply = collected.first().content;
                              s4d.message = collected.first();
                              s4dmessage.reply({
                                embeds: [
                                  {
                                    color: String("#ffcc66"),
                                    title: String(s4d.reply),
                                    image: {
                                      url: String(
                                        "https://cdn.discordapp.com/attachments/878993780798279761/934185978858442762/UncannyMeme4.png"
                                      ),
                                    },
                                  },
                                ],
                                allowedMentions: {
                                  repliedUser: true,
                                },
                              });
                              await delay(Number(1) * 1000);
                              s4dmessage.reply(String("Say something uncanny (Stage 5/10)")).then(() => {
                                s4dmessage.channel
                                  .awaitMessages({
                                    filter: (m) => m.author.id === s4dmessage.author.id,
                                    time: 1 * 60 * 1000,
                                    max: 1,
                                  })
                                  .then(async (collected) => {
                                    s4d.reply = collected.first().content;
                                    s4d.message = collected.first();
                                    s4dmessage.reply({
                                      embeds: [
                                        {
                                          color: String("#ffcc66"),
                                          title: String(s4d.reply),
                                          image: {
                                            url: String(
                                              "https://cdn.discordapp.com/attachments/878993780798279761/934185979470835782/UncannyMeme5.png"
                                            ),
                                          },
                                        },
                                      ],
                                      allowedMentions: {
                                        repliedUser: true,
                                      },
                                    });
                                    await delay(Number(1) * 1000);
                                    s4dmessage.reply(String("Say something uncanny (Stage 6/10)")).then(() => {
                                      s4dmessage.channel
                                        .awaitMessages({
                                          filter: (m) => m.author.id === s4dmessage.author.id,
                                          time: 1 * 60 * 1000,
                                          max: 1,
                                        })
                                        .then(async (collected) => {
                                          s4d.reply = collected.first().content;
                                          s4d.message = collected.first();
                                          s4dmessage.reply({
                                            embeds: [
                                              {
                                                color: String("#ffcc66"),
                                                title: String(s4d.reply),
                                                image: {
                                                  url: String(
                                                    "https://cdn.discordapp.com/attachments/878993780798279761/934185979848306769/UncannyMeme6.png"
                                                  ),
                                                },
                                              },
                                            ],
                                            allowedMentions: {
                                              repliedUser: true,
                                            },
                                          });
                                          await delay(Number(1) * 1000);
                                          s4dmessage.reply(String("Say something uncanny (Stage 7/10)")).then(() => {
                                            s4dmessage.channel
                                              .awaitMessages({
                                                filter: (m) => m.author.id === s4dmessage.author.id,
                                                time: 1 * 60 * 1000,
                                                max: 1,
                                              })
                                              .then(async (collected) => {
                                                s4d.reply = collected.first().content;
                                                s4d.message = collected.first();
                                                s4dmessage.reply({
                                                  embeds: [
                                                    {
                                                      color: String("#ffcc66"),
                                                      title: String(s4d.reply),
                                                      image: {
                                                        url: String(
                                                          "https://cdn.discordapp.com/attachments/878993780798279761/934185980125126666/UncannyMeme7.png"
                                                        ),
                                                      },
                                                    },
                                                  ],
                                                  allowedMentions: {
                                                    repliedUser: true,
                                                  },
                                                });
                                                await delay(Number(1) * 1000);
                                                s4dmessage.reply(String("Say something uncanny (Stage 8/10)")).then(() => {
                                                  s4dmessage.channel
                                                    .awaitMessages({
                                                      filter: (m) => m.author.id === s4dmessage.author.id,
                                                      time: 1 * 60 * 1000,
                                                      max: 1,
                                                    })
                                                    .then(async (collected) => {
                                                      s4d.reply = collected.first().content;
                                                      s4d.message = collected.first();
                                                      s4dmessage.reply({
                                                        embeds: [
                                                          {
                                                            color: String("#ffcc66"),
                                                            title: String(s4d.reply),
                                                            image: {
                                                              url: String(
                                                                "https://cdn.discordapp.com/attachments/878993780798279761/934185980330655804/UncannyMeme8.png"
                                                              ),
                                                            },
                                                          },
                                                        ],
                                                        allowedMentions: {
                                                          repliedUser: true,
                                                        },
                                                      });
                                                      await delay(Number(1) * 1000);
                                                      s4dmessage
                                                        .reply(String("Say something uncanny (Stage 9/10)"))
                                                        .then(() => {
                                                          s4dmessage.channel
                                                            .awaitMessages({
                                                              filter: (m) => m.author.id === s4dmessage.author.id,
                                                              time: 1 * 60 * 1000,
                                                              max: 1,
                                                            })
                                                            .then(async (collected) => {
                                                              s4d.reply = collected.first().content;
                                                              s4d.message = collected.first();
                                                              s4dmessage.reply({
                                                                embeds: [
                                                                  {
                                                                    color: String("#ffcc66"),
                                                                    title: String(s4d.reply),
                                                                    image: {
                                                                      url: String(
                                                                        "https://cdn.discordapp.com/attachments/878993780798279761/934185980964007986/UncannyMeme9.png"
                                                                      ),
                                                                    },
                                                                  },
                                                                ],
                                                                allowedMentions: {
                                                                  repliedUser: true,
                                                                },
                                                              });
                                                              await delay(Number(1) * 1000);
                                                              s4dmessage
                                                                .reply(String("Say something uncanny (Last stage)"))
                                                                .then(() => {
                                                                  s4dmessage.channel
                                                                    .awaitMessages({
                                                                      filter: (m) => m.author.id === s4dmessage.author.id,
                                                                      time: 1 * 60 * 1000,
                                                                      max: 1,
                                                                    })
                                                                    .then(async (collected) => {
                                                                      s4d.reply = collected.first().content;
                                                                      s4d.message = collected.first();
                                                                      uncannyProbs = mathRandomInt(1, 5);
                                                                      if (uncannyProbs == 5) {
                                                                        s4dmessage.reply({
                                                                          embeds: [
                                                                            {
                                                                              color: String("#ff0000"),
                                                                              title: String("YOU LOST!"),
                                                                              image: {
                                                                                url: String(
                                                                                  "https://cdn.discordapp.com/attachments/878993780798279761/933103046152564786/CannyMeme-10.png"
                                                                                ),
                                                                              },
                                                                            },
                                                                          ],
                                                                          allowedMentions: {
                                                                            repliedUser: true,
                                                                          },
                                                                        });
                                                                        return;
                                                                      } else {
                                                                        s4dmessage.reply({
                                                                          embeds: [
                                                                            {
                                                                              color: String("#33cc00"),
                                                                              title: String(s4d.reply),
                                                                              image: {
                                                                                url: String(
                                                                                  "https://cdn.discordapp.com/attachments/878993780798279761/934185981190492170/UncannyMeme10.png"
                                                                                ),
                                                                              },
                                                                            },
                                                                          ],
                                                                          allowedMentions: {
                                                                            repliedUser: true,
                                                                          },
                                                                        });
                                                                        return;
                                                                      }

                                                                      s4d.reply = null;
                                                                    })
                                                                    .catch(async (e) => {
                                                                      console.error(e);
                                                                      s4dmessage.channel.send({
                                                                        content: String("You didn't want to continue :("),
                                                                      });
                                                                      return;
                                                                    });
                                                                });

                                                              s4d.reply = null;
                                                            })
                                                            .catch(async (e) => {
                                                              console.error(e);
                                                              s4dmessage.channel.send({
                                                                content: String("You didn't want to continue :("),
                                                              });
                                                              return;
                                                            });
                                                        });

                                                      s4d.reply = null;
                                                    })
                                                    .catch(async (e) => {
                                                      console.error(e);
                                                      s4dmessage.channel.send({
                                                        content: String("You didn't want to continue :("),
                                                      });
                                                      return;
                                                    });
                                                });

                                                s4d.reply = null;
                                              })
                                              .catch(async (e) => {
                                                console.error(e);
                                                s4dmessage.channel.send({
                                                  content: String("You didn't want to continue :("),
                                                });
                                                return;
                                              });
                                          });

                                          s4d.reply = null;
                                        })
                                        .catch(async (e) => {
                                          console.error(e);
                                          s4dmessage.channel.send({
                                            content: String("You didn't want to continue :("),
                                          });
                                          return;
                                        });
                                    });

                                    s4d.reply = null;
                                  })
                                  .catch(async (e) => {
                                    console.error(e);
                                    s4dmessage.channel.send({
                                      content: String("You didn't want to continue :("),
                                    });
                                    return;
                                  });
                              });

                              s4d.reply = null;
                            })
                            .catch(async (e) => {
                              console.error(e);
                              s4dmessage.channel.send({
                                content: String("You didn't want to continue :("),
                              });
                              return;
                            });
                        });

                        s4d.reply = null;
                      })
                      .catch(async (e) => {
                        console.error(e);
                        s4dmessage.channel.send({
                          content: String("You didn't want to continue :("),
                        });
                        return;
                      });
                  });

                  s4d.reply = null;
                })
                .catch(async (e) => {
                  console.error(e);
                  s4dmessage.channel.send({
                    content: String("You didn't want to continue :("),
                  });
                  return;
                });
            });

            s4d.reply = null;
          })
          .catch(async (e) => {
            console.error(e);
            s4dmessage.channel.send({
              content: String("You didn't want to continue :("),
            });
            return;
          });
      });
      return;
    }

    /*
    D!REP
    */
    if (s4dmessage.content.toUpperCase() == "D!REP") {
      s4dmessage.reply({
        embeds: [
          {
            color: String("#33cc00"),
            title: String(String(s4dmessage.author.username) + "'s reputation"),
            description: String(
              [
                "Your reputation on the server is: **",
                s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author.id, "-reputation"].join(""))),
                "**",
              ].join("")
            ),
            thumbnail: {
              url: String(
                s4dmessage.author.displayAvatarURL({
                  format: "png",
                })
              ),
            },
          },
        ],
        allowedMentions: {
          repliedUser: true,
        },
      });
      return;
    } else if ((s4dmessage.content.toUpperCase() || "").startsWith("D!REP" || "")) {
      try {
        if (
          !s4d.database.has(
            String([(s4dmessage.guild || {}).id, "-", s4dmessage.mentions.members.first().id, "-reputation"].join(""))
          )
        ) {
          s4d.database.set(
            String([(s4dmessage.guild || {}).id, "-", s4dmessage.mentions.members.first().id, "-reputation"].join("")),
            0
          );
        }
        s4dmessage.reply({
          embeds: [
            {
              color: String("#33cc00"),
              title: String(
                String(s4d.client.users.cache.get(String(s4dmessage.mentions.members.first().id)).username) + "'s reputation"
              ),
              description: String(
                [
                  "Reputation on the server is: **",
                  s4d.database.get(
                    String([(s4dmessage.guild || {}).id, "-", s4dmessage.mentions.members.first().id, "-reputation"].join(""))
                  ),
                  "**",
                ].join("")
              ),
              thumbnail: {
                url: String(
                  s4dmessage.mentions.members.first().displayAvatarURL({
                    format: "png",
                  })
                ),
              },
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      } catch (err) {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("Please ping a valid user"),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
    }

    /*
    D!SNIPE
    */
    if ((s4dmessage.content.toUpperCase() || "").startsWith("D!SNIPE" || "")) {
      try {
        snipedMessage = s4d.database.get(String(String((s4dmessage.guild || {}).id) + "-snipedmessage"));
        s4dmessage.reply({
          embeds: [
            {
              color: String("#33cc00"),
              title: String("Sniped message: "),
              description: String(["**", snipedMessage.slice(-1)[0], "**"].join("")),
              footer: {
                text: String("Sent by " + String(s4d.client.users.cache.get(String(snipedMessage[0])).username)),
                icon_url: String(),
              },
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      } catch (err) {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("Invalid sniped message (Prob it wasn't a text message)"),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
    }

    /*
    D!MCIP
    */
    arguments = s4dmessage.content.split(" ");
    serverIP = arguments[1];
    if (s4dmessage.content.toUpperCase() == "D!MCIP") {
      s4dmessage.reply({
        embeds: [
          {
            color: String("#ff0000"),
            title: String("❌ Error"),
            description: String("Correct command: **d!mcip example.net**"),
          },
        ],
        allowedMentions: {
          repliedUser: true,
        },
      });
      return;
    } else if ((s4dmessage.content.toUpperCase() || "").startsWith("D!MCIP" || "")) {
      try {
        let S4D_APP_MC_GET_OPTIONS = {
          timeout: 35000,
        };
        S4D_APP_MC_GET.status(String(serverIP), Number(25565), S4D_APP_MC_GET_OPTIONS).then(async (result_java) => {
          s4dmessage.reply({
            embeds: [
              {
                color: String("#33cc00"),
                title: String("Server: " + String(serverIP)),
                description: String(
                  [
                    "Players online: `",
                    result_java.players.online,
                    "/",
                    result_java.players.max,
                    "`",
                    "\n",
                    "\n",
                    "Server MOTD: `",
                    result_java.motd.clean,
                    "`",
                    "\n",
                    "\n",
                    "Java version: `",
                    result_java.version.name,
                    "`",
                  ].join("")
                ),
              },
            ],
            allowedMentions: {
              repliedUser: true,
            },
          });
        });
        return;
      } catch (err) {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("Server is offline or API error or invalid server IP"),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
    }

    /*
    D!MCBIP
    */
    arguments = s4dmessage.content.split(" ");
    serverIP = arguments[1];
    if (s4dmessage.content.toUpperCase() == "D!MCBIP") {
      s4dmessage.reply({
        embeds: [
          {
            color: String("#ff0000"),
            title: String("❌ Error"),
            description: String("Correct command: **d!mcip example.net**"),
          },
        ],
        allowedMentions: {
          repliedUser: true,
        },
      });
      return;
    } else if ((s4dmessage.content.toUpperCase() || "").startsWith("D!MCBIP" || "")) {
      try {
        S4D_APP_MC_BEDROCK_GET.statusBedrock({
          ip: String(serverIP),
          port: Number(19132),
        }).then(async (result_bedrock) => {
          s4dmessage.reply({
            embeds: [
              {
                color: String("#33cc00"),
                title: String("Server: " + String(serverIP)),
                description: String(
                  [
                    "Players online: `",
                    result_bedrock.players.online,
                    "/",
                    result_bedrock.players.max,
                    "`",
                    "\n",
                    "\n",
                    "Server MOTD: `",
                    result_bedrock.motd.clean[0],
                    "`",
                    "\n",
                    "\n",
                    "Server version: `",
                    result_bedrock.version,
                    "`",
                  ].join("")
                ),
              },
            ],
            allowedMentions: {
              repliedUser: true,
            },
          });
        });
        return;
      } catch (err) {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("Server is offline or API error or invalid server IP"),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
    }

    /*
    D!PP
    */
    if (s4dmessage.content.toUpperCase() == "D!PP") {
      s4dmessage
        .reply({
          embeds: [
            {
              color: String("#999999"),
              title: String("Cheking..."),
              image: {
                url: String(
                  "https://cdn.discordapp.com/attachments/989073168125820928/1011921468071886929/cock-inspection.gif"
                ),
              },
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        })
        .then(async (s4dfrost_real_reply) => {
          await delay(Number(2) * 1000);
          peePeeSize = mathRandomInt(0, 11);
          if (peePeeSize == 0) {
            s4dfrost_real_reply.edit({
              embeds: [
                {
                  color: String("#33cc00"),
                  title: String("This is your peepee "),
                  description: String("BD"),
                  footer: {
                    text: String("no pp?"),
                    icon_url: String(),
                  },
                },
              ],
            });
            return;
          }
          if (peePeeSize == 1) {
            s4dfrost_real_reply.edit({
              embeds: [
                {
                  color: String("#33cc00"),
                  title: String("This is your peepee "),
                  description: String("B=D"),
                },
              ],
            });
            return;
          } else if (peePeeSize == 2) {
            s4dfrost_real_reply.edit({
              embeds: [
                {
                  color: String("#33cc00"),
                  title: String("This is your peepee "),
                  description: String("B==D"),
                },
              ],
            });
            return;
          } else if (peePeeSize == 3) {
            s4dfrost_real_reply.edit({
              embeds: [
                {
                  color: String("#33cc00"),
                  title: String("This is your peepee "),
                  description: String("B====D"),
                },
              ],
            });
            return;
          } else if (peePeeSize == 4) {
            s4dfrost_real_reply.edit({
              embeds: [
                {
                  color: String("#33cc00"),
                  title: String("This is your peepee "),
                  description: String("B======D"),
                },
              ],
            });
            return;
          } else if (peePeeSize == 5) {
            s4dfrost_real_reply.edit({
              embeds: [
                {
                  color: String("#33cc00"),
                  title: String("This is your peepee "),
                  description: String("B========D"),
                },
              ],
            });
            return;
          } else if (peePeeSize == 6) {
            s4dfrost_real_reply.edit({
              embeds: [
                {
                  color: String("#33cc00"),
                  title: String("This is your peepee "),
                  description: String("B==========D"),
                },
              ],
            });
            return;
          } else if (peePeeSize == 7) {
            s4dfrost_real_reply.edit({
              embeds: [
                {
                  color: String("#33cc00"),
                  title: String("This is your peepee "),
                  description: String("B============D"),
                },
              ],
            });
            return;
          } else if (peePeeSize == 8) {
            s4dfrost_real_reply.edit({
              embeds: [
                {
                  color: String("#33cc00"),
                  title: String("This is your peepee "),
                  description: String("B==============D"),
                },
              ],
            });
            return;
          } else if (peePeeSize == 9) {
            s4dfrost_real_reply.edit({
              embeds: [
                {
                  color: String("#33cc00"),
                  title: String("This is your peepee "),
                  description: String("B================D"),
                },
              ],
            });
            return;
          } else if (peePeeSize == 10) {
            s4dfrost_real_reply.edit({
              embeds: [
                {
                  color: String("#33cc00"),
                  title: String("This is your peepee "),
                  description: String("B==================D"),
                },
              ],
            });
            return;
          } else if (peePeeSize == 11) {
            s4dfrost_real_reply.edit({
              embeds: [
                {
                  color: String("#33cc00"),
                  title: String("This is your peepee "),
                  description: String(
                    "B============================================================================================================================================================================================================D"
                  ),
                  footer: {
                    text: String("only shit"),
                    icon_url: String(),
                  },
                },
              ],
            });
            return;
          }
        });
    } else if ((s4dmessage.content.toUpperCase() || "").startsWith("D!PP" || "")) {
      try {
        s4dmessage
          .reply({
            embeds: [
              {
                color: String("#999999"),
                title: String("Cheking..."),
                image: {
                  url: String(
                    "https://cdn.discordapp.com/attachments/989073168125820928/1011921468071886929/cock-inspection.gif"
                  ),
                },
              },
            ],
            allowedMentions: {
              repliedUser: true,
            },
          })
          .then(async (s4dfrost_real_reply) => {
            await delay(Number(2) * 1000);
            peePeeSize = mathRandomInt(0, 11);
            if (peePeeSize == 0) {
              s4dfrost_real_reply.edit({
                embeds: [
                  new MessageEmbed()
                    .setTitle(
                      String(
                        String(s4d.client.users.cache.get(String(s4dmessage.mentions.members.first().id)).username) +
                          "'s peepee "
                      )
                    )
                    .setColor(String("#33cc00"))
                    .setDescription(String("BD"))
                    .setFooter(String("no cock?")),
                ],
              });
              return;
            }
            if (peePeeSize == 1) {
              s4dfrost_real_reply.edit({
                embeds: [
                  {
                    color: String("#33cc00"),
                    title: String(
                      String(s4d.client.users.cache.get(String(s4dmessage.mentions.members.first().id)).username) + "'s peepee "
                    ),
                    description: String("B=D"),
                  },
                ],
              });
              return;
            } else if (peePeeSize == 2) {
              s4dfrost_real_reply.edit({
                embeds: [
                  {
                    color: String("#33cc00"),
                    title: String(
                      String(s4d.client.users.cache.get(String(s4dmessage.mentions.members.first().id)).username) + "'s peepee "
                    ),
                    description: String("B==D"),
                  },
                ],
              });
              return;
            } else if (peePeeSize == 3) {
              s4dfrost_real_reply.edit({
                embeds: [
                  {
                    color: String("#33cc00"),
                    title: String(
                      String(s4d.client.users.cache.get(String(s4dmessage.mentions.members.first().id)).username) + "'s peepee "
                    ),
                    description: String("B====D"),
                  },
                ],
              });
              return;
            } else if (peePeeSize == 4) {
              s4dfrost_real_reply.edit({
                embeds: [
                  {
                    color: String("#33cc00"),
                    title: String(
                      String(s4d.client.users.cache.get(String(s4dmessage.mentions.members.first().id)).username) + "'s peepee "
                    ),
                    description: String("B======D"),
                  },
                ],
              });
              return;
            } else if (peePeeSize == 5) {
              s4dfrost_real_reply.edit({
                embeds: [
                  {
                    color: String("#33cc00"),
                    title: String(
                      String(s4d.client.users.cache.get(String(s4dmessage.mentions.members.first().id)).username) + "'s peepee "
                    ),
                    description: String("B========D"),
                  },
                ],
              });
              return;
            } else if (peePeeSize == 6) {
              s4dfrost_real_reply.edit({
                embeds: [
                  {
                    color: String("#33cc00"),
                    title: String(
                      String(s4d.client.users.cache.get(String(s4dmessage.mentions.members.first().id)).username) + "'s peepee "
                    ),
                    description: String("B==========D"),
                  },
                ],
              });
              return;
            } else if (peePeeSize == 7) {
              s4dfrost_real_reply.edit({
                embeds: [
                  {
                    color: String("#33cc00"),
                    title: String(
                      String(s4d.client.users.cache.get(String(s4dmessage.mentions.members.first().id)).username) + "'s peepee "
                    ),
                    description: String("B============D"),
                  },
                ],
              });
              return;
            } else if (peePeeSize == 8) {
              s4dfrost_real_reply.edit({
                embeds: [
                  {
                    color: String("#33cc00"),
                    title: String(
                      String(s4d.client.users.cache.get(String(s4dmessage.mentions.members.first().id)).username) + "'s peepee "
                    ),
                    description: String("B==============D"),
                  },
                ],
              });
              return;
            } else if (peePeeSize == 9) {
              s4dfrost_real_reply.edit({
                embeds: [
                  {
                    color: String("#33cc00"),
                    title: String(
                      String(s4d.client.users.cache.get(String(s4dmessage.mentions.members.first().id)).username) + "'s peepee "
                    ),
                    description: String("B================D"),
                  },
                ],
              });
              return;
            } else if (peePeeSize == 10) {
              s4dfrost_real_reply.edit({
                embeds: [
                  {
                    color: String("#33cc00"),
                    title: String(
                      String(s4d.client.users.cache.get(String(s4dmessage.mentions.members.first().id)).username) + "'s peepee "
                    ),
                    description: String("B==================D"),
                  },
                ],
              });
              return;
            } else if (peePeeSize == 11) {
              s4dfrost_real_reply.edit({
                embeds: [
                  {
                    color: String("#33cc00"),
                    title: String(
                      String(s4d.client.users.cache.get(String(s4dmessage.mentions.members.first().id)).username) + "'s peepee "
                    ),
                    description: String(
                      "B============================================================================================================================================================================================================D"
                    ),
                    footer: {
                      text: String("only shit"),
                      icon_url: String(),
                    },
                  },
                ],
              });
              return;
            }
          });
      } catch (err) {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("Please ping a valid user"),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
    }

    /*
    D!TTT
    */
    if ((s4dmessage.content.toUpperCase() || "").startsWith("D!TTT" || "")) {
      try {
        new TicTacToe({
          message: s4dmessage,
          slash_command: false,
          opponent: s4d.client.users.cache.get(String(s4dmessage.mentions.members.first().id)),
          embed: {
            title: "Tic Tac Toe (ttt)",
            overTitle: "GAME OVER MUAHAHAHAHAHA",
            color: "#5865F2",
          },
          oEmoji: "🔵",
          xEmoji: "❌",
          blankEmoji: "➖",
          oColor: "PRIMARY",
          xColor: "DANGER",
          waitMessage: "Waiting for the opponent...",
          turnMessage: "{emoji} | Its now **{player}** turn!",
          askMessage: "Hey {opponent}, {challenger} challenged you for a game of Tic Tac Toe!",
          cancelMessage: "Looks like they refused to have a game of Tic Tac Toe. :(",
          timeEndMessage: "Since the opponent didnt answer, i dropped the game!",
          drawMessage: "It was a draw!",
          winMessage: "{emoji} | **{winner}** won the game!",
          gameEndMessage: "The game went unfinished :(",
        }).startGame();
        return;
      } catch (err) {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("Please ping a valid user"),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
    }

    /*
    Pet stats timed checks
    */
    if (s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-haspet"].join(""))) == "true") {
      if (s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-petstats-health"].join(""))) > 0) {
        if (
          new Date().getTime() >
          s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-petstatstimer-health"].join(""))) +
            7200000
        ) {
          petHealthCooldown = new Date().getTime();
          s4d.database.set(
            String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-petstatstimer-health"].join("")),
            petHealthCooldown
          );
          s4d.database.subtract(
            String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-petstats-health"].join("")),
            parseInt(10)
          );
        }
      } else {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("Oh no!"),
              description: String("Your pet sadly died due to too low health, type: **d!adopt**, to adopt a new one"),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-haspet"].join("")), "false");
        s4d.database.set(
          String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-petstatstimer-health"].join("")),
          new Date().getTime()
        );
        s4d.database.set(
          String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-petstatstimer-fun"].join("")),
          new Date().getTime()
        );
        s4d.database.set(
          String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-petstatstimer-hunger"].join("")),
          new Date().getTime()
        );
        s4d.database.set(
          String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-petstatstimer-thirst"].join("")),
          new Date().getTime()
        );
        s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-petstats-health"].join("")), 100);
        s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-petstats-fun"].join("")), 100);
        s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-petstats-hunger"].join("")), 100);
        s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-petstats-thirst"].join("")), 100);
        return;
      }
      if (s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-petstats-fun"].join(""))) > 0) {
        if (
          new Date().getTime() >
          s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-petstatstimer-fun"].join(""))) +
            7200000
        ) {
          petFunCooldown = new Date().getTime();
          s4d.database.set(
            String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-petstatstimer-fun"].join("")),
            petFunCooldown
          );
          s4d.database.subtract(
            String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-petstats-fun"].join("")),
            parseInt(10)
          );
        }
      } else {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("Oh no!"),
              description: String(
                [
                  "Your pet fun has reached **0%**!",
                  "\n",
                  "Go to play with your pet to increase it, type **d!petplayer**",
                ].join("")
              ),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      if (s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-petstats-hunger"].join(""))) > 0) {
        if (
          new Date().getTime() >
          s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-petstatstimer-hunger"].join(""))) +
            7200000
        ) {
          petHungerCooldown = new Date().getTime();
          s4d.database.set(
            String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-petstatstimer-hunger"].join("")),
            petHungerCooldown
          );
          s4d.database.subtract(
            String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-petstats-hunger"].join("")),
            parseInt(10)
          );
        }
      } else {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("Oh no!"),
              description: String("Your pet sadly died due to too being too hungry, type: **d!adopt**, to adopt a new one"),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-haspet"].join("")), "false");
        s4d.database.set(
          String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-petstatstimer-health"].join("")),
          new Date().getTime()
        );
        s4d.database.set(
          String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-petstatstimer-fun"].join("")),
          new Date().getTime()
        );
        s4d.database.set(
          String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-petstatstimer-hunger"].join("")),
          new Date().getTime()
        );
        s4d.database.set(
          String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-petstatstimer-thirst"].join("")),
          new Date().getTime()
        );
        s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-petstats-health"].join("")), 100);
        s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-petstats-fun"].join("")), 100);
        s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-petstats-hunger"].join("")), 100);
        s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-petstats-thirst"].join("")), 100);
        return;
      }
      if (s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-petstats-thirst"].join(""))) > 0) {
        if (
          new Date().getTime() >
          s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-petstatstimer-thirst"].join(""))) +
            7200000
        ) {
          petThirstCooldown = new Date().getTime();
          s4d.database.set(
            String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-petstatstimer-thirst"].join("")),
            petThirstCooldown
          );
          s4d.database.subtract(
            String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-petstats-thirst"].join("")),
            parseInt(10)
          );
        }
      } else {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("Oh no!"),
              description: String(
                "Your pet sadly died due to too being too being thirsty, type: **d!adopt**, to adopt a new one"
              ),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-haspet"].join("")), "false");
        s4d.database.set(
          String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-petstatstimer-health"].join("")),
          new Date().getTime()
        );
        s4d.database.set(
          String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-petstatstimer-fun"].join("")),
          new Date().getTime()
        );
        s4d.database.set(
          String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-petstatstimer-hunger"].join("")),
          new Date().getTime()
        );
        s4d.database.set(
          String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-petstatstimer-thirst"].join("")),
          new Date().getTime()
        );
        s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-petstats-health"].join("")), 100);
        s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-petstats-fun"].join("")), 100);
        s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-petstats-hunger"].join("")), 100);
        s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-petstats-thirst"].join("")), 100);
        return;
      }
    }

    /*
    D!ADOPT
    */
    if ((s4dmessage.content.toUpperCase() || "").startsWith("D!ADOPT" || "")) {
      if (s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-haspet"].join(""))) == "true") {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("You already have a pet"),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      } else {
        try {
          s4dmessage.reply({
            embeds: [
              {
                color: String("#33cc00"),
                title: String(
                  "You sucessfully adopted " +
                    String(s4d.client.users.cache.get(String(s4dmessage.mentions.members.first().id)).username)
                ),
                description: String("You have now a pet, type **d!pet** to check his stats!"),
                thumbnail: {
                  url: String(
                    s4dmessage.mentions.members.first().displayAvatarURL({
                      format: "png",
                    })
                  ),
                },
                footer: {
                  text: String("It is important to check his stats often"),
                  icon_url: String(),
                },
              },
            ],
            allowedMentions: {
              repliedUser: true,
            },
          });
          s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-haspet"].join("")), "true");
          s4d.database.set(
            String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-petid"].join("")),
            s4dmessage.mentions.members.first().id
          );
          return;
        } catch (err) {
          s4dmessage.reply({
            embeds: [
              {
                color: String("#ff0000"),
                title: String("❌ Error"),
                description: String("Please ping a valid user"),
              },
            ],
            allowedMentions: {
              repliedUser: true,
            },
          });
          return;
        }
      }
    }

    /*
    D!UNADOPT
    */
    if ((s4dmessage.content.toUpperCase() || "").startsWith("D!UNADOPT" || "")) {
      if (s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-haspet"].join(""))) == "false") {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("You don't have a pet, type: **d!adopt**"),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      if (
        !(
          s4dmessage.mentions.members.first().id ==
          s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-petid"].join("")))
        )
      ) {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("That user isn't your pet"),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      try {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#990000"),
              title: String(
                "You unadopted " + String(s4d.client.users.cache.get(String(s4dmessage.mentions.members.first().id)).username)
              ),
              description: String("you commited bad action >:("),
              thumbnail: {
                url: String(
                  s4dmessage.mentions.members.first().displayAvatarURL({
                    format: "png",
                  })
                ),
              },
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-haspet"].join("")), "false");
        s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-petid"].join("")), "null");
        return;
      } catch (err) {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("Please ping a valid user"),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
    }

    /*
    D!PET
    */
    if (s4dmessage.content.toUpperCase() == "D!PET") {
      if (s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-haspet"].join(""))) == "false") {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("You don't have a pet, type: **d!adopt**"),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      var petStatsCmdMessageEmbed = new Discord.MessageEmbed();
      petStatsCmdMessageEmbed.setColor("#00cccc");
      petStatsCmdMessageEmbed.setTitle(
        String(
          "🐱 Your fluffy: " +
            String(
              s4d.client.users.cache.get(
                String(s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-petid"].join(""))))
              ).username
            )
        )
      );
      petStatsCmdMessageEmbed.setURL(String());
      petStatsCmdMessageEmbed.setDescription(
        String(
          [
            "These are all your pet stats, don't make them reach 0%",
            "\n",
            "Otherwise you will lose your pet",
            "\n",
            "Your pet name and image gets updated everytime the user you...",
            "\n",
            '..."adopted" (sounds kinda sussy) change them',
          ].join("")
        )
      );
      petStatsCmdMessageEmbed.setThumbnail(
        String(
          s4d.client.users.cache
            .get(String(s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-petid"].join("")))))
            .displayAvatarURL({
              format: "png",
            })
        )
      );
      petStatsCmdMessageEmbed.addField(
        String("💟 Health"),
        String(
          [
            "Pet's health is: **",
            s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-petstats-health"].join(""))),
            "%**",
          ].join("")
        ),
        true
      );
      petStatsCmdMessageEmbed.addField(
        String("🎾 Fun"),
        String(
          [
            "Pet's fun is: **",
            s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-petstats-fun"].join(""))),
            "%**",
          ].join("")
        ),
        true
      );
      petStatsCmdMessageEmbed.addField(String("\n"), String("\n"), false);
      petStatsCmdMessageEmbed.addField(
        String("🍗 Hunger"),
        String(
          [
            "Pet's hunger is: **",
            s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-petstats-hunger"].join(""))),
            "%**",
          ].join("")
        ),
        true
      );
      petStatsCmdMessageEmbed.addField(
        String("💧 Thirst"),
        String(
          [
            "Pet's thirst is: **",
            s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-petstats-thirst"].join(""))),
            "%**",
          ].join("")
        ),
        true
      );
      petStatsCmdMessageEmbed.setFooter({
        text: String("Remember to check them often, stats go down"),
        iconURL: String(),
      });

      s4dmessage.reply({
        embeds: [petStatsCmdMessageEmbed],
        allowedMentions: {
          repliedUser: true,
        },
      });
      return;
    }

    /*
    D!PETSEE
    */
    if ((s4dmessage.content.toUpperCase() || "").startsWith("D!PETSEE" || "")) {
      if (s4dmessage.mentions.members.first() == null) {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("Please mention an user"),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      if (
        s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.mentions.members.first(), "-haspet"].join(""))) ==
          "false" ||
        !s4d.database.has(String([(s4dmessage.guild || {}).id, "-", s4dmessage.mentions.members.first(), "-haspet"].join("")))
      ) {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("The user you mentioned dosen't have any pet"),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      var PetstatsCmdMessageEmbed = new Discord.MessageEmbed();
      PetstatsCmdMessageEmbed.setColor("#00cccc");
      PetstatsCmdMessageEmbed.setTitle(
        String(
          String(
            ["🐱 ", s4d.client.users.cache.get(String(s4dmessage.mentions.members.first().id)).username, "'s fluffy: "].join("")
          ) +
            String(
              s4d.client.users.cache.get(
                String(
                  s4d.database.get(
                    String([(s4dmessage.guild || {}).id, "-", s4dmessage.mentions.members.first(), "-petid"].join(""))
                  )
                )
              ).username
            )
        )
      );
      PetstatsCmdMessageEmbed.setURL(String());
      PetstatsCmdMessageEmbed.setDescription(
        String(
          [
            "These are all your pet stats, don't make them reach 0%",
            "\n",
            "Otherwise you will lose your pet",
            "\n",
            "Your pet name and image gets updated everytime the user you...",
            "\n",
            '..."adopted" (sounds kinda sussy) change them',
          ].join("")
        )
      );
      PetstatsCmdMessageEmbed.setThumbnail(
        String(
          s4d.client.users.cache
            .get(
              String(
                s4d.database.get(
                  String([(s4dmessage.guild || {}).id, "-", s4dmessage.mentions.members.first(), "-petid"].join(""))
                )
              )
            )
            .displayAvatarURL({
              format: "png",
            })
        )
      );
      PetstatsCmdMessageEmbed.addField(
        String("💟 Health"),
        String(
          [
            "Pet's health is: **",
            s4d.database.get(
              String([(s4dmessage.guild || {}).id, "-", s4dmessage.mentions.members.first(), "-petstats-health"].join(""))
            ),
            "%**",
          ].join("")
        ),
        true
      );
      PetstatsCmdMessageEmbed.addField(
        String("🎾 Fun"),
        String(
          [
            "Pet's fun is: **",
            s4d.database.get(
              String([(s4dmessage.guild || {}).id, "-", s4dmessage.mentions.members.first(), "-petstats-fun"].join(""))
            ),
            "%**",
          ].join("")
        ),
        true
      );
      PetstatsCmdMessageEmbed.addField(String("\n"), String("\n"), false);
      PetstatsCmdMessageEmbed.addField(
        String("🍗 Hunger"),
        String(
          [
            "Pet's hunger is: **",
            s4d.database.get(
              String([(s4dmessage.guild || {}).id, "-", s4dmessage.mentions.members.first(), "-petstats-hunger"].join(""))
            ),
            "%**",
          ].join("")
        ),
        true
      );
      PetstatsCmdMessageEmbed.addField(
        String("💧 Thirst"),
        String(
          [
            "Pet's thirst is: **",
            s4d.database.get(
              String([(s4dmessage.guild || {}).id, "-", s4dmessage.mentions.members.first(), "-petstats-thirst"].join(""))
            ),
            "%**",
          ].join("")
        ),
        true
      );
      PetstatsCmdMessageEmbed.setFooter({
        text: String("Remember to check them often, stats go down"),
        iconURL: String(),
      });

      s4dmessage.reply({
        embeds: [PetstatsCmdMessageEmbed],
        allowedMentions: {
          repliedUser: true,
        },
      });
      return;
    }

    /*
    D!PETVISIT
    */
    if ((s4dmessage.content.toUpperCase() || "").startsWith("D!PETVISIT" || "")) {
      if (s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-haspet"].join(""))) == "false") {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("You don't have a pet, type: **d!adopt**"),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      if (s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-petstats-health"].join(""))) == 100) {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("Your pet is healty, no need to bring it to the vet"),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      if (!s4d.database.has(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-petvisittimer"].join("")))) {
        s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-petvisittimer"].join("")), 0);
      }
      if (
        !(
          new Date().getTime() >
          s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-petvisittimer"].join(""))) + 900000
        )
      ) {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#000000"),
              description: String(
                [
                  "⏰ Slowdown man, vet will be available again: **<t:",
                  Math.floor(
                    (s4d.database.get(
                      String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-petvisittimer"].join(""))
                    ) +
                      900000) /
                      1000
                  ),
                  ":R>**",
                ].join("")
              ),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      petVetCooldown = new Date().getTime();
      s4d.database.set(
        String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-petvisittimer"].join("")),
        petVetCooldown
      );
      s4d.database.add(
        String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-petstats-health"].join("")),
        parseInt(10)
      );
      s4dmessage.reply({
        embeds: [
          {
            color: String("#33cc00"),
            title: String("You broght your pet to the vet"),
            description: String("The vet visited your pet giving the right treatment"),
            footer: {
              text: String("Your pet gained +10 health"),
              icon_url: String(),
            },
          },
        ],
        allowedMentions: {
          repliedUser: true,
        },
      });
      return;
    }

    /*
    D!PETPLAY
    */
    if ((s4dmessage.content.toUpperCase() || "").startsWith("D!PETPLAY" || "")) {
      if (s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-haspet"].join(""))) == "false") {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("You don't have a pet, type: **d!adopt**"),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      if (s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-petstats-fun"].join(""))) == 100) {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("Your pet is not getting bored"),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      if (!s4d.database.has(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-petplaytimer"].join("")))) {
        s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-petplaytimer"].join("")), 0);
      }
      if (
        !(
          new Date().getTime() >
          s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-petplaytimer"].join(""))) + 900000
        )
      ) {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#000000"),
              description: String(
                [
                  "⏰ Slowdown man, you can play with your pet again: **<t:",
                  Math.floor(
                    (s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-petplaytimer"].join(""))) +
                      900000) /
                      1000
                  ),
                  ":R>**",
                ].join("")
              ),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      petFunCooldown = new Date().getTime();
      s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-petplaytimer"].join("")), petFunCooldown);
      s4d.database.add(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-petstats-fun"].join("")), parseInt(10));
      s4dmessage.reply({
        embeds: [
          {
            color: String("#33cc00"),
            title: String("You played with your pet"),
            description: String("Your pet was really happy to play with you"),
            footer: {
              text: String("Your pet gained +10 fun"),
              icon_url: String(),
            },
          },
        ],
        allowedMentions: {
          repliedUser: true,
        },
      });
      return;
    }

    /*
    D!PETFEED
    */
    if ((s4dmessage.content.toUpperCase() || "").startsWith("D!PETFEED" || "")) {
      if (s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-haspet"].join(""))) == "false") {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("You don't have a pet, type: **d!adopt**"),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      if (s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-petstats-hunger"].join(""))) == 100) {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("Your pet is not hungry"),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      if (!s4d.database.has(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-petfeedtimer"].join("")))) {
        s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-petfeedtimer"].join("")), 0);
      }
      if (
        !(
          new Date().getTime() >
          s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-petfeedtimer"].join(""))) + 900000
        )
      ) {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#000000"),
              description: String(
                [
                  "⏰ Slowdown man, you can feed your pet again: **<t:",
                  Math.floor(
                    (s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-petfeedtimer"].join(""))) +
                      900000) /
                      1000
                  ),
                  ":R>**",
                ].join("")
              ),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      petFeedCooldown = new Date().getTime();
      s4d.database.set(
        String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-petfeedtimer"].join("")),
        petFeedCooldown
      );
      s4d.database.add(
        String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-petstats-hunger"].join("")),
        parseInt(10)
      );
      s4dmessage.reply({
        embeds: [
          {
            color: String("#33cc00"),
            title: String("You feed your pet"),
            description: String("You give some snacks to your pet"),
            footer: {
              text: String("Your pet gained +10 hunger"),
              icon_url: String(),
            },
          },
        ],
        allowedMentions: {
          repliedUser: true,
        },
      });
      return;
    }

    /*
    D!PETDRINK
    */
    if ((s4dmessage.content.toUpperCase() || "").startsWith("D!PETDRINK" || "")) {
      if (s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-haspet"].join(""))) == "false") {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("You don't have a pet, type: **d!adopt**"),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      if (s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-petstats-thirst"].join(""))) == 100) {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("Your pet is not thirsty"),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      if (!s4d.database.has(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-petdrinktimer"].join("")))) {
        s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-petdrinktimer"].join("")), 0);
      }
      if (
        !(
          new Date().getTime() >
          s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-petdrinktimer"].join(""))) + 900000
        )
      ) {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#000000"),
              description: String(
                [
                  "⏰ Slowdown man, you can give water to your pet again: **<t:",
                  Math.floor(
                    (s4d.database.get(
                      String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-petdrinktimer"].join(""))
                    ) +
                      900000) /
                      1000
                  ),
                  ":R>**",
                ].join("")
              ),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      petDrinkCooldown = new Date().getTime();
      s4d.database.set(
        String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-petdrinktimer"].join("")),
        petDrinkCooldown
      );
      s4d.database.add(
        String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-petstats-thirst"].join("")),
        parseInt(10)
      );
      s4dmessage.reply({
        embeds: [
          {
            color: String("#33cc00"),
            title: String("You gave water to your pet"),
            description: String("Your pet now feel more refreshed after drinking fresh water"),
            footer: {
              text: String("Your pet gained +10 thirst"),
              icon_url: String(),
            },
          },
        ],
        allowedMentions: {
          repliedUser: true,
        },
      });
      return;
    }

    /*
    Xp system + leveling up
    */
    s4d.database.add(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-xp"].join("")), parseInt(1));
    if (
      s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-xp"].join(""))) >=
      s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-nextxp"].join("")))
    ) {
      s4d.database.add(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-level"].join("")), parseInt(1));
      s4d.database.add(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-nextxp"].join("")), parseInt(100));
      s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-xp"].join("")), 0);
      s4dmessage.reply({
        embeds: [
          {
            color: String("#ffcc00"),
            title: String("⬆️ Level up"),
            author: {
              name: String(s4dmessage.author.username),
              icon_url: String(
                s4dmessage.author.displayAvatarURL({
                  format: "png",
                })
              ),
              url: String(),
            },
            description: String(
              [
                "Your new level: **",
                s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-level"].join(""))),
                "**",
                "\n",
                "XP for the next level: **",
                s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-nextxp"].join(""))),
                "**",
              ].join("")
            ),
            thumbnail: {
              url: String("https://cdn.discordapp.com/attachments/1079037173875085312/1122505331709325412/image.png"),
            },
          },
        ],
        allowedMentions: {
          repliedUser: true,
        },
      });
      return;
    }

    /*
    D!XP
    */
    if (s4dmessage.content.toUpperCase() == "D!XP") {
      s4dmessage.reply({
        embeds: [
          {
            color: String("#00cccc"),
            title: String("Your current XP"),
            description: String(
              [
                "🪩 XP: **",
                s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-xp"].join(""))),
                "**",
                "\n",
                "\n",
                "⏭️ XP for the next level: **",
                s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-nextxp"].join(""))) -
                  s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-xp"].join(""))),
                "**",
              ].join("")
            ),
            thumbnail: {
              url: String("https://cdn.discordapp.com/attachments/1079037173875085312/1122518239403057242/image.png"),
            },
          },
        ],
        allowedMentions: {
          repliedUser: true,
        },
      });
      return;
    } else if ((s4dmessage.content.toUpperCase() || "").startsWith("D!XP" || "")) {
      try {
        if (
          !s4d.database.has(String([(s4dmessage.guild || {}).id, "-", s4dmessage.mentions.members.first(), "-xp"].join("")))
        ) {
          s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.mentions.members.first(), "-xp"].join("")), 0);
        }
        if (
          !s4d.database.has(String([(s4dmessage.guild || {}).id, "-", s4dmessage.mentions.members.first(), "-nextxp"].join("")))
        ) {
          s4d.database.set(
            String([(s4dmessage.guild || {}).id, "-", s4dmessage.mentions.members.first(), "-nextxp"].join("")),
            100
          );
        }
        if (
          !s4d.database.has(String([(s4dmessage.guild || {}).id, "-", s4dmessage.mentions.members.first(), "-level"].join("")))
        ) {
          s4d.database.set(
            String([(s4dmessage.guild || {}).id, "-", s4dmessage.mentions.members.first(), "-level"].join("")),
            1
          );
        }
        s4dmessage.reply({
          embeds: [
            {
              color: String("#00cccc"),
              title: String(
                String(s4d.client.users.cache.get(String(s4dmessage.mentions.members.first().id)).username) + "'s current XP"
              ),
              description: String(
                [
                  "🪩 XP: **",
                  s4d.database.get(
                    String(
                      [(s4dmessage.guild || {}).id, "-", "<@", s4dmessage.mentions.members.first().id, ">", "-xp"].join("")
                    )
                  ),
                  "**",
                  "\n",
                  "\n",
                  "⏭️ XP for the next level: **",
                  s4d.database.get(
                    String(
                      [(s4dmessage.guild || {}).id, "-", "<@", s4dmessage.mentions.members.first().id, ">", "-nextxp"].join("")
                    )
                  ) -
                    s4d.database.get(
                      String(
                        [(s4dmessage.guild || {}).id, "-", "<@", s4dmessage.mentions.members.first().id, ">", "-xp"].join("")
                      )
                    ),
                  "**",
                ].join("")
              ),
              thumbnail: {
                url: String("https://cdn.discordapp.com/attachments/1079037173875085312/1122518239403057242/image.png"),
              },
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      } catch (err) {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("Please ping a valid user"),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
    }

    /*
    D!LEVEL
    */
    if (s4dmessage.content.toUpperCase() == "D!LEVEL") {
      s4dmessage.reply({
        embeds: [
          {
            color: String("#00cccc"),
            title: String("Your current level"),
            description: String(
              [
                "💈 Level: **",
                s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-level"].join(""))),
                "**",
                "\n",
                "\n",
                "⏭️ XP for the next level: **",
                s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-nextxp"].join(""))),
                "**",
              ].join("")
            ),
            thumbnail: {
              url: String("https://cdn.discordapp.com/attachments/1079037173875085312/1122520624460480583/image.png"),
            },
          },
        ],
        allowedMentions: {
          repliedUser: true,
        },
      });
      return;
    } else if ((s4dmessage.content.toUpperCase() || "").startsWith("D!LEVEL" || "")) {
      try {
        if (
          !s4d.database.has(String([(s4dmessage.guild || {}).id, "-", s4dmessage.mentions.members.first(), "-xp"].join("")))
        ) {
          s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.mentions.members.first(), "-xp"].join("")), 0);
        }
        if (
          !s4d.database.has(String([(s4dmessage.guild || {}).id, "-", s4dmessage.mentions.members.first(), "-nextxp"].join("")))
        ) {
          s4d.database.set(
            String([(s4dmessage.guild || {}).id, "-", s4dmessage.mentions.members.first(), "-nextxp"].join("")),
            100
          );
        }
        if (
          !s4d.database.has(String([(s4dmessage.guild || {}).id, "-", s4dmessage.mentions.members.first(), "-level"].join("")))
        ) {
          s4d.database.set(
            String([(s4dmessage.guild || {}).id, "-", s4dmessage.mentions.members.first(), "-level"].join("")),
            1
          );
        }
        s4dmessage.reply({
          embeds: [
            {
              color: String("#00cccc"),
              title: String(
                String(s4d.client.users.cache.get(String(s4dmessage.mentions.members.first().id)).username) + "'s current level"
              ),
              description: String(
                [
                  "💈 Level: **",
                  s4d.database.get(
                    String(
                      [(s4dmessage.guild || {}).id, "-", "<@", s4dmessage.mentions.members.first().id, ">", "-level"].join("")
                    )
                  ),
                  "**",
                  "\n",
                  "\n",
                  "⏭️ XP for the next level: **",
                  s4d.database.get(
                    String(
                      [(s4dmessage.guild || {}).id, "-", "<@", s4dmessage.mentions.members.first().id, ">", "-nextxp"].join("")
                    )
                  ),
                  "**",
                ].join("")
              ),
              thumbnail: {
                url: String("https://cdn.discordapp.com/attachments/1079037173875085312/1122520624460480583/image.png"),
              },
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      } catch (err) {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("Please ping a valid user"),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
    }

    /*
    D!LXPB
    */
    if ((s4dmessage.content.toUpperCase() || "").startsWith("D!LXPB" || "")) {
      if (!s4d.database.has(String([(s4dmessage.guild || {}).id, "-", "xpleaderboardtimer"].join("")))) {
        s4d.database.set(String([(s4dmessage.guild || {}).id, "-", "xpleaderboardtimer"].join("")), 0);
      }
      if (
        !(
          new Date().getTime() >
          s4d.database.get(String([(s4dmessage.guild || {}).id, "-", "xpleaderboardtimer"].join(""))) + 30000
        )
      ) {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#000000"),
              description: String(
                [
                  "⏰ Slowdown man, you can see the leaderboard again: ** <t:",
                  Math.floor(
                    (s4d.database.get(String([(s4dmessage.guild || {}).id, "-", "xpleaderboardtimer"].join(""))) + 30000) / 1000
                  ),
                  ":R>**",
                ].join("")
              ),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      xpLeaderboardCooldown = new Date().getTime();
      s4d.database.set(String([(s4dmessage.guild || {}).id, "-", "xpleaderboardtimer"].join("")), xpLeaderboardCooldown);
      xpLbTextForEmbed = null;
      xpLbCurrentMemberId = null;
      xpLeaderboardUsers = [];
      xpLeaderboardData = [];
      try {
        s4dmessage
          .reply({
            embeds: [
              {
                color: String("#999999"),
                title: String("Generating the server leaderboard, please wait..."),
                footer: {
                  text: String("This operating will take a few seconds"),
                  icon_url: String(
                    s4dmessage.guild.iconURL({
                      dynamic: true,
                    })
                  ),
                },
              },
            ],
            allowedMentions: {
              repliedUser: true,
            },
          })
          .then(async (s4dfrost_real_reply) => {
            s4dmessage.guild.members.cache.forEach(async (m) => {
              if (s4d.database.has(String([(s4dmessage.guild || {}).id, "-", ["<@", m.id, ">"].join(""), "-level"].join("")))) {
                xpLbCurrentMemberId = s4d.database.get(
                  String([(s4dmessage.guild || {}).id, "-", ["<@", m.id, ">"].join(""), "-level"].join(""))
                );
                xpLbCurrentElement = 1;
                xpLeaderboardData.splice(xpLbCurrentElement - 1, 0, xpLbCurrentMemberId);
                xpLeaderboardUsers.splice(xpLbCurrentElement - 1, 0, m.id);
                var k_end = xpLeaderboardData.length;
                var k_inc = 1;
                if (0 > k_end) {
                  k_inc = -k_inc;
                }
                for (k = 0; k_inc >= 0 ? k <= k_end : k >= k_end; k += k_inc) {
                  var l_end = xpLeaderboardData.length;
                  var l_inc = 1;
                  if (1 > l_end) {
                    l_inc = -l_inc;
                  }
                  for (l = 1; l_inc >= 0 ? l <= l_end : l >= l_end; l += l_inc) {
                    if (xpLeaderboardData[k - 1] > xpLeaderboardData[l - 1]) {
                      supportVarForXpLbXp = xpLeaderboardData[k - 1];
                      xpLeaderboardData[k - 1] = xpLeaderboardData[l - 1];
                      xpLeaderboardData[l - 1] = supportVarForXpLbXp;
                      supportVarForUserLbXp = xpLeaderboardUsers[k - 1];
                      xpLeaderboardUsers[k - 1] = xpLeaderboardUsers[l - 1];
                      xpLeaderboardUsers[l - 1] = supportVarForUserLbXp;
                    }
                  }
                }
                xpLbCurrentElement = (typeof xpLbCurrentElement === "number" ? xpLbCurrentElement : 0) + 1;
              }
            });
            if (xpLeaderboardData.length <= 10) {
              var k_end2 = xpLeaderboardData.length;
              var k_inc2 = 1;
              if (1 > k_end2) {
                k_inc2 = -k_inc2;
              }
              for (k = 1; k_inc2 >= 0 ? k <= k_end2 : k >= k_end2; k += k_inc2) {
                xpLbTextForEmbed = [
                  xpLbTextForEmbed,
                  k,
                  ") ",
                  s4d.client.users.cache.get(String(xpLeaderboardUsers[k - 1])).username,
                  ": ",
                  xpLeaderboardData[k - 1],
                  " lvl",
                  "\n",
                ].join("");
              }
            } else {
              for (k = 1; k <= 10; k++) {
                xpLbTextForEmbed = [
                  xpLbTextForEmbed,
                  k,
                  ") ",
                  s4d.client.users.cache.get(String(xpLeaderboardUsers[k - 1])).username,
                  ": ",
                  xpLeaderboardData[k - 1],
                  " lvl",
                  "\n",
                ].join("");
              }
            }
            s4dfrost_real_reply.edit({
              embeds: [
                {
                  color: String("#00cccc"),
                  title: String("📊 Top 10 highest levels in the server:"),
                  description: String(["**", xpLbTextForEmbed, "**"].join("")),
                  footer: {
                    text: String(s4dmessage.guild.name),
                    icon_url: String(
                      s4dmessage.guild.iconURL({
                        dynamic: true,
                      })
                    ),
                  },
                },
              ],
            });
          });
        return;
      } catch (err) {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("An error has occured while creating the leaderboard"),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
    }

    /*
    D!LB
    */
    if ((s4dmessage.content.toUpperCase() || "").startsWith("D!LB" || "")) {
      if (!s4d.database.has(String([(s4dmessage.guild || {}).id, "-", "leaderboardtimer"].join("")))) {
        s4d.database.set(String([(s4dmessage.guild || {}).id, "-", "leaderboardtimer"].join("")), 0);
      }
      if (
        !(
          new Date().getTime() >
          s4d.database.get(String([(s4dmessage.guild || {}).id, "-", "leaderboardtimer"].join(""))) + 30000
        )
      ) {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#000000"),
              description: String(
                [
                  "⏰ Slowdown man, you can see the leaderboard again: **<t:",
                  Math.floor(
                    (s4d.database.get(String([(s4dmessage.guild || {}).id, "-", "leaderboardtimer"].join(""))) + 30000) / 1000
                  ),
                  ":R>**",
                ].join("")
              ),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      leaderboardCooldown = new Date().getTime();
      s4d.database.set(String([(s4dmessage.guild || {}).id, "-", "leaderboardtimer"].join("")), leaderboardCooldown);
      textForEmbed = null;
      currentMemberId = null;
      leaderboardUsers = [];
      leaderboardMoneys = [];
      try {
        s4dmessage
          .reply({
            embeds: [
              {
                color: String("#999999"),
                title: String("Generating the server leaderboard, please wait..."),
                footer: {
                  text: String("This operating will take a few seconds"),
                  icon_url: String(
                    s4dmessage.guild.iconURL({
                      dynamic: true,
                    })
                  ),
                },
              },
            ],
            allowedMentions: {
              repliedUser: true,
            },
          })
          .then(async (s4dfrost_real_reply) => {
            s4dmessage.guild.members.cache.forEach(async (m) => {
              if (
                s4d.database.has(String([(s4dmessage.guild || {}).id, "-", ["<@", m.id, ">"].join(""), "-totalmoney"].join("")))
              ) {
                s4d.database.set(
                  String([(s4dmessage.guild || {}).id, "-", ["<@", m.id, ">"].join(""), "-totalmoney"].join("")),
                  s4d.database.get(String([(s4dmessage.guild || {}).id, "-", ["<@", m.id, ">"].join(""), "-money"].join(""))) +
                    s4d.database.get(
                      String([(s4dmessage.guild || {}).id, "-", ["<@", m.id, ">"].join(""), "-bankmoney"].join(""))
                    )
                );
                currentMemberId = s4d.database.get(
                  String([(s4dmessage.guild || {}).id, "-", ["<@", m.id, ">"].join(""), "-totalmoney"].join(""))
                );
                currentElement = 1;
                leaderboardMoneys.splice(currentElement - 1, 0, currentMemberId);
                leaderboardUsers.splice(currentElement - 1, 0, m.id);
                var i_end = leaderboardMoneys.length;
                var i_inc = 1;
                if (0 > i_end) {
                  i_inc = -i_inc;
                }
                for (i = 0; i_inc >= 0 ? i <= i_end : i >= i_end; i += i_inc) {
                  var j_end = leaderboardMoneys.length;
                  var j_inc = 1;
                  if (1 > j_end) {
                    j_inc = -j_inc;
                  }
                  for (j = 1; j_inc >= 0 ? j <= j_end : j >= j_end; j += j_inc) {
                    if (leaderboardMoneys[i - 1] > leaderboardMoneys[j - 1]) {
                      supportVarForLbMoney = leaderboardMoneys[i - 1];
                      leaderboardMoneys[i - 1] = leaderboardMoneys[j - 1];
                      leaderboardMoneys[j - 1] = supportVarForLbMoney;
                      supportVarForLbUser = leaderboardUsers[i - 1];
                      leaderboardUsers[i - 1] = leaderboardUsers[j - 1];
                      leaderboardUsers[j - 1] = supportVarForLbUser;
                    }
                  }
                }
                currentElement = (typeof currentElement === "number" ? currentElement : 0) + 1;
              }
            });
            if (leaderboardMoneys.length <= 10) {
              var i_end2 = leaderboardMoneys.length;
              var i_inc2 = 1;
              if (1 > i_end2) {
                i_inc2 = -i_inc2;
              }
              for (i = 1; i_inc2 >= 0 ? i <= i_end2 : i >= i_end2; i += i_inc2) {
                textForEmbed = [
                  textForEmbed,
                  i,
                  ") ",
                  s4d.client.users.cache.get(String(leaderboardUsers[i - 1])).username,
                  ": ",
                  leaderboardMoneys[i - 1],
                  "$",
                  "\n",
                ].join("");
              }
            } else {
              for (i = 1; i <= 10; i++) {
                textForEmbed = [
                  textForEmbed,
                  i,
                  ") ",
                  s4d.client.users.cache.get(String(leaderboardUsers[i - 1])).username,
                  ": ",
                  leaderboardMoneys[i - 1],
                  "$",
                  "\n",
                ].join("");
              }
            }
            s4dfrost_real_reply.edit({
              embeds: [
                {
                  color: String("#00cccc"),
                  title: String("📊 Top 10 richest users in the server:"),
                  description: String(["**", textForEmbed, "**"].join("")),
                  footer: {
                    text: String(
                      ["To register your money on the leaderboard, type d!bal", "\n", s4dmessage.guild.name].join("")
                    ),
                    icon_url: String(
                      s4dmessage.guild.iconURL({
                        dynamic: true,
                      })
                    ),
                  },
                },
              ],
            });
          });
        return;
      } catch (err) {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String(
                [
                  "An error has occured while creating the leaderboard",
                  "\n",
                  "This error was probably caused while getting Totalmoney",
                  "\n",
                  "If you have **more than 0$** type **d!bal** to get on the leaderboard",
                  "\n",
                  "(If you are in the top 10 richest users ;) )",
                ].join("")
              ),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
    }

    /*
    D!ROB
    */
    if (s4dmessage.content.toUpperCase() == "D!ROB") {
      s4dmessage.reply({
        embeds: [
          {
            color: String("#ff0000"),
            title: String("❌ Error"),
            description: String("Please ping a valid user"),
          },
        ],
        allowedMentions: {
          repliedUser: true,
        },
      });
      return;
    } else if ((s4dmessage.content.toUpperCase() || "").startsWith("D!ROB" || "")) {
      try {
        if (!s4d.database.has(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-robtimer"].join("")))) {
          s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-robtimer"].join("")), 0);
        }
        if (
          !(
            s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-money"].join(""))) >= 5000 &&
            s4d.database.get(
              String([(s4dmessage.guild || {}).id, "-", s4dmessage.mentions.members.first(), "-money"].join(""))
            ) >= 5000
          )
        ) {
          s4dmessage.reply({
            embeds: [
              {
                color: String("#ff0000"),
                title: String("❌ Error"),
                description: String(
                  [
                    "You need at least **5000$** or more to rob someone",
                    "\n",
                    "The robbed member needs to have more than **5000$** in their wallet!",
                  ].join("")
                ),
              },
            ],
            allowedMentions: {
              repliedUser: true,
            },
          });
          return;
        }
        if (
          !(
            new Date().getTime() >
            s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-robtimer"].join(""))) + 3600000
          )
        ) {
          s4dmessage.reply({
            embeds: [
              {
                color: String("#000000"),
                description: String(
                  [
                    "⏰ Slowdown man, you can rob again: **<t:",
                    Math.floor(
                      (s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-robtimer"].join(""))) +
                        3600000) /
                        1000
                    ),
                    ":R>**",
                  ].join("")
                ),
              },
            ],
            allowedMentions: {
              repliedUser: true,
            },
          });
          return;
        }
        robCooldown = new Date().getTime();
        s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-robtimer"].join("")), robCooldown);
        if (s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-item_id4"].join(""))) == "false") {
          rand = mathRandomInt(1, 2);
        } else if (
          s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-item_id4"].join(""))) == "true"
        ) {
          rand = 1;
        }
        if (rand == 1) {
          robbedMoney =
            s4d.database.get(
              String([(s4dmessage.guild || {}).id, "-", s4dmessage.mentions.members.first(), "-money"].join(""))
            ) / 2;
          s4d.database.subtract(
            String([(s4dmessage.guild || {}).id, "-", s4dmessage.mentions.members.first(), "-money"].join("")),
            parseInt(robbedMoney)
          );
          s4d.database.add(
            String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-money"].join("")),
            parseInt(robbedMoney)
          );
          s4dmessage.reply({
            embeds: [
              {
                color: String("#33ccff"),
                title: String("Don't tell anyone! 🕵️‍♂️"),
                description: String(
                  [
                    "You stole **",
                    robbedMoney,
                    "$** from ",
                    s4d.client.users.cache.get(String(s4dmessage.mentions.members.first().id)).username,
                  ].join("")
                ),
              },
            ],
            allowedMentions: {
              repliedUser: true,
            },
          });
          return;
        } else if (rand == 2) {
          randomLostMoneyInRob = Math.ceil(
            (10 / 100) *
              (s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-money"].join(""))) +
                s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-bankmoney"].join(""))))
          );
          s4d.database.subtract(
            String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-money"].join("")),
            parseInt(randomLostMoneyInRob)
          );
          s4dmessage.reply({
            embeds: [
              new MessageEmbed()
                .setTitle(String(["👮 You got caught stealing! You lost **", randomLostMoneyInRob, "$!**"].join("")))
                .setColor(String("#33ccff"))
                .setDescription(String("🚓 🚓 🚓 🚓 🚓")),
            ],
            allowedMentions: {
              repliedUser: true,
            },
          });
          return;
        }
      } catch (err) {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("Please ping a valid user"),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
    }

    /*
    D!BAL
    */
    if (s4dmessage.content.toUpperCase() == "D!BALANCE" || s4dmessage.content.toUpperCase() == "D!BAL") {
      s4d.database.set(
        String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-totalmoney"].join("")),
        s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-money"].join(""))) +
          s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-bankmoney"].join("")))
      );
      s4dmessage.reply({
        embeds: [
          {
            color: String("#ffff33"),
            title: String("Your balance:"),
            description: String(
              [
                "**💰 Wallet money:** `",
                s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-money"].join(""))),
                "$`",
                "\n",
                "**🏦 Bank money:** `",
                s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-bankmoney"].join(""))),
                "$`",
                "\n",
                "**📊 Total money:** `",
                s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-totalmoney"].join(""))),
                "$`",
              ].join("")
            ),
          },
        ],
        allowedMentions: {
          repliedUser: true,
        },
      });
      return;
    } else if (
      (s4dmessage.content.toUpperCase() || "").startsWith("D!BALANCE" || "") ||
      (s4dmessage.content.toUpperCase() || "").startsWith("D!BAL" || "")
    ) {
      try {
        s4d.database.set(
          String([(s4dmessage.guild || {}).id, "-", s4dmessage.mentions.members.first(), "-totalmoney"].join("")),
          s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.mentions.members.first(), "-money"].join(""))) +
            s4d.database.get(
              String([(s4dmessage.guild || {}).id, "-", s4dmessage.mentions.members.first(), "-bankmoney"].join(""))
            )
        );
        s4dmessage.reply({
          embeds: [
            {
              color: String("#ffff33"),
              title: String(
                String(s4d.client.users.cache.get(String(s4dmessage.mentions.members.first().id)).username) + "'s balance:"
              ),
              description: String(
                [
                  "**💰 Wallet money:** `",
                  s4d.database.get(
                    String([(s4dmessage.guild || {}).id, "-", s4dmessage.mentions.members.first(), "-money"].join(""))
                  ),
                  "$`",
                  "\n",
                  "**🏦 Bank money:** `",
                  s4d.database.get(
                    String([(s4dmessage.guild || {}).id, "-", s4dmessage.mentions.members.first(), "-bankmoney"].join(""))
                  ),
                  "$`",
                  "\n",
                  "**📊 Total money:** `",
                  s4d.database.get(
                    String([(s4dmessage.guild || {}).id, "-", s4dmessage.mentions.members.first(), "-totalmoney"].join(""))
                  ),
                  "$`",
                ].join("")
              ),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      } catch (err) {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("Please ping a valid user"),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
    }

    /*
    D!DEPOSIT
    */
    arguments = s4dmessage.content.split(" ");
    command = arguments.splice(0, 1)[0];
    depositMoney = arguments.splice(0, 1)[0];
    if (s4dmessage.content.toUpperCase() == "D!DEPOSIT" || s4dmessage.content.toUpperCase() == "D!DEP") {
      s4dmessage.reply({
        embeds: [
          {
            color: String("#ff0000"),
            title: String("❌ Error"),
            description: String("Deposit what? **d!deposit <amount>**"),
          },
        ],
        allowedMentions: {
          repliedUser: true,
        },
      });
      return;
    } else if (s4dmessage.content.toUpperCase() == "D!DEPOSIT ALL" || s4dmessage.content.toUpperCase() == "D!DEP ALL") {
      if (!(s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-money"].join(""))) > 0)) {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Transaction failed!"),
              description: String("You have **0$** in your wallet"),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      depositAllMoney = s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-money"].join("")));
      s4d.database.subtract(
        String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-money"].join("")),
        parseInt(depositAllMoney)
      );
      s4d.database.add(
        String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-bankmoney"].join("")),
        parseInt(depositAllMoney)
      );
      s4dmessage.reply({
        embeds: [
          {
            color: String("#33ff33"),
            description: String(["✅ Successfully transfered **", depositAllMoney, "$** to your bank"].join("")),
            fields: [
              {
                name: "Transaction ended!",
                value: [
                  "💰 Now you have: **",
                  s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-money"].join(""))),
                  "$** in your wallet!",
                  "\n",
                  "🏦 Now you have: **",
                  s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-bankmoney"].join(""))),
                  "$** in your bank!",
                ].join(""),
                inline: false,
              },
            ],
          },
        ],
        allowedMentions: {
          repliedUser: true,
        },
      });
      return;
    } else if (
      (command.toUpperCase() || "").startsWith("D!DEPOSIT" || "") ||
      (command.toUpperCase() || "").startsWith("D!DEP" || "")
    ) {
      if (!(depositMoney > 0 && depositMoney % 1 === 0)) {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("Invalid number, it must be a **whole number** and **> 0**"),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      if (
        !(s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-money"].join(""))) >= depositMoney)
      ) {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Transaction failed!"),
              description: String(
                [
                  "You need **",
                  depositMoney -
                    s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-money"].join(""))),
                  "$** to deposit that amount of money!",
                ].join("")
              ),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      s4d.database.subtract(
        String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-money"].join("")),
        parseInt(depositMoney)
      );
      s4d.database.add(
        String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-bankmoney"].join("")),
        parseInt(depositMoney)
      );
      s4dmessage.reply({
        embeds: [
          {
            color: String("#33ff33"),
            description: String(["✅ Successfully transfered **", depositMoney, "$** to your bank"].join("")),
            fields: [
              {
                name: "Transaction ended!",
                value: [
                  "💰 Now you have: **",
                  s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-money"].join(""))),
                  "$** in your wallet!",
                  "\n",
                  "🏦 Now you have: **",
                  s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-bankmoney"].join(""))),
                  "$** in your bank!",
                ].join(""),
                inline: false,
              },
            ],
          },
        ],
        allowedMentions: {
          repliedUser: true,
        },
      });
      return;
    }

    /*
    D!WITHDRAW
    */
    arguments = s4dmessage.content.split(" ");
    command = arguments.splice(0, 1)[0];
    withdrawMoney = arguments.splice(0, 1)[0];
    if (s4dmessage.content.toUpperCase() == "D!WITHDRAW" || s4dmessage.content.toUpperCase() == "D!WITH") {
      s4dmessage.reply({
        embeds: [
          {
            color: String("#ff0000"),
            title: String("❌ Error"),
            description: String("WIthdraw what? **d!withdraw <amount>**"),
          },
        ],
        allowedMentions: {
          repliedUser: true,
        },
      });
      return;
    } else if (s4dmessage.content.toUpperCase() == "D!WITHDRAW ALL" || s4dmessage.content.toUpperCase() == "D!WITH ALL") {
      if (!(s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-bankmoney"].join(""))) > 0)) {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Transaction failed!"),
              description: String("You have **0$** in bank"),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      withdrawAllMoney = s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-bankmoney"].join("")));
      s4d.database.subtract(
        String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-bankmoney"].join("")),
        parseInt(withdrawAllMoney)
      );
      s4d.database.add(
        String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-money"].join("")),
        parseInt(withdrawAllMoney)
      );
      s4dmessage.reply({
        embeds: [
          {
            color: String("#33ff33"),
            description: String(["✅ Successfully transfered **", withdrawAllMoney, "$** to your wallet"].join("")),
            fields: [
              {
                name: "Transaction ended!",
                value: [
                  "💰 Now you have: **",
                  s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-money"].join(""))),
                  "$** in your wallet!",
                  "\n",
                  "🏦 Now you have: **",
                  s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-bankmoney"].join(""))),
                  "$** in your bank!",
                ].join(""),
                inline: false,
              },
            ],
          },
        ],
        allowedMentions: {
          repliedUser: true,
        },
      });
      return;
    } else if (
      (command.toUpperCase() || "").startsWith("D!WITHDRAW" || "") ||
      (command.toUpperCase() || "").startsWith("D!WITH" || "")
    ) {
      if (!(withdrawMoney > 0 && withdrawMoney % 1 === 0)) {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Transaction failed!"),
              description: String("Invalid number, it must be a **whole number** and **> 0**"),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      if (
        !(
          s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-bankmoney"].join(""))) >=
          withdrawMoney
        )
      ) {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Transaction failed!"),
              description: String(
                [
                  "You need at least **",
                  withdrawMoney -
                    s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-money"].join(""))),
                  "$** in your bank!",
                ].join("")
              ),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      s4d.database.subtract(
        String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-bankmoney"].join("")),
        parseInt(withdrawMoney)
      );
      s4d.database.add(
        String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-money"].join("")),
        parseInt(withdrawMoney)
      );
      s4dmessage.reply({
        embeds: [
          {
            color: String("#33ff33"),
            description: String(["✅ Successfully transfered **", withdrawMoney, "$** to your wallet"].join("")),
            fields: [
              {
                name: "Transaction ended!",
                value: [
                  "💰 Now you have: **",
                  s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-money"].join(""))),
                  "$** in your wallet!",
                  "\n",
                  "🏦 Now you have: **",
                  s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-bankmoney"].join(""))),
                  "$** in your bank!",
                ].join(""),
                inline: false,
              },
            ],
          },
        ],
        allowedMentions: {
          repliedUser: true,
        },
      });
      return;
    }

    /*
    D!GIVE
    */
    arguments = s4dmessage.content.split(" ");
    command = arguments.splice(0, 1)[0];
    giveMoney = arguments.splice(1, 1)[0];
    if (s4dmessage.content.toUpperCase() == "D!GIVE") {
      s4dmessage.reply({
        embeds: [
          {
            color: String("#ff0000"),
            title: String("❌ Error"),
            description: String(" Give what? Type: **d!give <amount> <username>**"),
          },
        ],
        allowedMentions: {
          repliedUser: true,
        },
      });
      return;
    } else if (command.toUpperCase() == "D!GIVE") {
      try {
        if (!(giveMoney > 0 && giveMoney % 1 === 0)) {
          s4dmessage.reply({
            embeds: [
              {
                color: String("#ff0000"),
                title: String("❌ Error"),
                description: String("Invalid number, it must be a **whole number** and **> 0**"),
              },
            ],
            allowedMentions: {
              repliedUser: true,
            },
          });
          return;
        }
        if (
          !(s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-money"].join(""))) >= giveMoney)
        ) {
          s4dmessage.reply({
            embeds: [
              {
                color: String("#ff0000"),
                title: String("❌ Transaction failed!"),
                description: String(
                  [
                    "You need **",
                    giveMoney -
                      s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-money"].join(""))),
                    "$** to send that ammount of money!",
                  ].join("")
                ),
              },
            ],
            allowedMentions: {
              repliedUser: true,
            },
          });
          return;
        }
        if (
          !s4d.database.has(String([(s4dmessage.guild || {}).id, "-", s4dmessage.mentions.members.first(), "-money"].join("")))
        ) {
          s4d.database.set(
            String([(s4dmessage.guild || {}).id, "-", s4dmessage.mentions.members.first(), "-money"].join("")),
            0
          );
        }
        s4d.database.add(
          String([(s4dmessage.guild || {}).id, "-", s4dmessage.mentions.members.first(), "-money"].join("")),
          parseInt(giveMoney)
        );
        s4d.database.subtract(
          String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-money"].join("")),
          parseInt(giveMoney)
        );
        s4dmessage.reply({
          embeds: [
            {
              color: String("#33ff33"),
              title: String("✅ Done!"),
              description: String(
                [
                  "You successfully gave **",
                  giveMoney,
                  "$** ",
                  "to **",
                  s4d.client.users.cache.get(String(s4dmessage.mentions.members.first().id)).username,
                  "**!",
                ].join("")
              ),
              fields: [
                {
                  name: "Transaction ended!",
                  value: [
                    "💰 Now you have: **",
                    s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-money"].join(""))),
                    "$** in your wallet!",
                  ].join(""),
                  inline: false,
                },
              ],
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      } catch (err) {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("Please ping a valid user"),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
    }

    /*
    D!ADD (Admin)
    */
    arguments = s4dmessage.content.split(" ");
    command = arguments.splice(0, 1)[0];
    addMoney = arguments.splice(1, 1)[0];
    if (s4dmessage.content.toUpperCase() == "D!ADD") {
      if (!s4dmessage.member.permissions.has(Permissions.FLAGS.MANAGE_GUILD)) {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("You don't have the permission for this!"),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      s4dmessage.reply({
        embeds: [
          {
            color: String("#ff0000"),
            title: String("❌ Error"),
            description: String("Add what? Type: **d!add <username> <amount>**"),
          },
        ],
        allowedMentions: {
          repliedUser: true,
        },
      });
      return;
    } else if (command.toUpperCase() == "D!ADD") {
      try {
        if (!s4dmessage.member.permissions.has(Permissions.FLAGS.MANAGE_GUILD)) {
          s4dmessage.reply({
            embeds: [
              {
                color: String("#ff0000"),
                title: String("❌ Error"),
                description: String("You don't have the permission for this!"),
              },
            ],
            allowedMentions: {
              repliedUser: true,
            },
          });
          return;
        }
        if (!(addMoney > 0 && addMoney % 1 === 0 && addMoney <= 100000)) {
          s4dmessage.reply({
            embeds: [
              {
                color: String("#ff0000"),
                title: String("❌ Error"),
                description: String("Invalid number, it must be a **whole number** and **>0** and <= **100000**"),
              },
            ],
            allowedMentions: {
              repliedUser: true,
            },
          });
          return;
        }
        if (
          !s4d.database.has(String([(s4dmessage.guild || {}).id, "-", s4dmessage.mentions.members.first(), "-money"].join("")))
        ) {
          s4d.database.set(
            String([(s4dmessage.guild || {}).id, "-", s4dmessage.mentions.members.first(), "-money"].join("")),
            0
          );
        }
        s4d.database.add(
          String([(s4dmessage.guild || {}).id, "-", s4dmessage.mentions.members.first(), "-money"].join("")),
          parseInt(addMoney)
        );
        s4dmessage.reply({
          embeds: [
            {
              color: String("#33ff33"),
              title: String("✅ Done!"),
              description: String(
                [
                  "You successfully added **",
                  addMoney,
                  "$** ",
                  "to **",
                  s4d.client.users.cache.get(String(s4dmessage.mentions.members.first().id)).username,
                  "**!",
                ].join("")
              ),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      } catch (err) {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("Please ping a valid user"),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
    }

    /*
    D!REMOVE (Admin)
    */
    arguments = s4dmessage.content.split(" ");
    command = arguments.splice(0, 1)[0];
    removeMoney = arguments.splice(1, 1)[0];
    if (s4dmessage.content.toUpperCase() == "D!REMOVE") {
      if (!s4dmessage.member.permissions.has(Permissions.FLAGS.MANAGE_GUILD)) {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("You don't have the permission for this!"),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      s4dmessage.reply({
        embeds: [
          {
            color: String("#ff0000"),
            title: String("❌ Error"),
            description: String("Remove what? Type: **d!remove <username> <amount>**"),
          },
        ],
        allowedMentions: {
          repliedUser: true,
        },
      });
      return;
    } else if (command.toUpperCase() == "D!REMOVE") {
      try {
        if (!s4dmessage.member.permissions.has(Permissions.FLAGS.MANAGE_GUILD)) {
          s4dmessage.reply({
            embeds: [
              {
                color: String("#ff0000"),
                title: String("❌ Error"),
                description: String("You don't have the permission for this!"),
              },
            ],
            allowedMentions: {
              repliedUser: true,
            },
          });
          return;
        }
        if (!(removeMoney > 0 && removeMoney % 1 === 0 && removeMoney <= 100000)) {
          s4dmessage.reply({
            embeds: [
              {
                color: String("#ff0000"),
                title: String("❌ Error"),
                description: String("Invalid number, it must be a **whole number** and **>0** and <= **100000**"),
              },
            ],
            allowedMentions: {
              repliedUser: true,
            },
          });
          return;
        }
        if (
          !s4d.database.has(String([(s4dmessage.guild || {}).id, "-", s4dmessage.mentions.members.first(), "-money"].join("")))
        ) {
          s4d.database.set(
            String([(s4dmessage.guild || {}).id, "-", s4dmessage.mentions.members.first(), "-money"].join("")),
            0
          );
        }
        s4d.database.subtract(
          String([(s4dmessage.guild || {}).id, "-", s4dmessage.mentions.members.first(), "-money"].join("")),
          parseInt(removeMoney)
        );
        s4dmessage.reply({
          embeds: [
            {
              color: String("#33ff33"),
              title: String("✅ Done!"),
              description: String(
                [
                  "You successfully removed **",
                  removeMoney,
                  "$** ",
                  "from **",
                  s4d.client.users.cache.get(String(s4dmessage.mentions.members.first().id)).username,
                  "**!",
                ].join("")
              ),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      } catch (err) {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("Please ping a valid user"),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
    }

    /*
    D!DAILY
    */
    if ((s4dmessage.content.toUpperCase() || "").startsWith("D!DAILY" || "")) {
      if (!s4d.database.has(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-dailytimer"].join("")))) {
        s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-dailytimer"].join("")), 0);
      }
      if (
        !(
          new Date().getTime() >
          s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-dailytimer"].join(""))) + 86400000
        )
      ) {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#000000"),
              description: String(
                [
                  "⏰ Slowdown man, next claim: **<t:",
                  Math.floor(
                    (s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-dailytimer"].join(""))) +
                      86400000) /
                      1000
                  ),
                  ":R>**",
                ].join("")
              ),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      dailyCooldown = new Date().getTime();
      s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-dailytimer"].join("")), dailyCooldown);
      s4dmessage
        .reply({
          embeds: [
            {
              color: String("#33ff33"),
              title: String("🎁 Claiming..."),
              description: String("You can claim your daily reward of **500$**"),
            },
          ],
          components: [
            new MessageActionRow().addComponents(
              new MessageButton().setCustomId("daily_claim").setLabel("Claim").setDisabled(false).setStyle("PRIMARY")
            ),
          ],
        })
        .then(async (m) => {
          let collector = m.createMessageComponentCollector({
            filter: (i) => i.user.id === s4dmessage.author.id,
            time: Number(60000) * 1000,
          });
          collector.on("collect", async (i) => {
            if (i.customId == "daily_claim") {
              await i
                .update({
                  embeds: [
                    {
                      color: String("#33ff33"),
                      title: String("🎁 Congratulation"),
                      description: String("You claimed **500$**!"),
                    },
                  ],
                  components: [
                    new MessageActionRow().addComponents(
                      new MessageButton().setCustomId("daily_claim").setLabel("Claim").setDisabled(true).setStyle("SUCCESS")
                    ),
                  ],
                })
                .then(async (m) => {
                  s4d.database.add(
                    String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-money"].join("")),
                    parseInt(500)
                  );
                  return;
                });
            }
          });
        });
      return;
    }

    /*
    D!DUPE
    */
    if ((s4dmessage.content.toUpperCase() || "").startsWith("D!DUPE" || "")) {
      if (!s4d.database.has(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-dupetimer"].join("")))) {
        s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-dupetimer"].join("")), 0);
      }
      if (
        !(
          new Date().getTime() >
          s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-dupetimer"].join(""))) + 21600000
        )
      ) {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#000000"),
              description: String(
                [
                  "⏰ Slowdown man, you can dupe again: **<t:",
                  Math.floor(
                    (s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-dupetimer"].join(""))) +
                      21600000) /
                      1000
                  ),
                  ":R>**",
                ].join("")
              ),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      dupeCooldown = new Date().getTime();
      s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-dupetimer"].join("")), dupeCooldown);
      popbobDupeProbs = mathRandomInt(1, 4);
      if (popbobDupeProbs < 4) {
        s4dmessage
          .reply({
            embeds: [
              {
                color: String("#ff6600"),
                title: String("Available dupes:"),
                description: String("Here is the list of available doops :)"),
                footer: {
                  text: String("Click the buttons to choose!"),
                  icon_url: String(),
                },
              },
            ],
            components: [
              new MessageActionRow().addComponents(
                new MessageButton().setCustomId("donkey_dupe").setLabel("Donkey").setDisabled(false).setStyle("PRIMARY"),
                new MessageButton().setCustomId("altf4_dupe").setLabel("Alt F4").setDisabled(false).setStyle("PRIMARY"),
                new MessageButton().setCustomId("chunk_dupe").setLabel("Chunk").setDisabled(false).setStyle("PRIMARY")
              ),
            ],
          })
          .then(async (m) => {
            let collector = m.createMessageComponentCollector({
              filter: (i) => i.user.id === s4dmessage.author.id,
              time: Number(60000) * 1000,
            });
            collector.on("collect", async (i) => {
              if (i.customId == "donkey_dupe") {
                await i
                  .update({
                    embeds: [
                      {
                        color: String("#33cc00"),
                        title: String("You choose Donkey dupe!"),
                        description: String("Time to do the classic dupe exploit"),
                      },
                    ],
                    components: [
                      new MessageActionRow().addComponents(
                        new MessageButton().setCustomId("donkey_dupe").setLabel("Donkey").setDisabled(true).setStyle("SUCCESS"),
                        new MessageButton()
                          .setCustomId("altf4_dupe")
                          .setLabel("Alt F4")
                          .setDisabled(true)
                          .setStyle("SECONDARY"),
                        new MessageButton().setCustomId("chunk_dupe").setLabel("Chunk").setDisabled(true).setStyle("SECONDARY")
                      ),
                    ],
                  })
                  .then(async (m) => {
                    dupeProbs = mathRandomInt(1, 3);
                    if (dupeProbs == 1) {
                      tempMoneyVar = Math.ceil(
                        (10 / 100) *
                          (s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-money"].join(""))) +
                            s4d.database.get(
                              String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-bankmoney"].join(""))
                            ))
                      );
                      s4d.database.subtract(
                        String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-money"].join("")),
                        parseInt(tempMoneyVar)
                      );
                      s4dmessage
                        .reply({
                          embeds: [
                            {
                              color: String("#ff6600"),
                              title: String("🖥️ You start doing the Donkey dupe..."),
                            },
                          ],
                          allowedMentions: {
                            repliedUser: true,
                          },
                        })
                        .then(async (s4dfrost_real_reply) => {
                          await delay(Number(2) * 1000);
                          s4dfrost_real_reply.edit({
                            embeds: [
                              {
                                color: String("#ff0000"),
                                title: String("Hausemaster caught you!"),
                                description: String(["Hause saw you duping, you lost **", tempMoneyVar, "**$ :("].join("")),
                              },
                            ],
                          });
                        });
                      return;
                    } else if (dupeProbs == 2 || dupeProbs == 3) {
                      dupeMoney = mathRandomInt(100, 250);
                      s4d.database.add(
                        String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-money"].join("")),
                        parseInt(dupeMoney)
                      );
                      s4dmessage
                        .reply({
                          embeds: [
                            {
                              color: String("#ff6600"),
                              title: String("🖥️ You start doing the Donkey dupe..."),
                            },
                          ],
                          allowedMentions: {
                            repliedUser: true,
                          },
                        })
                        .then(async (s4dfrost_real_reply) => {
                          await delay(Number(2) * 1000);
                          s4dfrost_real_reply.edit({
                            embeds: [
                              {
                                color: String("#33ff33"),
                                title: String("✅ You duped!"),
                                description: String(["You successfully duped and got **", dupeMoney, "$**!"].join("")),
                              },
                            ],
                          });
                        });
                      return;
                    }
                  });
              } else if (i.customId == "altf4_dupe") {
                await i
                  .update({
                    embeds: [
                      {
                        color: String("#33cc00"),
                        title: String("You choose Alt F4 dupe!"),
                        description: String("Totally 100% not scam :troll:"),
                      },
                    ],
                    components: [
                      new MessageActionRow().addComponents(
                        new MessageButton()
                          .setCustomId("donkey_dupe")
                          .setLabel("Donkey")
                          .setDisabled(true)
                          .setStyle("SECONDARY"),
                        new MessageButton().setCustomId("altf4_dupe").setLabel("Alt F4").setDisabled(true).setStyle("SUCCESS"),
                        new MessageButton().setCustomId("chunk_dupe").setLabel("Chunk").setDisabled(true).setStyle("SECONDARY")
                      ),
                    ],
                  })
                  .then(async (m) => {
                    dupeProbs = mathRandomInt(1, 3);
                    if (dupeProbs == 1) {
                      tempMoneyVar = Math.ceil(
                        (10 / 100) *
                          (s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-money"].join(""))) +
                            s4d.database.get(
                              String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-bankmoney"].join(""))
                            ))
                      );
                      s4d.database.subtract(
                        String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-money"].join("")),
                        parseInt(tempMoneyVar)
                      );
                      s4dmessage
                        .reply({
                          embeds: [
                            {
                              color: String("#ff6600"),
                              title: String("🖥️ You start doing the Alt F4 dupe...lol..."),
                            },
                          ],
                          allowedMentions: {
                            repliedUser: true,
                          },
                        })
                        .then(async (s4dfrost_real_reply) => {
                          await delay(Number(2) * 1000);
                          s4dfrost_real_reply.edit({
                            embeds: [
                              {
                                color: String("#ff0000"),
                                title: String("Hausemaster caught you!"),
                                description: String(["Hause saw you duping, you lost **", tempMoneyVar, "**$ :("].join("")),
                              },
                            ],
                          });
                        });
                      return;
                    } else if (dupeProbs == 2 || dupeProbs == 3) {
                      dupeMoney = mathRandomInt(100, 250);
                      s4d.database.add(
                        String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-money"].join("")),
                        parseInt(dupeMoney)
                      );
                      s4dmessage
                        .reply({
                          embeds: [
                            {
                              color: String("#ff6600"),
                              title: String("🖥️ You start doing the Alt F4 dupe...lol..."),
                            },
                          ],
                          allowedMentions: {
                            repliedUser: true,
                          },
                        })
                        .then(async (s4dfrost_real_reply) => {
                          await delay(Number(2) * 1000);
                          s4dfrost_real_reply.edit({
                            embeds: [
                              {
                                color: String("#33ff33"),
                                title: String("✅ You duped!"),
                                description: String(["You successfully duped and got **", dupeMoney, "$**!"].join("")),
                                footer: {
                                  text: String("(Alt F4 dupe best)"),
                                  icon_url: String(),
                                },
                              },
                            ],
                          });
                        });
                      return;
                    }
                  });
              } else if (i.customId == "chunk_dupe") {
                await i
                  .update({
                    embeds: [
                      {
                        color: String("#33cc00"),
                        title: String("You choose Chunk dupe!"),
                        description: String("Fast dupe glitch"),
                      },
                    ],
                    components: [
                      new MessageActionRow().addComponents(
                        new MessageButton()
                          .setCustomId("donkey_dupe")
                          .setLabel("Donkey")
                          .setDisabled(true)
                          .setStyle("SECONDARY"),
                        new MessageButton()
                          .setCustomId("altf4_dupe")
                          .setLabel("Alt F4")
                          .setDisabled(true)
                          .setStyle("SECONDARY"),
                        new MessageButton().setCustomId("chunk_dupe").setLabel("Chunk").setDisabled(true).setStyle("SUCCESS")
                      ),
                    ],
                  })
                  .then(async (m) => {
                    dupeProbs = mathRandomInt(1, 3);
                    if (dupeProbs == 1) {
                      tempMoneyVar = Math.ceil(
                        (10 / 100) *
                          (s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-money"].join(""))) +
                            s4d.database.get(
                              String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-bankmoney"].join(""))
                            ))
                      );
                      s4d.database.subtract(
                        String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-money"].join("")),
                        parseInt(tempMoneyVar)
                      );
                      s4dmessage
                        .reply({
                          embeds: [
                            {
                              color: String("#ff6600"),
                              title: String("🖥️ You start doing the Chunk dupe..."),
                            },
                          ],
                          allowedMentions: {
                            repliedUser: true,
                          },
                        })
                        .then(async (s4dfrost_real_reply) => {
                          await delay(Number(2) * 1000);
                          s4dfrost_real_reply.edit({
                            embeds: [
                              {
                                color: String("#ff0000"),
                                title: String("Hausemaster caught you!"),
                                description: String(["Hause saw you duping, you lost **", tempMoneyVar, "**$ :("].join("")),
                              },
                            ],
                          });
                        });
                      return;
                    } else if (dupeProbs == 2 || dupeProbs == 3) {
                      dupeMoney = mathRandomInt(100, 250);
                      s4d.database.add(
                        String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-money"].join("")),
                        parseInt(dupeMoney)
                      );
                      s4dmessage
                        .reply({
                          embeds: [
                            {
                              color: String("#ff6600"),
                              title: String("🖥️ You start doing the Chunk dupe..."),
                            },
                          ],
                          allowedMentions: {
                            repliedUser: true,
                          },
                        })
                        .then(async (s4dfrost_real_reply) => {
                          await delay(Number(2) * 1000);
                          s4dfrost_real_reply.edit({
                            embeds: [
                              {
                                color: String("#33ff33"),
                                title: String("✅ You duped!"),
                                description: String(["You successfully duped and got **", dupeMoney, "$**!"].join("")),
                              },
                            ],
                          });
                        });
                      return;
                    }
                  });
              }
            });
          });
        return;
      } else if (popbobDupeProbs == 4) {
        s4dmessage
          .reply({
            embeds: [
              {
                color: String("#ff6600"),
                title: String("Available dupes:"),
                description: String("Here is the list of available doops :)"),
                footer: {
                  text: String("Click the buttons to choose!"),
                  icon_url: String(),
                },
              },
            ],
            components: [
              new MessageActionRow().addComponents(
                new MessageButton().setCustomId("donkey_dupe").setLabel("Donkey").setDisabled(false).setStyle("PRIMARY"),
                new MessageButton().setCustomId("altf4_dupe").setLabel("Alt F4").setDisabled(false).setStyle("PRIMARY"),
                new MessageButton().setCustomId("chunk_dupe").setLabel("Chunk").setDisabled(false).setStyle("PRIMARY"),
                new MessageButton().setCustomId("popbob_dupe").setLabel("popbob").setDisabled(false).setStyle("PRIMARY")
              ),
            ],
          })
          .then(async (m) => {
            let collector = m.createMessageComponentCollector({
              filter: (i) => i.user.id === s4dmessage.author.id,
              time: Number(60000) * 1000,
            });
            collector.on("collect", async (i) => {
              if (i.customId == "donkey_dupe") {
                await i
                  .update({
                    embeds: [
                      {
                        color: String("#33cc00"),
                        title: String("You choose Donkey dupe!"),
                        description: String("Time to do the classic dupe exploit"),
                      },
                    ],
                    components: [
                      new MessageActionRow().addComponents(
                        new MessageButton().setCustomId("donkey_dupe").setLabel("Donkey").setDisabled(true).setStyle("SUCCESS"),
                        new MessageButton()
                          .setCustomId("altf4_dupe")
                          .setLabel("Alt F4")
                          .setDisabled(true)
                          .setStyle("SECONDARY"),
                        new MessageButton().setCustomId("chunk_dupe").setLabel("Chunk").setDisabled(true).setStyle("SECONDARY"),
                        new MessageButton()
                          .setCustomId("popbob_dupe")
                          .setLabel("popbob")
                          .setDisabled(true)
                          .setStyle("SECONDARY")
                      ),
                    ],
                  })
                  .then(async (m) => {
                    dupeProbs = mathRandomInt(1, 3);
                    if (dupeProbs == 1) {
                      tempMoneyVar = Math.ceil(
                        (10 / 100) *
                          (s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-money"].join(""))) +
                            s4d.database.get(
                              String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-bankmoney"].join(""))
                            ))
                      );
                      s4d.database.subtract(
                        String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-money"].join("")),
                        parseInt(tempMoneyVar)
                      );
                      s4dmessage
                        .reply({
                          embeds: [
                            {
                              color: String("#ff6600"),
                              title: String("🖥️ You start doing the Donkey dupe..."),
                            },
                          ],
                          allowedMentions: {
                            repliedUser: true,
                          },
                        })
                        .then(async (s4dfrost_real_reply) => {
                          await delay(Number(2) * 1000);
                          s4dfrost_real_reply.edit({
                            embeds: [
                              {
                                color: String("#ff0000"),
                                title: String("Hausemaster caught you!"),
                                description: String(["Hause saw you duping, you lost **", tempMoneyVar, "**$ :("].join("")),
                              },
                            ],
                          });
                        });
                      return;
                    } else if (dupeProbs == 2 || dupeProbs == 3) {
                      dupeMoney = mathRandomInt(100, 250);
                      s4d.database.add(
                        String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-money"].join("")),
                        parseInt(dupeMoney)
                      );
                      s4dmessage
                        .reply({
                          embeds: [
                            {
                              color: String("#ff6600"),
                              title: String("🖥️ You start doing the Donkey dupe..."),
                            },
                          ],
                          allowedMentions: {
                            repliedUser: true,
                          },
                        })
                        .then(async (s4dfrost_real_reply) => {
                          await delay(Number(2) * 1000);
                          s4dfrost_real_reply.edit({
                            embeds: [
                              {
                                color: String("#33ff33"),
                                title: String("✅ You duped!"),
                                description: String(["You successfully duped and got **", dupeMoney, "$**!"].join("")),
                              },
                            ],
                          });
                        });
                      return;
                    }
                  });
              } else if (i.customId == "altf4_dupe") {
                await i
                  .update({
                    embeds: [
                      {
                        color: String("#33cc00"),
                        title: String("You choose Alt F4 dupe!"),
                        description: String("Totally 100% not scam :troll:"),
                      },
                    ],
                    components: [
                      new MessageActionRow().addComponents(
                        new MessageButton()
                          .setCustomId("donkey_dupe")
                          .setLabel("Donkey")
                          .setDisabled(true)
                          .setStyle("SECONDARY"),
                        new MessageButton().setCustomId("altf4_dupe").setLabel("Alt F4").setDisabled(true).setStyle("SUCCESS"),
                        new MessageButton().setCustomId("chunk_dupe").setLabel("Chunk").setDisabled(true).setStyle("SECONDARY"),
                        new MessageButton()
                          .setCustomId("popbob_dupe")
                          .setLabel("popbob")
                          .setDisabled(true)
                          .setStyle("SECONDARY")
                      ),
                    ],
                  })
                  .then(async (m) => {
                    dupeProbs = mathRandomInt(1, 3);
                    if (dupeProbs == 1) {
                      tempMoneyVar = Math.ceil(
                        (10 / 100) *
                          (s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-money"].join(""))) +
                            s4d.database.get(
                              String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-bankmoney"].join(""))
                            ))
                      );
                      s4d.database.subtract(
                        String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-money"].join("")),
                        parseInt(tempMoneyVar)
                      );
                      s4dmessage
                        .reply({
                          embeds: [
                            {
                              color: String("#ff6600"),
                              title: String("🖥️ You start doing the Alt F4 dupe...lol..."),
                            },
                          ],
                          allowedMentions: {
                            repliedUser: true,
                          },
                        })
                        .then(async (s4dfrost_real_reply) => {
                          await delay(Number(2) * 1000);
                          s4dfrost_real_reply.edit({
                            embeds: [
                              {
                                color: String("#ff0000"),
                                title: String("Hausemaster caught you!"),
                                description: String(["Hause saw you duping, you lost **", tempMoneyVar, "**$ :("].join("")),
                              },
                            ],
                          });
                        });
                      return;
                    } else if (dupeProbs == 2 || dupeProbs == 3) {
                      dupeMoney = mathRandomInt(100, 250);
                      s4d.database.add(
                        String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-money"].join("")),
                        parseInt(dupeMoney)
                      );
                      s4dmessage
                        .reply({
                          embeds: [
                            {
                              color: String("#ff6600"),
                              title: String("🖥️ You start doing the Alt F4 dupe...lol..."),
                            },
                          ],
                          allowedMentions: {
                            repliedUser: true,
                          },
                        })
                        .then(async (s4dfrost_real_reply) => {
                          await delay(Number(2) * 1000);
                          s4dfrost_real_reply.edit({
                            embeds: [
                              {
                                color: String("#33ff33"),
                                title: String("✅ You duped!"),
                                description: String(["You successfully duped and got **", dupeMoney, "$**!"].join("")),
                                footer: {
                                  text: String("(Alt F4 dupe best)"),
                                  icon_url: String(),
                                },
                              },
                            ],
                          });
                        });
                      return;
                    }
                  });
              } else if (i.customId == "chunk_dupe") {
                await i
                  .update({
                    embeds: [
                      {
                        color: String("#33cc00"),
                        title: String("You choose Chunk dupe!"),
                        description: String("Fast dupe glitch"),
                      },
                    ],
                    components: [
                      new MessageActionRow().addComponents(
                        new MessageButton()
                          .setCustomId("donkey_dupe")
                          .setLabel("Donkey")
                          .setDisabled(true)
                          .setStyle("SECONDARY"),
                        new MessageButton()
                          .setCustomId("altf4_dupe")
                          .setLabel("Alt F4")
                          .setDisabled(true)
                          .setStyle("SECONDARY"),
                        new MessageButton().setCustomId("chunk_dupe").setLabel("Chunk").setDisabled(true).setStyle("SUCCESS"),
                        new MessageButton()
                          .setCustomId("popbob_dupe")
                          .setLabel("popbob")
                          .setDisabled(true)
                          .setStyle("SECONDARY")
                      ),
                    ],
                  })
                  .then(async (m) => {
                    dupeProbs = mathRandomInt(1, 3);
                    if (dupeProbs == 1) {
                      tempMoneyVar = Math.ceil(
                        (10 / 100) *
                          (s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-money"].join(""))) +
                            s4d.database.get(
                              String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-bankmoney"].join(""))
                            ))
                      );
                      s4d.database.subtract(
                        String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-money"].join("")),
                        parseInt(tempMoneyVar)
                      );
                      s4dmessage
                        .reply({
                          embeds: [
                            {
                              color: String("#ff6600"),
                              title: String("🖥️ You start doing the Chunk dupe..."),
                            },
                          ],
                          allowedMentions: {
                            repliedUser: true,
                          },
                        })
                        .then(async (s4dfrost_real_reply) => {
                          await delay(Number(2) * 1000);
                          s4dfrost_real_reply.edit({
                            embeds: [
                              {
                                color: String("#ff0000"),
                                title: String("Hausemaster caught you!"),
                                description: String(["Hause saw you duping, you lost **", tempMoneyVar, "**$ :("].join("")),
                              },
                            ],
                          });
                        });
                      return;
                    } else if (dupeProbs == 2 || dupeProbs == 3) {
                      dupeMoney = mathRandomInt(100, 250);
                      s4d.database.add(
                        String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-money"].join("")),
                        parseInt(dupeMoney)
                      );
                      s4dmessage
                        .reply({
                          embeds: [
                            {
                              color: String("#ff6600"),
                              title: String("🖥️ You start doing the Chunk dupe..."),
                            },
                          ],
                          allowedMentions: {
                            repliedUser: true,
                          },
                        })
                        .then(async (s4dfrost_real_reply) => {
                          await delay(Number(2) * 1000);
                          s4dfrost_real_reply.edit({
                            embeds: [
                              {
                                color: String("#33ff33"),
                                title: String("✅ You duped!"),
                                description: String(["You successfully duped and got **", dupeMoney, "$**!"].join("")),
                              },
                            ],
                          });
                        });
                      return;
                    }
                  });
              } else if (i.customId == "popbob_dupe") {
                await i
                  .update({
                    embeds: [
                      {
                        color: String("#33cc00"),
                        title: String("You choose popbob sex dupe!"),
                        description: String("You will get A LOT OF money"),
                      },
                    ],
                    components: [
                      new MessageActionRow().addComponents(
                        new MessageButton()
                          .setCustomId("donkey_dupe")
                          .setLabel("Donkey")
                          .setDisabled(true)
                          .setStyle("SECONDARY"),
                        new MessageButton()
                          .setCustomId("altf4_dupe")
                          .setLabel("Alt F4")
                          .setDisabled(true)
                          .setStyle("SECONDARY"),
                        new MessageButton().setCustomId("chunk_dupe").setLabel("Chunk").setDisabled(true).setStyle("SECONDARY"),
                        new MessageButton().setCustomId("popbob_dupe").setLabel("popbob").setDisabled(true).setStyle("SUCCESS")
                      ),
                    ],
                  })
                  .then(async (m) => {
                    dupeMoney = mathRandomInt(300, 600);
                    s4d.database.add(
                      String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-money"].join("")),
                      parseInt(dupeMoney)
                    );
                    s4dmessage
                      .reply({
                        embeds: [
                          {
                            color: String("#ff6600"),
                            title: String("🖥️ You start doing the POPBOB SEX DUPE... 👀"),
                          },
                        ],
                        allowedMentions: {
                          repliedUser: true,
                        },
                      })
                      .then(async (s4dfrost_real_reply) => {
                        await delay(Number(2) * 1000);
                        s4dfrost_real_reply.edit({
                          embeds: [
                            {
                              color: String("#33ff33"),
                              title: String("✅ You did ultimate dupe!"),
                              description: String(
                                ["You successfully did the ***popbob sex dupe*** and you got **", dupeMoney, "$**!"].join("")
                              ),
                            },
                          ],
                        });
                      });
                    return;
                  });
              }
            });
          });
        return;
      }
      return;
    }

    /*
    D!MINE
    */
    if ((s4dmessage.content.toUpperCase() || "").startsWith("D!MINE" || "")) {
      if (s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-item_id13"].join(""))) == "false") {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("You need to buy a **pickaxe** to mine"),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      if (!s4d.database.has(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-minetimer"].join("")))) {
        s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-minetimer"].join("")), 0);
      }
      if (
        !(
          new Date().getTime() >
          s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-minetimer"].join(""))) + 3600000
        )
      ) {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#000000"),
              description: String(
                [
                  "⏰ Slowdown man, you can mine again: **<t:",
                  Math.floor(
                    (s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-minetimer"].join(""))) +
                      3600000) /
                      1000
                  ),
                  ":R>**",
                ].join("")
              ),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      mineCooldown = new Date().getTime();
      s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-minetimer"].join("")), mineCooldown);
      s4dmessage
        .reply({
          embeds: [
            {
              color: String("#666666"),
              title: String("👷‍♂️⛏️⬛⬛⬛⬛⬛⬛⬛⬛⬛"),
              description: String("You are mining, let's hope you find something"),
              footer: {
                text: String("Minecraft bottom text"),
                icon_url: String(),
              },
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        })
        .then(async (s4dfrost_real_reply) => {
          await delay(Number(1) * 1000);
          s4dfrost_real_reply.edit({
            embeds: [
              {
                color: String("#666666"),
                title: String("👷‍♂️⛏️⬛⬛⬛⬛⬛⬛⬛⬛"),
                description: String("You are mining, let's hope you find something"),
                footer: {
                  text: String("Minecraft bottom text"),
                  icon_url: String(),
                },
              },
            ],
          });
          await delay(Number(1) * 1000);
          s4dfrost_real_reply.edit({
            embeds: [
              {
                color: String("#666666"),
                title: String("👷‍♂️⛏️⬛⬛⬛⬛⬛⬛⬛"),
                description: String("You are mining, let's hope you find something"),
                footer: {
                  text: String("Minecraft bottom text"),
                  icon_url: String(),
                },
              },
            ],
          });
          await delay(Number(1) * 1000);
          s4dfrost_real_reply.edit({
            embeds: [
              {
                color: String("#666666"),
                title: String("👷‍♂️⛏️⬛⬛⬛⬛⬛⬛"),
                description: String("You are mining, let's hope you find something"),
                footer: {
                  text: String("Minecraft bottom text"),
                  icon_url: String(),
                },
              },
            ],
          });
          await delay(Number(1) * 1000);
          s4dfrost_real_reply.edit({
            embeds: [
              {
                color: String("#666666"),
                title: String("👷‍♂️⛏️⬛⬛⬛⬛⬛"),
                description: String("You are mining, let's hope you find something"),
                footer: {
                  text: String("Minecraft bottom text"),
                  icon_url: String(),
                },
              },
            ],
          });
          await delay(Number(1) * 1000);
          s4dfrost_real_reply.edit({
            embeds: [
              {
                color: String("#666666"),
                title: String("👷‍♂️⛏️⬛⬛⬛⬛"),
                description: String("You are mining, let's hope you find something"),
                footer: {
                  text: String("Minecraft bottom text"),
                  icon_url: String(),
                },
              },
            ],
          });
          await delay(Number(1) * 1000);
          s4dfrost_real_reply.edit({
            embeds: [
              {
                color: String("#666666"),
                title: String("👷‍♂️⛏️⬛⬛⬛"),
                description: String("You are mining, let's hope you find something"),
                footer: {
                  text: String("Minecraft bottom text"),
                  icon_url: String(),
                },
              },
            ],
          });
          await delay(Number(1) * 1000);
          s4dfrost_real_reply.edit({
            embeds: [
              {
                color: String("#666666"),
                title: String("👷‍♂️⛏️⬛⬛"),
                description: String("You are mining, let's hope you find something"),
                footer: {
                  text: String("Minecraft bottom text"),
                  icon_url: String(),
                },
              },
            ],
          });
          await delay(Number(1) * 1000);
          mineFoundProbs = mathRandomInt(1, 10);
          if (mineFoundProbs <= 2) {
            s4dfrost_real_reply.edit({
              embeds: [
                {
                  color: String("#ff0000"),
                  title: String("👷‍♂️⛏️⬛"),
                  description: String("You found nothing"),
                  footer: {
                    text: String("Just rocks"),
                    icon_url: String(),
                  },
                },
              ],
            });
            return;
          } else if (mineFoundProbs > 8) {
            s4dfrost_real_reply.edit({
              embeds: [
                {
                  color: String("#ff0000"),
                  title: String("👷‍♂️💥⬛"),
                  description: String("Your pickaxe exploded."),
                  footer: {
                    text: String("shit"),
                    icon_url: String(),
                  },
                },
              ],
            });
            s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-item_id13"].join("")), "false");
            return;
          } else if (mineFoundProbs == 3) {
            miningMoney = mathRandomInt(150, 400);
            s4d.database.add(
              String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-money"].join("")),
              parseInt(miningMoney)
            );
            s4dfrost_real_reply.edit({
              embeds: [
                {
                  color: String("#33ff33"),
                  title: String("👷‍♂️⛏️💎"),
                  description: String(["You found a gem!", " And you got **", miningMoney, "$**"].join("")),
                  footer: {
                    text: String("Sell it"),
                    icon_url: String(),
                  },
                },
              ],
            });
            return;
          } else if (mineFoundProbs == 4) {
            miningMoney = mathRandomInt(10, 50);
            s4d.database.add(
              String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-money"].join("")),
              parseInt(miningMoney)
            );
            s4dfrost_real_reply.edit({
              embeds: [
                {
                  color: String("#33ff33"),
                  title: String("👷‍♂️⛏️☠️"),
                  description: String(["You found a skull!", " And you got **", miningMoney, "$**"].join("")),
                  footer: {
                    text: String("wtf bro"),
                    icon_url: String(),
                  },
                },
              ],
            });
            return;
          } else if (mineFoundProbs == 5) {
            miningMoney = mathRandomInt(200, 400);
            s4d.database.add(
              String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-money"].join("")),
              parseInt(miningMoney)
            );
            s4dfrost_real_reply.edit({
              embeds: [
                {
                  color: String("#33ff33"),
                  title: String("👷‍♂️⛏️🟨"),
                  description: String(["You found gold!", " And you got **", miningMoney, "$**"].join("")),
                  footer: {
                    text: String("nice now you are stonks man"),
                    icon_url: String(),
                  },
                },
              ],
            });
            return;
          } else if (mineFoundProbs == 6) {
            miningMoney = mathRandomInt(7, 40);
            s4d.database.add(
              String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-money"].join("")),
              parseInt(miningMoney)
            );
            s4dfrost_real_reply.edit({
              embeds: [
                {
                  color: String("#33ff33"),
                  title: String("👷‍♂️⛏️♦️"),
                  description: String(["You found redstone!", " And you got **", miningMoney, "$**"].join("")),
                  footer: {
                    text: String("Mumbo Jumbo reference"),
                    icon_url: String(),
                  },
                },
              ],
            });
            return;
          } else if (mineFoundProbs == 7) {
            miningMoney = mathRandomInt(500, 800);
            s4d.database.add(
              String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-money"].join("")),
              parseInt(miningMoney)
            );
            s4dfrost_real_reply.edit({
              embeds: [
                {
                  color: String("#33ff33"),
                  title: String("👷‍♂️⛏️🔷"),
                  description: String(["You found a diamond!", " And you got **", miningMoney, "$**"].join("")),
                  footer: {
                    text: String("Take a crating table now"),
                    icon_url: String(),
                  },
                },
              ],
            });
            return;
          } else if (mineFoundProbs == 8) {
            miningMoney = mathRandomInt(100, 300);
            s4d.database.add(
              String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-money"].join("")),
              parseInt(miningMoney)
            );
            s4dfrost_real_reply.edit({
              embeds: [
                {
                  color: String("#33ff33"),
                  title: String("👷‍♂️⛏️🛢️"),
                  description: String(["You found oil!", " And you got **", miningMoney, "$**"].join("")),
                  footer: {
                    text: String("USA is coming for you!"),
                    icon_url: String(),
                  },
                },
              ],
            });
            return;
          }
        });
      return;
    }

    /*
    D!HUNT
    */
    if ((s4dmessage.content.toUpperCase() || "").startsWith("D!HUNT" || "")) {
      if (s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-item_id12"].join(""))) == "false") {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("You need to buy a **Kar98 Scoped** to hunt"),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      if (!s4d.database.has(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-hunttimer"].join("")))) {
        s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-hunttimer"].join("")), 0);
      }
      if (
        !(
          new Date().getTime() >
          s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-hunttimer"].join(""))) + 3600000
        )
      ) {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#000000"),
              description: String(
                [
                  "⏰ Slowdown man, you can hunt again: **<t:",
                  Math.floor(
                    (s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-hunttimer"].join(""))) +
                      3600000) /
                      1000
                  ),
                  ":R>**",
                ].join("")
              ),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      huntCooldown = new Date().getTime();
      s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-hunttimer"].join("")), huntCooldown);
      s4dmessage
        .reply({
          embeds: [
            {
              color: String("#999999"),
              title: String("You are waiting the prey..."),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        })
        .then(async (s4dfrost_real_reply) => {
          await delay(Number(3) * 1000);
          s4dfrost_real_reply.edit({
            embeds: [
              {
                color: String("#999999"),
                title: String("Something is approching..."),
              },
            ],
          });
          await delay(Number(2) * 1000);
          s4dfrost_real_reply.edit({
            embeds: [
              {
                color: String("#33cc00"),
                title: String(
                  listsGetRandomItem(
                    [
                      "It's a pig!",
                      "It's a rabbit!",
                      "It's a boar!",
                      "It's a flying fish!",
                      "It's a deer!",
                      "It's a sheep!",
                      "It's a cow!",
                      "It's a chicken!",
                    ],
                    false
                  )
                ),
                footer: {
                  text: String("If you have a good aim you can kill it and sell it"),
                  icon_url: String(),
                },
              },
            ],
          });
        });
      await delay(Number(6) * 1000);
      s4dmessage
        .reply({
          embeds: [
            {
              color: String("#33cc00"),
              title: String("SHOOT NOW!"),
            },
          ],
          components: [
            new MessageActionRow().addComponents(
              new MessageButton()
                .setCustomId("hunt_shoot")
                .setLabel("Shoot")
                .setEmoji("💥")
                .setDisabled(false)
                .setStyle("SECONDARY")
            ),
          ],
        })
        .then(async (m) => {
          let collector = m.createMessageComponentCollector({
            filter: (i) => i.user.id === s4dmessage.author.id,
            time: Number(60000) * 1000,
          });
          collector.on("collect", async (i) => {
            if (i.customId == "hunt_shoot") {
              shootingProbs = mathRandomInt(1, 3);
              if (shootingProbs < 3) {
                huntingMoney = mathRandomInt(90, 170);
                s4d.database.add(
                  String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-money"].join("")),
                  parseInt(huntingMoney)
                );
                await i
                  .update({
                    embeds: [
                      {
                        color: String("#33cc00"),
                        title: String("Nice shot!"),
                        description: String(["You killed it and you got **", huntingMoney, "$** for selling it"].join("")),
                      },
                    ],
                    components: [
                      new MessageActionRow().addComponents(
                        new MessageButton()
                          .setCustomId("hunt_shoot")
                          .setLabel("Shoot")
                          .setEmoji("💥")
                          .setDisabled(true)
                          .setStyle("SUCCESS")
                      ),
                    ],
                  })
                  .then(async (m) => {
                    return;
                  });
              } else if (shootingProbs == 3) {
                await i
                  .update({
                    embeds: [
                      {
                        color: String("#ff0000"),
                        title: String("You missed!"),
                        footer: {
                          text: String("lol"),
                          icon_url: String(),
                        },
                      },
                    ],
                    components: [
                      new MessageActionRow().addComponents(
                        new MessageButton()
                          .setCustomId("hunt_shoot")
                          .setLabel("Shoot")
                          .setEmoji("💥")
                          .setDisabled(true)
                          .setStyle("DANGER")
                      ),
                    ],
                  })
                  .then(async (m) => {
                    return;
                  });
              }
            }
          });
        });
      return;
    }

    /*
    D!CRIME
    */
    if ((s4dmessage.content.toUpperCase() || "").startsWith("D!CRIME" || "")) {
      if (s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-item_id5"].join(""))) == "false") {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("You need an **AK-47** to commit a crime"),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      if (!s4d.database.has(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-crimetimer"].join("")))) {
        s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-crimetimer"].join("")), 0);
      }
      if (
        !(
          new Date().getTime() >
          s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-crimetimer"].join(""))) + 14400000
        )
      ) {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#000000"),
              description: String(
                [
                  "⏰ Slowdown man, you will able to commit another crime again: **<t:",
                  Math.floor(
                    (s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-crimetimer"].join(""))) +
                      14400000) /
                      1000
                  ),
                  ":R>**",
                ].join("")
              ),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      crimeCooldown = new Date().getTime();
      s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-crimetimer"].join("")), crimeCooldown);
      s4dmessage
        .reply({
          embeds: [
            {
              color: String("#3366ff"),
              title: String("Are you sure to commit a crime?"),
              description: String("If you fail you WILL lose a lot of money"),
              footer: {
                text: String("Click the buttons to choose"),
                icon_url: String(),
              },
            },
          ],
          components: [
            new MessageActionRow().addComponents(
              new MessageButton().setCustomId("crime_muder").setLabel("Murder").setDisabled(false).setStyle("PRIMARY"),
              new MessageButton().setCustomId("crime_arson").setLabel("Arson").setDisabled(false).setStyle("PRIMARY"),
              new MessageButton().setCustomId("crime_rob").setLabel("Rob").setDisabled(false).setStyle("PRIMARY"),
              new MessageButton().setCustomId("crime_drug").setLabel("Drug").setDisabled(false).setStyle("PRIMARY")
            ),
          ],
        })
        .then(async (m) => {
          let collector = m.createMessageComponentCollector({
            filter: (i) => i.user.id === s4dmessage.author.id,
            time: Number(60000) * 1000,
          });
          collector.on("collect", async (i) => {
            if (i.customId == "crime_muder") {
              crimeProbs = mathRandomInt(1, 3);
              if (crimeProbs < 3) {
                crimeMoney = mathRandomInt(3000, 5000);
                s4d.database.add(
                  String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-money"].join("")),
                  parseInt(crimeMoney)
                );
                await i
                  .update({
                    embeds: [
                      {
                        color: String("#990000"),
                        title: String("🕵️‍♂️ You killed a rich guy!"),
                        description: String(["You got: **", crimeMoney, "$** (You still an evil person :I )"].join("")),
                      },
                    ],
                    components: [
                      new MessageActionRow().addComponents(
                        new MessageButton().setCustomId("crime_muder").setLabel("Murder").setDisabled(true).setStyle("SUCCESS"),
                        new MessageButton()
                          .setCustomId("crime_arson")
                          .setLabel("Arson")
                          .setDisabled(true)
                          .setStyle("SECONDARY"),
                        new MessageButton().setCustomId("crime_rob").setLabel("Rob").setDisabled(true).setStyle("SECONDARY"),
                        new MessageButton().setCustomId("crime_drug").setLabel("Drug").setDisabled(true).setStyle("SECONDARY")
                      ),
                    ],
                  })
                  .then(async (m) => {
                    return;
                  });
              } else if (crimeProbs == 3) {
                crimeMoney = Math.ceil(
                  (15 / 100) *
                    (s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-money"].join(""))) +
                      s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-bankmoney"].join(""))))
                );
                s4d.database.subtract(
                  String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-money"].join("")),
                  parseInt(crimeMoney)
                );
                s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-item_id5"].join("")), "false");
                await i
                  .update({
                    embeds: [
                      {
                        color: String("#660000"),
                        title: String("🧑‍⚖️ You got arrested!"),
                        description: String(["You paid: **", crimeMoney, "$** for all the damage you made"].join("")),
                      },
                    ],
                    components: [
                      new MessageActionRow().addComponents(
                        new MessageButton().setCustomId("crime_muder").setLabel("Murder").setDisabled(true).setStyle("SUCCESS"),
                        new MessageButton()
                          .setCustomId("crime_arson")
                          .setLabel("Arson")
                          .setDisabled(true)
                          .setStyle("SECONDARY"),
                        new MessageButton().setCustomId("crime_rob").setLabel("Rob").setDisabled(true).setStyle("SECONDARY"),
                        new MessageButton().setCustomId("crime_drug").setLabel("Drug").setDisabled(true).setStyle("SECONDARY")
                      ),
                    ],
                  })
                  .then(async (m) => {
                    return;
                  });
              }
            } else if (i.customId == "crime_arson") {
              crimeProbs = mathRandomInt(1, 3);
              if (crimeProbs < 3) {
                crimeMoney = mathRandomInt(3000, 5000);
                s4d.database.add(
                  String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-money"].join("")),
                  parseInt(crimeMoney)
                );
                await i
                  .update({
                    embeds: [
                      {
                        color: String("#990000"),
                        title: String("🕵️‍♂️ You commited an ARSON!"),
                        description: String(
                          [
                            "You set a building on fire and you found: **",
                            crimeMoney,
                            "$** (You still an evil person :I )",
                          ].join("")
                        ),
                      },
                    ],
                    components: [
                      new MessageActionRow().addComponents(
                        new MessageButton()
                          .setCustomId("crime_muder")
                          .setLabel("Murder")
                          .setDisabled(true)
                          .setStyle("SECONDARY"),
                        new MessageButton().setCustomId("crime_arson").setLabel("Arson").setDisabled(true).setStyle("SUCCESS"),
                        new MessageButton().setCustomId("crime_rob").setLabel("Rob").setDisabled(true).setStyle("SECONDARY"),
                        new MessageButton().setCustomId("crime_drug").setLabel("Drug").setDisabled(true).setStyle("SECONDARY")
                      ),
                    ],
                  })
                  .then(async (m) => {
                    return;
                  });
              } else if (crimeProbs == 3) {
                crimeMoney = Math.ceil(
                  (15 / 100) *
                    (s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-money"].join(""))) +
                      s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-bankmoney"].join(""))))
                );
                s4d.database.subtract(
                  String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-money"].join("")),
                  parseInt(crimeMoney)
                );
                s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-item_id5"].join("")), "false");
                await i
                  .update({
                    embeds: [
                      {
                        color: String("#660000"),
                        title: String("🧑‍⚖️ You got arrested!"),
                        description: String(["You paid: **", crimeMoney, "$** for all the damage you made"].join("")),
                      },
                    ],
                    components: [
                      new MessageActionRow().addComponents(
                        new MessageButton()
                          .setCustomId("crime_muder")
                          .setLabel("Murder")
                          .setDisabled(true)
                          .setStyle("SECONDARY"),
                        new MessageButton().setCustomId("crime_arson").setLabel("Arson").setDisabled(true).setStyle("SUCCESS"),
                        new MessageButton().setCustomId("crime_rob").setLabel("Rob").setDisabled(true).setStyle("SECONDARY"),
                        new MessageButton().setCustomId("crime_drug").setLabel("Drug").setDisabled(true).setStyle("SECONDARY")
                      ),
                    ],
                  })
                  .then(async (m) => {
                    return;
                  });
              }
            } else if (i.customId == "crime_rob") {
              crimeProbs = mathRandomInt(1, 3);
              if (crimeProbs < 3) {
                crimeMoney = mathRandomInt(3000, 5000);
                s4d.database.add(
                  String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-money"].join("")),
                  parseInt(crimeMoney)
                );
                await i
                  .update({
                    embeds: [
                      {
                        color: String("#990000"),
                        title: String("🕵️‍♂️ You robbed a bank!"),
                        description: String(
                          [
                            "You trolled the bank and you took all the money, you got: **",
                            crimeMoney,
                            "$** (You still an evil person :I )",
                          ].join("")
                        ),
                      },
                    ],
                    components: [
                      new MessageActionRow().addComponents(
                        new MessageButton()
                          .setCustomId("crime_muder")
                          .setLabel("Murder")
                          .setDisabled(true)
                          .setStyle("SECONDARY"),
                        new MessageButton()
                          .setCustomId("crime_arson")
                          .setLabel("Arson")
                          .setDisabled(true)
                          .setStyle("SECONDARY"),
                        new MessageButton().setCustomId("crime_rob").setLabel("Rob").setDisabled(true).setStyle("SUCCESS"),
                        new MessageButton().setCustomId("crime_drug").setLabel("Drug").setDisabled(true).setStyle("SECONDARY")
                      ),
                    ],
                  })
                  .then(async (m) => {
                    return;
                  });
              } else if (crimeProbs == 3) {
                crimeMoney = Math.ceil(
                  (15 / 100) *
                    (s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-money"].join(""))) +
                      s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-bankmoney"].join(""))))
                );
                s4d.database.subtract(
                  String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-money"].join("")),
                  parseInt(crimeMoney)
                );
                s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-item_id5"].join("")), "false");
                await i
                  .update({
                    embeds: [
                      {
                        color: String("#660000"),
                        title: String("🧑‍⚖️ You got arrested!"),
                        description: String(["You paid: **", crimeMoney, "$** for all the damage you made"].join("")),
                      },
                    ],
                    components: [
                      new MessageActionRow().addComponents(
                        new MessageButton()
                          .setCustomId("crime_muder")
                          .setLabel("Murder")
                          .setDisabled(true)
                          .setStyle("SECONDARY"),
                        new MessageButton()
                          .setCustomId("crime_arson")
                          .setLabel("Arson")
                          .setDisabled(true)
                          .setStyle("SECONDARY"),
                        new MessageButton().setCustomId("crime_rob").setLabel("Rob").setDisabled(true).setStyle("SUCCESS"),
                        new MessageButton().setCustomId("crime_drug").setLabel("Drug").setDisabled(true).setStyle("SECONDARY")
                      ),
                    ],
                  })
                  .then(async (m) => {
                    return;
                  });
              }
            } else if (i.customId == "crime_drug") {
              crimeProbs = mathRandomInt(1, 3);
              if (crimeProbs < 3) {
                crimeMoney = mathRandomInt(3000, 5000);
                s4d.database.add(
                  String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-money"].join("")),
                  parseInt(crimeMoney)
                );
                await i
                  .update({
                    embeds: [
                      {
                        color: String("#990000"),
                        title: String("🕵️‍♂️ You sold cocaine!"),
                        description: String(["Hausemaster gave you: **", crimeMoney, "$** for the cocaine :O"].join("")),
                      },
                    ],
                    components: [
                      new MessageActionRow().addComponents(
                        new MessageButton()
                          .setCustomId("crime_muder")
                          .setLabel("Murder")
                          .setDisabled(true)
                          .setStyle("SECONDARY"),
                        new MessageButton()
                          .setCustomId("crime_arson")
                          .setLabel("Arson")
                          .setDisabled(true)
                          .setStyle("SECONDARY"),
                        new MessageButton().setCustomId("crime_rob").setLabel("Rob").setDisabled(true).setStyle("SECONDARY"),
                        new MessageButton().setCustomId("crime_drug").setLabel("Drug").setDisabled(true).setStyle("SUCCESS")
                      ),
                    ],
                  })
                  .then(async (m) => {
                    return;
                  });
              } else if (crimeProbs == 3) {
                crimeMoney = Math.ceil(
                  (15 / 100) *
                    (s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-money"].join(""))) +
                      s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-bankmoney"].join(""))))
                );
                s4d.database.subtract(
                  String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-money"].join("")),
                  parseInt(crimeMoney)
                );
                s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-item_id5"].join("")), "false");
                await i
                  .update({
                    embeds: [
                      {
                        color: String("#660000"),
                        title: String("🧑‍⚖️ You got arrested!"),
                        description: String(["You paid: **", crimeMoney, "$** for all the damage you made"].join("")),
                      },
                    ],
                    components: [
                      new MessageActionRow().addComponents(
                        new MessageButton()
                          .setCustomId("crime_muder")
                          .setLabel("Murder")
                          .setDisabled(true)
                          .setStyle("SECONDARY"),
                        new MessageButton()
                          .setCustomId("crime_arson")
                          .setLabel("Arson")
                          .setDisabled(true)
                          .setStyle("SECONDARY"),
                        new MessageButton().setCustomId("crime_rob").setLabel("Rob").setDisabled(true).setStyle("SECONDARY"),
                        new MessageButton().setCustomId("crime_drug").setLabel("Drug").setDisabled(true).setStyle("SUCCESS")
                      ),
                    ],
                  })
                  .then(async (m) => {
                    return;
                  });
              }
            }
          });
        });
      return;
    }

    /*
    D!SEARCH
    */
    if ((s4dmessage.content.toUpperCase() || "").startsWith("D!SEARCH" || "")) {
      if (!s4d.database.has(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-searchtimer"].join("")))) {
        s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-searchtimer"].join("")), 0);
      }
      if (
        !(
          new Date().getTime() >
          s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-searchtimer"].join(""))) + 7200000
        )
      ) {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#000000"),
              description: String(
                [
                  "⏰ Slowdown man, you can search again: **<t:",
                  Math.floor(
                    (s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-searchtimer"].join(""))) +
                      7200000) /
                      1000
                  ),
                  ":R>**",
                ].join("")
              ),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      searchCooldown = new Date().getTime();
      s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-searchtimer"].join("")), searchCooldown);
      s4dmessage
        .reply({
          embeds: [
            {
              color: String("#ff6600"),
              title: String("It is time for base hunting!"),
              description: String("Where do you want to do the base hunting?"),
            },
          ],
          components: [
            new MessageActionRow().addComponents(
              new MessageButton().setCustomId("search_overworld").setLabel("Overworld").setDisabled(false).setStyle("PRIMARY"),
              new MessageButton().setCustomId("search_nether").setLabel("Nether").setDisabled(false).setStyle("PRIMARY"),
              new MessageButton().setCustomId("search_end").setLabel("The End").setDisabled(false).setStyle("PRIMARY")
            ),
          ],
        })
        .then(async (m) => {
          let collector = m.createMessageComponentCollector({
            filter: (i) => i.user.id === s4dmessage.author.id,
            time: Number(60000) * 1000,
          });
          collector.on("collect", async (i) => {
            if (i.customId == "search_overworld") {
              await i
                .update({
                  embeds: [
                    {
                      color: String("#33cc00"),
                      title: String("Base hunting time!"),
                      description: String("Let's see what will you find in the overworld..."),
                    },
                  ],
                  components: [
                    new MessageActionRow().addComponents(
                      new MessageButton()
                        .setCustomId("search_overworld")
                        .setLabel("Overworld")
                        .setDisabled(true)
                        .setStyle("SUCCESS"),
                      new MessageButton()
                        .setCustomId("search_nether")
                        .setLabel("Nether")
                        .setDisabled(true)
                        .setStyle("SECONDARY"),
                      new MessageButton().setCustomId("search_end").setLabel("The End").setDisabled(true).setStyle("SECONDARY")
                    ),
                  ],
                })
                .then(async (m) => {
                  searchProbs = mathRandomInt(1, 17);
                  if (
                    searchProbs != 0 &&
                    searchProbs != 2 &&
                    searchProbs != 4 &&
                    searchProbs != 6 &&
                    searchProbs != 8 &&
                    searchProbs != 10 &&
                    searchProbs != 12
                  ) {
                    s4dmessage
                      .reply({
                        embeds: [
                          {
                            color: String("#ff6600"),
                            title: String("🔍 You start searching for shulkers..."),
                          },
                        ],
                        allowedMentions: {
                          repliedUser: true,
                        },
                      })
                      .then(async (s4dfrost_real_reply) => {
                        await delay(Number(3) * 1000);
                        s4dfrost_real_reply.edit({
                          embeds: [
                            {
                              color: String("#ff0000"),
                              title: String("❌ You found nothing!"),
                              description: String("Sadly you found nothing. ;("),
                            },
                          ],
                        });
                      });
                    return;
                  } else if (searchProbs == 0) {
                    s4dmessage
                      .reply({
                        embeds: [
                          {
                            color: String("#ff6600"),
                            title: String("🔍 You start searching for shulkers..."),
                          },
                        ],
                        allowedMentions: {
                          repliedUser: true,
                        },
                      })
                      .then(async (s4dfrost_real_reply) => {
                        await delay(Number(3) * 1000);
                        s4dfrost_real_reply.edit({
                          embeds: [
                            {
                              color: String("#cc6600"),
                              title: String("👀 You found a griefed zone"),
                              description: String("Withers, random obsidian and runes."),
                            },
                          ],
                        });
                      });
                    return;
                  } else if (searchProbs == 2) {
                    s4dmessage
                      .reply({
                        embeds: [
                          {
                            color: String("#ff6600"),
                            title: String("🔍 You start searching for shulkers..."),
                          },
                        ],
                        allowedMentions: {
                          repliedUser: true,
                        },
                      })
                      .then(async (s4dfrost_real_reply) => {
                        await delay(Number(3) * 1000);
                        s4dfrost_real_reply.edit({
                          embeds: [
                            {
                              color: String("#cc6600"),
                              title: String("👀 You found a random structure!"),
                              description: String("Nothing of interesting."),
                            },
                          ],
                        });
                      });
                    return;
                  } else if (searchProbs == 4) {
                    s4dmessage
                      .reply({
                        embeds: [
                          {
                            color: String("#ff6600"),
                            title: String("🔍 You start searching for shulkers..."),
                          },
                        ],
                        allowedMentions: {
                          repliedUser: true,
                        },
                      })
                      .then(async (s4dfrost_real_reply) => {
                        await delay(Number(3) * 1000);
                        s4dfrost_real_reply.edit({
                          embeds: [
                            {
                              color: String("#cc6600"),
                              title: String("👀 You found a griefed stash!"),
                              description: String("Sadly all the shulker were gone and you got nothing!"),
                            },
                          ],
                        });
                      });
                    return;
                  } else if (searchProbs == 6) {
                    searchMoney = mathRandomInt(400, 600);
                    s4d.database.add(
                      String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-money"].join("")),
                      parseInt(searchMoney)
                    );
                    s4dmessage
                      .reply({
                        embeds: [
                          {
                            color: String("#ff6600"),
                            title: String("🔍 You start searching for shulkers..."),
                          },
                        ],
                        allowedMentions: {
                          repliedUser: true,
                        },
                      })
                      .then(async (s4dfrost_real_reply) => {
                        await delay(Number(3) * 1000);
                        s4dfrost_real_reply.edit({
                          embeds: [
                            {
                              color: String("#33cc00"),
                              title: String("👀 YOU FOUND A BASE!!! OHH YEAH!!!"),
                              description: String(
                                [
                                  "BUMP UP THE MUSIC!!! YOU FOUND A BASE!!! WOOOOOOO!!! You got **",
                                  searchMoney,
                                  "$** 👏 🎵",
                                ].join("")
                              ),
                              image: {
                                url: String(
                                  "https://media.discordapp.net/attachments/212323451707326465/945773337827745892/resize.gif"
                                ),
                              },
                            },
                          ],
                        });
                      });
                    return;
                  } else if (searchProbs == 8) {
                    searchMoney = mathRandomInt(20, 60);
                    s4d.database.add(
                      String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-money"].join("")),
                      parseInt(searchMoney)
                    );
                    s4dmessage
                      .reply({
                        embeds: [
                          {
                            color: String("#ff6600"),
                            title: String("🔍 You start searching for shulkers..."),
                          },
                        ],
                        allowedMentions: {
                          repliedUser: true,
                        },
                      })
                      .then(async (s4dfrost_real_reply) => {
                        await delay(Number(3) * 1000);
                        s4dfrost_real_reply.edit({
                          embeds: [
                            {
                              color: String("#cc6600"),
                              title: String("👀 You found a griefed base!"),
                              description: String(
                                [
                                  "You found a griefed base with some shulkers, you got **",
                                  searchMoney,
                                  "$** Not lucky enough",
                                ].join("")
                              ),
                            },
                          ],
                        });
                      });
                    return;
                  } else if (searchProbs == 10) {
                    searchMoney = mathRandomInt(80, 150);
                    s4d.database.add(
                      String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-money"].join("")),
                      parseInt(searchMoney)
                    );
                    s4dmessage
                      .reply({
                        embeds: [
                          {
                            color: String("#ff6600"),
                            title: String("🔍 You start searching for shulkers..."),
                          },
                        ],
                        allowedMentions: {
                          repliedUser: true,
                        },
                      })
                      .then(async (s4dfrost_real_reply) => {
                        await delay(Number(3) * 1000);
                        s4dfrost_real_reply.edit({
                          embeds: [
                            {
                              color: String("#33cc00"),
                              title: String("👀 You found a dungeon!"),
                              description: String(
                                ["You found some shulker in it, you got **", searchMoney, "$**! You can do better."].join("")
                              ),
                            },
                          ],
                        });
                      });
                    return;
                  } else if (searchProbs == 12) {
                    searchMoney = mathRandomInt(400, 900);
                    s4d.database.add(
                      String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-money"].join("")),
                      parseInt(searchMoney)
                    );
                    s4dmessage
                      .reply({
                        embeds: [
                          {
                            color: String("#ff6600"),
                            title: String("🔍 You start searching for shulkers..."),
                          },
                        ],
                        allowedMentions: {
                          repliedUser: true,
                        },
                      })
                      .then(async (s4dfrost_real_reply) => {
                        await delay(Number(3) * 1000);
                        s4dfrost_real_reply.edit({
                          embeds: [
                            {
                              color: String("#33cc00"),
                              title: String("👀 You found a stash!"),
                              description: String(
                                [
                                  "**YOU FOUND A STASH BABYYY!!!** 💰 💰 💰",
                                  "\n",
                                  "You are really lucky, you got **",
                                  searchMoney,
                                  "$**!",
                                ].join("")
                              ),
                              image: {
                                url: String(
                                  "https://media.discordapp.net/attachments/212323451707326465/945773337827745892/resize.gif"
                                ),
                              },
                            },
                          ],
                        });
                      });
                    return;
                  }
                });
            } else if (i.customId == "search_nether") {
              await i
                .update({
                  embeds: [
                    {
                      color: String("#33cc00"),
                      title: String("Base hunting time!"),
                      description: String("Let's see what will you find in the nether..."),
                    },
                  ],
                  components: [
                    new MessageActionRow().addComponents(
                      new MessageButton()
                        .setCustomId("search_overworld")
                        .setLabel("Overworld")
                        .setDisabled(true)
                        .setStyle("SECONDARY"),
                      new MessageButton().setCustomId("search_nether").setLabel("Nether").setDisabled(true).setStyle("SUCCESS"),
                      new MessageButton().setCustomId("search_end").setLabel("The End").setDisabled(true).setStyle("SECONDARY")
                    ),
                  ],
                })
                .then(async (m) => {
                  searchProbs = mathRandomInt(1, 17);
                  if (
                    searchProbs != 0 &&
                    searchProbs != 2 &&
                    searchProbs != 4 &&
                    searchProbs != 6 &&
                    searchProbs != 8 &&
                    searchProbs != 10 &&
                    searchProbs != 12
                  ) {
                    s4dmessage
                      .reply({
                        embeds: [
                          {
                            color: String("#ff6600"),
                            title: String("🔍 You start searching for shulkers..."),
                          },
                        ],
                        allowedMentions: {
                          repliedUser: true,
                        },
                      })
                      .then(async (s4dfrost_real_reply) => {
                        await delay(Number(3) * 1000);
                        s4dfrost_real_reply.edit({
                          embeds: [
                            {
                              color: String("#ff0000"),
                              title: String("❌ You found nothing!"),
                              description: String("Sadly you found nothing. ;("),
                            },
                          ],
                        });
                      });
                    return;
                  } else if (searchProbs == 0) {
                    s4dmessage
                      .reply({
                        embeds: [
                          {
                            color: String("#ff6600"),
                            title: String("🔍 You start searching for shulkers..."),
                          },
                        ],
                        allowedMentions: {
                          repliedUser: true,
                        },
                      })
                      .then(async (s4dfrost_real_reply) => {
                        await delay(Number(3) * 1000);
                        s4dfrost_real_reply.edit({
                          embeds: [
                            {
                              color: String("#cc6600"),
                              title: String("👀 You found a griefed zone"),
                              description: String("Withers, random obsidian and runes."),
                            },
                          ],
                        });
                      });
                    return;
                  } else if (searchProbs == 2) {
                    s4dmessage
                      .reply({
                        embeds: [
                          {
                            color: String("#ff6600"),
                            title: String("🔍 You start searching for shulkers..."),
                          },
                        ],
                        allowedMentions: {
                          repliedUser: true,
                        },
                      })
                      .then(async (s4dfrost_real_reply) => {
                        await delay(Number(3) * 1000);
                        s4dfrost_real_reply.edit({
                          embeds: [
                            {
                              color: String("#cc6600"),
                              title: String("👀 You found a random structure!"),
                              description: String("Nothing of interesting."),
                            },
                          ],
                        });
                      });
                    return;
                  } else if (searchProbs == 4) {
                    s4dmessage
                      .reply({
                        embeds: [
                          {
                            color: String("#ff6600"),
                            title: String("🔍 You start searching for shulkers..."),
                          },
                        ],
                        allowedMentions: {
                          repliedUser: true,
                        },
                      })
                      .then(async (s4dfrost_real_reply) => {
                        await delay(Number(3) * 1000);
                        s4dfrost_real_reply.edit({
                          embeds: [
                            {
                              color: String("#cc6600"),
                              title: String("👀 You found a griefed stash!"),
                              description: String("Sadly all the shulker were gone and you got nothing!"),
                            },
                          ],
                        });
                      });
                    return;
                  } else if (searchProbs == 6) {
                    searchMoney = mathRandomInt(400, 600);
                    s4d.database.add(
                      String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-money"].join("")),
                      parseInt(searchMoney)
                    );
                    s4dmessage
                      .reply({
                        embeds: [
                          {
                            color: String("#ff6600"),
                            title: String("🔍 You start searching for shulkers..."),
                          },
                        ],
                        allowedMentions: {
                          repliedUser: true,
                        },
                      })
                      .then(async (s4dfrost_real_reply) => {
                        await delay(Number(3) * 1000);
                        s4dfrost_real_reply.edit({
                          embeds: [
                            {
                              color: String("#33cc00"),
                              title: String("👀 YOU FOUND A NETHER BASE!!! OHH YEAH!!!"),
                              description: String(
                                [
                                  "BUMP UP THE MUSIC!!! YOU FOUND AN AMAZING BASE!!! WOOOOOOO!!! You got **",
                                  searchMoney,
                                  "$** 👏 🎵",
                                ].join("")
                              ),
                              image: {
                                url: String(
                                  "https://media.discordapp.net/attachments/212323451707326465/945773337827745892/resize.gif"
                                ),
                              },
                            },
                          ],
                        });
                      });
                    return;
                  } else if (searchProbs == 8) {
                    searchMoney = mathRandomInt(20, 60);
                    s4d.database.add(
                      String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-money"].join("")),
                      parseInt(searchMoney)
                    );
                    s4dmessage
                      .reply({
                        embeds: [
                          {
                            color: String("#ff6600"),
                            title: String("🔍 You start searching for shulkers..."),
                          },
                        ],
                        allowedMentions: {
                          repliedUser: true,
                        },
                      })
                      .then(async (s4dfrost_real_reply) => {
                        await delay(Number(3) * 1000);
                        s4dfrost_real_reply.edit({
                          embeds: [
                            {
                              color: String("#cc6600"),
                              title: String("👀 You found a griefed base!"),
                              description: String(
                                [
                                  "You found a griefed base with some shulkers, you got **",
                                  searchMoney,
                                  "$** Not lucky enough",
                                ].join("")
                              ),
                            },
                          ],
                        });
                      });
                    return;
                  } else if (searchProbs == 10) {
                    searchMoney = mathRandomInt(80, 150);
                    s4d.database.add(
                      String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-money"].join("")),
                      parseInt(searchMoney)
                    );
                    s4dmessage
                      .reply({
                        embeds: [
                          {
                            color: String("#ff6600"),
                            title: String("🔍 You start searching for shulkers..."),
                          },
                        ],
                        allowedMentions: {
                          repliedUser: true,
                        },
                      })
                      .then(async (s4dfrost_real_reply) => {
                        await delay(Number(3) * 1000);
                        s4dfrost_real_reply.edit({
                          embeds: [
                            {
                              color: String("#33cc00"),
                              title: String("👀 You found a secret chest"),
                              description: String(
                                ["You found some shulker in it, you got **", searchMoney, "$**! You can do better."].join("")
                              ),
                            },
                          ],
                        });
                      });
                    return;
                  } else if (searchProbs == 12) {
                    searchMoney = mathRandomInt(400, 900);
                    s4d.database.add(
                      String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-money"].join("")),
                      parseInt(searchMoney)
                    );
                    s4dmessage
                      .reply({
                        embeds: [
                          {
                            color: String("#ff6600"),
                            title: String("🔍 You start searching for shulkers..."),
                          },
                        ],
                        allowedMentions: {
                          repliedUser: true,
                        },
                      })
                      .then(async (s4dfrost_real_reply) => {
                        await delay(Number(3) * 1000);
                        s4dfrost_real_reply.edit({
                          embeds: [
                            {
                              color: String("#33cc00"),
                              title: String("👀 You found a stash!"),
                              description: String(
                                [
                                  "**YOU FOUND A STASH BABYYY!!!** 💰 💰 💰",
                                  "\n",
                                  "You are really lucky, you got **",
                                  searchMoney,
                                  "$**!",
                                ].join("")
                              ),
                              image: {
                                url: String(
                                  "https://media.discordapp.net/attachments/212323451707326465/945773337827745892/resize.gif"
                                ),
                              },
                            },
                          ],
                        });
                      });
                    return;
                  }
                });
            } else if (i.customId == "search_end") {
              await i
                .update({
                  embeds: [
                    {
                      color: String("#33cc00"),
                      title: String("Base hunting time!"),
                      description: String("Let's see what will you find in the end..."),
                    },
                  ],
                  components: [
                    new MessageActionRow().addComponents(
                      new MessageButton()
                        .setCustomId("search_overworld")
                        .setLabel("Overworld")
                        .setDisabled(true)
                        .setStyle("SECONDARY"),
                      new MessageButton()
                        .setCustomId("search_nether")
                        .setLabel("Nether")
                        .setDisabled(true)
                        .setStyle("SECONDARY"),
                      new MessageButton().setCustomId("search_end").setLabel("The End").setDisabled(true).setStyle("SUCCESS")
                    ),
                  ],
                })
                .then(async (m) => {
                  searchProbs = mathRandomInt(1, 17);
                  if (
                    searchProbs != 0 &&
                    searchProbs != 2 &&
                    searchProbs != 4 &&
                    searchProbs != 6 &&
                    searchProbs != 8 &&
                    searchProbs != 10 &&
                    searchProbs != 12
                  ) {
                    s4dmessage
                      .reply({
                        embeds: [
                          {
                            color: String("#ff6600"),
                            title: String("🔍 You start searching for shulkers..."),
                          },
                        ],
                        allowedMentions: {
                          repliedUser: true,
                        },
                      })
                      .then(async (s4dfrost_real_reply) => {
                        await delay(Number(3) * 1000);
                        s4dfrost_real_reply.edit({
                          embeds: [
                            {
                              color: String("#ff0000"),
                              title: String("❌ You found nothing!"),
                              description: String("Sadly you found nothing. ;("),
                            },
                          ],
                        });
                      });
                    return;
                  } else if (searchProbs == 0) {
                    s4dmessage
                      .reply({
                        embeds: [
                          {
                            color: String("#ff6600"),
                            title: String("🔍 You start searching for shulkers..."),
                          },
                        ],
                        allowedMentions: {
                          repliedUser: true,
                        },
                      })
                      .then(async (s4dfrost_real_reply) => {
                        await delay(Number(3) * 1000);
                        s4dfrost_real_reply.edit({
                          embeds: [
                            {
                              color: String("#cc6600"),
                              title: String("👀 You found a griefed zone"),
                              description: String("Withers, random obsidian and runes."),
                            },
                          ],
                        });
                      });
                    return;
                  } else if (searchProbs == 2) {
                    s4dmessage
                      .reply({
                        embeds: [
                          {
                            color: String("#ff6600"),
                            title: String("🔍 You start searching for shulkers..."),
                          },
                        ],
                        allowedMentions: {
                          repliedUser: true,
                        },
                      })
                      .then(async (s4dfrost_real_reply) => {
                        await delay(Number(3) * 1000);
                        s4dfrost_real_reply.edit({
                          embeds: [
                            {
                              color: String("#cc6600"),
                              title: String("👀 You found a random structure!"),
                              description: String("Nothing of interesting."),
                            },
                          ],
                        });
                      });
                    return;
                  } else if (searchProbs == 4) {
                    s4dmessage
                      .reply({
                        embeds: [
                          {
                            color: String("#ff6600"),
                            title: String("🔍 You start searching for shulkers..."),
                          },
                        ],
                        allowedMentions: {
                          repliedUser: true,
                        },
                      })
                      .then(async (s4dfrost_real_reply) => {
                        await delay(Number(3) * 1000);
                        s4dfrost_real_reply.edit({
                          embeds: [
                            {
                              color: String("#cc6600"),
                              title: String("👀 You found a griefed stash!"),
                              description: String("Sadly all the shulker were gone and you got nothing!"),
                            },
                          ],
                        });
                      });
                    return;
                  } else if (searchProbs == 6) {
                    searchMoney = mathRandomInt(400, 600);
                    s4d.database.add(
                      String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-money"].join("")),
                      parseInt(searchMoney)
                    );
                    s4dmessage
                      .reply({
                        embeds: [
                          {
                            color: String("#ff6600"),
                            title: String("🔍 You start searching for shulkers..."),
                          },
                        ],
                        allowedMentions: {
                          repliedUser: true,
                        },
                      })
                      .then(async (s4dfrost_real_reply) => {
                        await delay(Number(3) * 1000);
                        s4dfrost_real_reply.edit({
                          embeds: [
                            {
                              color: String("#33cc00"),
                              title: String("👀 YOU FOUND A BIG BASE!!! OHH YEAH!!!"),
                              description: String(
                                [
                                  "BUMP UP THE MUSIC!!! YOU FOUND A BASE!!! WOOOOOOO!!! You got **",
                                  searchMoney,
                                  "$** 👏 🎵",
                                ].join("")
                              ),
                              image: {
                                url: String(
                                  "https://media.discordapp.net/attachments/212323451707326465/945773337827745892/resize.gif"
                                ),
                              },
                            },
                          ],
                        });
                      });
                    return;
                  } else if (searchProbs == 8) {
                    searchMoney = mathRandomInt(20, 60);
                    s4d.database.add(
                      String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-money"].join("")),
                      parseInt(searchMoney)
                    );
                    s4dmessage
                      .reply({
                        embeds: [
                          {
                            color: String("#ff6600"),
                            title: String("🔍 You start searching for shulkers..."),
                          },
                        ],
                        allowedMentions: {
                          repliedUser: true,
                        },
                      })
                      .then(async (s4dfrost_real_reply) => {
                        await delay(Number(3) * 1000);
                        s4dfrost_real_reply.edit({
                          embeds: [
                            {
                              color: String("#cc6600"),
                              title: String("👀 You found a griefed base!"),
                              description: String(
                                [
                                  "You found a griefed base with some shulkers, you got **",
                                  searchMoney,
                                  "$** Not lucky enough",
                                ].join("")
                              ),
                            },
                          ],
                        });
                      });
                    return;
                  } else if (searchProbs == 10) {
                    searchMoney = mathRandomInt(80, 150);
                    s4d.database.add(
                      String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-money"].join("")),
                      parseInt(searchMoney)
                    );
                    s4dmessage
                      .reply({
                        embeds: [
                          {
                            color: String("#ff6600"),
                            title: String("🔍 You start searching for shulkers..."),
                          },
                        ],
                        allowedMentions: {
                          repliedUser: true,
                        },
                      })
                      .then(async (s4dfrost_real_reply) => {
                        await delay(Number(3) * 1000);
                        s4dfrost_real_reply.edit({
                          embeds: [
                            {
                              color: String("#33cc00"),
                              title: String("👀 You found a secret chest"),
                              description: String(
                                ["You found some shulker in it, you got **", searchMoney, "$**! You can do better."].join("")
                              ),
                            },
                          ],
                        });
                      });
                    return;
                  } else if (searchProbs == 12) {
                    searchMoney = mathRandomInt(400, 900);
                    s4d.database.add(
                      String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-money"].join("")),
                      parseInt(searchMoney)
                    );
                    s4dmessage
                      .reply({
                        embeds: [
                          {
                            color: String("#ff6600"),
                            title: String("🔍 You start searching for shulkers..."),
                          },
                        ],
                        allowedMentions: {
                          repliedUser: true,
                        },
                      })
                      .then(async (s4dfrost_real_reply) => {
                        await delay(Number(3) * 1000);
                        s4dfrost_real_reply.edit({
                          embeds: [
                            {
                              color: String("#33cc00"),
                              title: String("👀 You found a stash!"),
                              description: String(
                                [
                                  "**YOU FOUND A STASH BABYYY!!!** 💰 💰 💰",
                                  "\n",
                                  "You are really lucky, you got **",
                                  searchMoney,
                                  "$**!",
                                ].join("")
                              ),
                              image: {
                                url: String(
                                  "https://media.discordapp.net/attachments/212323451707326465/945773337827745892/resize.gif"
                                ),
                              },
                            },
                          ],
                        });
                      });
                    return;
                  }
                });
            }
          });
        });
      return;
    }

    /*
    D!BEG
    */
    if ((s4dmessage.content.toUpperCase() || "").startsWith("D!BEG" || "")) {
      if (!s4d.database.has(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-begtimer"].join("")))) {
        s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-begtimer"].join("")), 0);
      }
      if (
        !(
          new Date().getTime() >
          s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-begtimer"].join(""))) + 300000
        )
      ) {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#000000"),
              description: String(
                [
                  "⏰ Slowdown man, you will beg again: **<t:",
                  Math.floor(
                    (s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-begtimer"].join(""))) +
                      300000) /
                      1000
                  ),
                  ":R>**",
                ].join("")
              ),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      begCooldown = new Date().getTime();
      s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-begtimer"].join("")), begCooldown);
      s4dmessage
        .reply({
          embeds: [
            {
              color: String("#ff6600"),
              title: String("Beg or rob him?"),
              description: String("A person wants to give you some money"),
              footer: {
                text: String("Click the buttons to choose!"),
                icon_url: String(),
              },
            },
          ],
          components: [
            new MessageActionRow().addComponents(
              new MessageButton().setCustomId("Beg_button").setLabel("Beg").setDisabled(false).setStyle("PRIMARY"),
              new MessageButton().setCustomId("Rob_button").setLabel("Rob").setDisabled(false).setStyle("PRIMARY")
            ),
          ],
        })
        .then(async (m) => {
          let collector = m.createMessageComponentCollector({
            filter: (i) => i.user.id === s4dmessage.author.id,
            time: Number(60000) * 1000,
          });
          collector.on("collect", async (i) => {
            if (i.customId == "Beg_button") {
              await i
                .update({
                  embeds: [
                    {
                      color: String("#33cc00"),
                      title: String("Lucky!"),
                      description: String("The person gave you money!"),
                    },
                  ],
                  components: [
                    new MessageActionRow().addComponents(
                      new MessageButton().setCustomId("Beg_button").setLabel("Beg").setDisabled(true).setStyle("SUCCESS"),
                      new MessageButton().setCustomId("Rob_button").setLabel("Rob").setDisabled(true).setStyle("SECONDARY")
                    ),
                  ],
                })
                .then(async (m) => {
                  begMoney = mathRandomInt(1, 50);
                  s4d.database.add(
                    String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-money"].join("")),
                    parseInt(begMoney)
                  );
                  s4dmessage.reply({
                    embeds: [
                      {
                        color: String("#ffcc33"),
                        title: String(
                          listsGetRandomItem(
                            [
                              "Mum",
                              "Duck",
                              "Pirate",
                              "Brother",
                              "DiversityBOT",
                              "Hausemaster",
                              "Drip boy",
                              "Mario",
                              "Luigi",
                              "Amogus",
                              "Discord Mod",
                              "Cocaine man",
                              "CEO of Crab Game",
                              "Ruspa man",
                              "Monke",
                              "Bob",
                              "Mr beast",
                              "popbob",
                              "Xinnie Jinpooh",
                              "CEO of YouTube",
                              "Marcos",
                              "Jacob",
                              "Lady Gaga",
                              "Obama",
                              "Mr Obunga",
                              "Matarella",
                              "Matteo Salvini",
                              "FitMC",
                              "Random person",
                              "Man",
                              "Woman",
                              "Giuseppe",
                              "Secret Agent",
                              "Pier77Repeter",
                              "Telecome Italia",
                              "Tryhard",
                              "Night Guardian",
                              "Robot",
                              "Gordon Ramsay",
                              "Cannavaciulo",
                              "Putin",
                              "Moay",
                              "Old person",
                              "Kid",
                              "Worker",
                              "Anime boy",
                              "Anime girl",
                              "Gargoil",
                              "Mexican guy",
                            ],
                            false
                          )
                        ),
                        description: String(
                          listsGetRandomItem(
                            [
                              ["Oh you poor little beggar, **", begMoney, "$**!"].join(""),
                              ["The party was epik, here, **", begMoney, "$**!"].join(""),
                              ["Thanks for the homeworks, here, **", begMoney, "$**!"].join(""),
                              ["Here, have, **", begMoney, "$**!"].join(""),
                              ["Oh poor boy, here **", begMoney, "$**!"].join(""),
                              ["You so nice, here **", begMoney, "$**!"].join(""),
                              ["Cute, here **", begMoney, "$**!"].join(""),
                              ["Nice song, here **", begMoney, "$**!"].join(""),
                              ["Here some money, **", begMoney, "$**!"].join(""),
                              ["Congratulation!, You won **", begMoney, "$**!"].join(""),
                              ["Just because i'm nice, here **", begMoney, "$**!"].join(""),
                              ["Thanks for helping, here **", begMoney, "$**!"].join(""),
                              ["Yes, here **", begMoney, "$**!"].join(""),
                              ["I'll help you, here **", begMoney, "$**!"].join(""),
                              ["Free money for you, here **", begMoney, "$**!"].join(""),
                              ["Lucky, here **", begMoney, "$**!"].join(""),
                              ["What a nice guy, here **", begMoney, "$**!"].join(""),
                              ["Thank you for cake, here **", begMoney, "$**!"].join(""),
                              ["I have some extra coins, here **", begMoney, "$**!"].join(""),
                              ["Shhhhhhhh, here **", begMoney, "$**!"].join(""),
                              ["You saved my cat! Here **", begMoney, "$**!"].join(""),
                              ["Under the sea i found some money, here **", begMoney, "$**!"].join(""),
                              ["I duped extra money, here **", begMoney, "$**!"].join(""),
                              ["Thank for supporting us, here **", begMoney, "$**!"].join(""),
                              ["Wow i lost, here **", begMoney, "$**!"].join(""),
                              ["You won, so, here **", begMoney, "$**!"].join(""),
                              ["Pssss, here **", begMoney, "$**!"].join(""),
                            ],
                            false
                          )
                        ),
                      },
                    ],
                    allowedMentions: {
                      repliedUser: true,
                    },
                  });
                  return;
                });
            } else if (i.customId == "Rob_button") {
              await i
                .update({
                  embeds: [
                    {
                      color: String("#33cc00"),
                      title: String("WOH"),
                      description: String("You decide to rob him :("),
                    },
                  ],
                  components: [
                    new MessageActionRow().addComponents(
                      new MessageButton().setCustomId("Beg_button").setLabel("Beg").setDisabled(true).setStyle("SECONDARY"),
                      new MessageButton().setCustomId("Rob_button").setLabel("Rob").setDisabled(true).setStyle("SUCCESS")
                    ),
                  ],
                })
                .then(async (m) => {
                  begProbs = mathRandomInt(1, 2);
                  if (begProbs == 2) {
                    begMoney = mathRandomInt(200, 300);
                    s4d.database.add(
                      String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-money"].join("")),
                      parseInt(begMoney)
                    );
                    s4dmessage.reply({
                      embeds: [
                        {
                          color: String("#33cc00"),
                          title: String("You robbed"),
                          description: String(["You robbed this person, you got **", begMoney, "$**!"].join("")),
                        },
                      ],
                      allowedMentions: {
                        repliedUser: true,
                      },
                    });
                    return;
                  } else if (begProbs < 2) {
                    tempMoneyVar = Math.ceil(
                      (5 / 100) *
                        (s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-money"].join(""))) +
                          s4d.database.get(
                            String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-bankmoney"].join(""))
                          ))
                    );
                    s4d.database.subtract(
                      String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-money"].join("")),
                      parseInt(tempMoneyVar)
                    );
                    s4dmessage.reply({
                      embeds: [
                        {
                          color: String("#ff0000"),
                          title: String("You failed"),
                          description: String(["You lost **", tempMoneyVar, "$**! What an idiot, don't rob!"].join("")),
                        },
                      ],
                      allowedMentions: {
                        repliedUser: true,
                      },
                    });
                    return;
                  }
                });
            }
          });
        });
      return;
    }

    /*
    D!HIGHLOW
    */
    if (
      (s4dmessage.content.toUpperCase() || "").startsWith("D!HIGHLOW" || "") ||
      (s4dmessage.content.toUpperCase() || "").startsWith("D!HL" || "")
    ) {
      if (!s4d.database.has(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-hltimer"].join("")))) {
        s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-hltimer"].join("")), 0);
      }
      if (
        !(
          new Date().getTime() >
          s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-hltimer"].join(""))) + 300000
        )
      ) {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#000000"),
              description: String(
                [
                  "⏰ Slowdown man, you can do it again: **<t:",
                  Math.floor(
                    (s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-hltimer"].join(""))) +
                      300000) /
                      1000
                  ),
                  ":R>**",
                ].join("")
              ),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      highLowCooldown = new Date().getTime();
      s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-hltimer"].join("")), highLowCooldown);
      highLowNumber = mathRandomInt(1, 100);
      highLowSelectedNumber = mathRandomInt(1, 100);
      s4dmessage
        .reply({
          embeds: [
            {
              color: String("#3366ff"),
              title: String("Will the next number be higher or lower?"),
              description: String(["The number selected is **", highLowNumber, "**!"].join("")),
              footer: {
                text: String("Click the button to choose"),
                icon_url: String(),
              },
            },
          ],
          components: [
            new MessageActionRow().addComponents(
              new MessageButton().setCustomId("hl_high").setLabel("Higher").setDisabled(false).setStyle("PRIMARY"),
              new MessageButton().setCustomId("hl_low").setLabel("Lower").setDisabled(false).setStyle("PRIMARY")
            ),
          ],
        })
        .then(async (m) => {
          let collector = m.createMessageComponentCollector({
            filter: (i) => i.user.id === s4dmessage.author.id,
            time: Number(60000) * 1000,
          });
          collector.on("collect", async (i) => {
            if (i.customId == "hl_high") {
              if (highLowSelectedNumber > highLowNumber) {
                highLowMoney = mathRandomInt(40, 70);
                s4d.database.add(
                  String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-money"].join("")),
                  parseInt(highLowMoney)
                );
                await i
                  .update({
                    embeds: [
                      {
                        color: String("#33cc00"),
                        title: String("That's right!"),
                        description: String(
                          ["The number selected was **", highLowSelectedNumber, "** and you got **", highLowMoney, "$**!"].join(
                            ""
                          )
                        ),
                      },
                    ],
                    components: [
                      new MessageActionRow().addComponents(
                        new MessageButton().setCustomId("hl_high").setLabel("Higher").setDisabled(true).setStyle("SUCCESS"),
                        new MessageButton().setCustomId("hl_low").setLabel("Lower").setDisabled(true).setStyle("SECONDARY")
                      ),
                    ],
                  })
                  .then(async (m) => {
                    return;
                  });
              } else {
                await i
                  .update({
                    embeds: [
                      {
                        color: String("#ff0000"),
                        title: String("Wrong!"),
                        description: String(["The number selected was **", highLowSelectedNumber, "**!"].join("")),
                      },
                    ],
                    components: [
                      new MessageActionRow().addComponents(
                        new MessageButton().setCustomId("hl_high").setLabel("Higher").setDisabled(true).setStyle("SUCCESS"),
                        new MessageButton().setCustomId("hl_low").setLabel("Lower").setDisabled(true).setStyle("SECONDARY")
                      ),
                    ],
                  })
                  .then(async (m) => {
                    return;
                  });
              }
            } else if (i.customId == "hl_low") {
              if (highLowSelectedNumber < highLowNumber) {
                highLowMoney = mathRandomInt(40, 70);
                s4d.database.add(
                  String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-money"].join("")),
                  parseInt(highLowMoney)
                );
                await i
                  .update({
                    embeds: [
                      {
                        color: String("#33cc00"),
                        title: String("That's right!"),
                        description: String(
                          ["The number selected was **", highLowSelectedNumber, "** and you got **", highLowMoney, "$**!"].join(
                            ""
                          )
                        ),
                      },
                    ],
                    components: [
                      new MessageActionRow().addComponents(
                        new MessageButton().setCustomId("hl_high").setLabel("Higher").setDisabled(true).setStyle("SECONDARY"),
                        new MessageButton().setCustomId("hl_low").setLabel("Lower").setDisabled(true).setStyle("SUCCESS")
                      ),
                    ],
                  })
                  .then(async (m) => {
                    return;
                  });
              } else {
                await i
                  .update({
                    embeds: [
                      {
                        color: String("#ff0000"),
                        title: String("Wrong!"),
                        description: String(["The number selected was **", highLowSelectedNumber, "**!"].join("")),
                      },
                    ],
                    components: [
                      new MessageActionRow().addComponents(
                        new MessageButton().setCustomId("hl_high").setLabel("Higher").setDisabled(true).setStyle("SECONDARY"),
                        new MessageButton().setCustomId("hl_low").setLabel("Lower").setDisabled(true).setStyle("SUCCESS")
                      ),
                    ],
                  })
                  .then(async (m) => {
                    return;
                  });
              }
            }
          });
        });
      return;
    }

    /*
    D!ROULETTE
    */
    arguments = s4dmessage.content.split(" ");
    rouletteBetMoney = arguments.splice(0, 1)[0];
    if ((s4dmessage.content.toUpperCase() || "").startsWith("D!ROULETTE" || "")) {
      if (!s4d.database.has(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-roulettetimer"].join("")))) {
        s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-roulettetimer"].join("")), 0);
      }
      rouletteBetMoney = Math.ceil(
        (5 / 100) *
          (s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-money"].join(""))) +
            s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-bankmoney"].join(""))))
      );
      rouletteAddedMoneyPercent = Math.ceil(
        (2 / 100) *
          (s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-money"].join(""))) +
            s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-bankmoney"].join(""))))
      );
      if (rouletteBetMoney <= 0) {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("You have less than **0$**, poor old man!"),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      if (
        !(
          new Date().getTime() >
          s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-roulettetimer"].join(""))) + 7200000
        )
      ) {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#000000"),
              description: String(
                [
                  "⏰ Slowdown man, you will play the roulette again: **<t:",
                  Math.floor(
                    (s4d.database.get(
                      String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-roulettetimer"].join(""))
                    ) +
                      7200000) /
                      1000
                  ),
                  ":R>**",
                ].join("")
              ),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      rouletteCooldown = new Date().getTime();
      s4d.database.set(
        String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-roulettetimer"].join("")),
        rouletteCooldown
      );
      s4d.database.set(
        String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-roulettebetmoney"].join("")),
        rouletteBetMoney
      );
      s4dmessage
        .reply({
          embeds: [
            {
              color: String("#3366ff"),
              title: String("Let's see!"),
              description: String(
                [
                  "You bet **",
                  s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-roulettebetmoney"].join(""))),
                  "$**. Let's hope you win!",
                ].join("")
              ),
            },
          ],
          components: [
            new MessageActionRow().addComponents(
              new MessageButton()
                .setCustomId("roulette_start")
                .setLabel("Pull the trigger")
                .setEmoji("🎰")
                .setDisabled(false)
                .setStyle("PRIMARY")
            ),
          ],
        })
        .then(async (m) => {
          let collector = m.createMessageComponentCollector({
            filter: (i) => i.user.id === s4dmessage.author.id,
            time: Number(60000) * 1000,
          });
          collector.on("collect", async (i) => {
            if (i.customId == "roulette_start") {
              rouletteProbs = mathRandomInt(1, 5);
              rouletteMoney = rouletteBetMoney;
              if (
                !(
                  s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-money"].join(""))) -
                    rouletteBetMoney <=
                  0
                )
              ) {
                s4d.database.subtract(
                  String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-money"].join("")),
                  parseInt(rouletteBetMoney)
                );
                return;
              }
              tempMoneyVar = s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-money"].join("")));
              s4d.database.subtract(
                String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-money"].join("")),
                parseInt(tempMoneyVar)
              );
              rouletteBetMoney = rouletteBetMoney - tempMoneyVar;
              s4d.database.subtract(
                String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-bankmoney"].join("")),
                parseInt(rouletteBetMoney)
              );
              if (rouletteProbs == 5) {
                await i
                  .update({
                    embeds: [
                      {
                        color: String("#3366ff"),
                        title: String("Let's see!"),
                        description: String(
                          [
                            "You bet **",
                            s4d.database.get(
                              String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-roulettebetmoney"].join(""))
                            ),
                            "$**. Let's hope you win!",
                          ].join("")
                        ),
                      },
                    ],
                    components: [
                      new MessageActionRow().addComponents(
                        new MessageButton()
                          .setCustomId("roulette_start")
                          .setLabel("Pull the trigger")
                          .setEmoji("🎰")
                          .setDisabled(true)
                          .setStyle("SUCCESS")
                      ),
                    ],
                  })
                  .then(async (m) => {
                    rouletteMoney = rouletteMoney + rouletteAddedMoneyPercent;
                    s4d.database.add(
                      String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-money"].join("")),
                      parseInt(rouletteMoney)
                    );
                    s4dmessage
                      .reply({
                        embeds: [
                          {
                            color: String("#ff9900"),
                            title: String("The roulette has started spinning..."),
                          },
                        ],
                        allowedMentions: {
                          repliedUser: true,
                        },
                      })
                      .then(async (s4dfrost_real_reply) => {
                        await delay(Number(3) * 1000);
                        s4dfrost_real_reply.edit({
                          embeds: [
                            {
                              color: String("#33cc00"),
                              title: String("YOU WON! 🤑🤑🤑"),
                              description: String(["You literally won **", rouletteMoney, "$**! Congrats"].join("")),
                            },
                          ],
                        });
                      });
                    return;
                  });
              } else if (rouletteProbs < 5) {
                await i
                  .update({
                    embeds: [
                      {
                        color: String("#3366ff"),
                        title: String("Let's see!"),
                        description: String(
                          [
                            "You bet **",
                            s4d.database.get(
                              String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-roulettebetmoney"].join(""))
                            ),
                            "$**. Let's hope you win!",
                          ].join("")
                        ),
                      },
                    ],
                    components: [
                      new MessageActionRow().addComponents(
                        new MessageButton()
                          .setCustomId("roulette_start")
                          .setLabel("Pull the trigger")
                          .setEmoji("🎰")
                          .setDisabled(true)
                          .setStyle("SUCCESS")
                      ),
                    ],
                  })
                  .then(async (m) => {
                    s4dmessage
                      .reply({
                        embeds: [
                          {
                            color: String("#ff9900"),
                            title: String("The roulette has started spinning..."),
                          },
                        ],
                        allowedMentions: {
                          repliedUser: true,
                        },
                      })
                      .then(async (s4dfrost_real_reply) => {
                        await delay(Number(3) * 1000);
                        s4dfrost_real_reply.edit({
                          embeds: [
                            {
                              color: String("#ff0000"),
                              title: String("NNNNNNNNNNNOOOOOOOOOO!"),
                              description: String(
                                [
                                  "Sadly you lost **",
                                  s4d.database.get(
                                    String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-roulettebetmoney"].join(""))
                                  ),
                                  "$**! :((((((",
                                ].join("")
                              ),
                            },
                          ],
                        });
                      });
                    return;
                  });
              }
            }
          });
        });
      return;
    }

    /*
    D!PV
    */
    if (
      (s4dmessage.content.toUpperCase() || "").startsWith("D!POSTVIDEO" || "") ||
      (s4dmessage.content.toUpperCase() || "").startsWith("D!PV" || "")
    ) {
      if (!s4d.database.has(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-pvtimer"].join("")))) {
        s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-pvtimer"].join("")), 0);
      }
      if (
        !(
          new Date().getTime() >
          s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-pvtimer"].join(""))) + 1800000
        )
      ) {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#000000"),
              description: String(
                [
                  "⏰ Slowdown man, you will post a video again: **<t:",
                  Math.floor(
                    (s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-pvtimer"].join(""))) +
                      1800000) /
                      1000
                  ),
                  ":R>**",
                ].join("")
              ),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      postVideoCooldown = new Date().getTime();
      s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-pvtimer"].join("")), postVideoCooldown);
      s4dmessage
        .reply({
          embeds: [
            {
              color: String("#3366ff"),
              title: String(String(s4dmessage.author.username) + " is going to post a video!"),
              description: String("What type of video do you want to upload?"),
              thumbnail: {
                url: String("https://cdn.discordapp.com/attachments/916701043738423336/965523328553078784/Upload.png"),
              },
              footer: {
                text: String("Click the button to choose"),
                icon_url: String(),
              },
            },
          ],
          components: [
            new MessageActionRow().addComponents(
              new MessageButton().setCustomId("pv_gaming").setLabel("Gaming").setDisabled(false).setStyle("PRIMARY"),
              new MessageButton().setCustomId("pv_documentary").setLabel("Documentary").setDisabled(false).setStyle("PRIMARY"),
              new MessageButton().setCustomId("pv_funny").setLabel("Funny").setDisabled(false).setStyle("PRIMARY"),
              new MessageButton().setCustomId("pv_tutorial").setLabel("Tutorial").setDisabled(false).setStyle("PRIMARY")
            ),
          ],
        })
        .then(async (m) => {
          let collector = m.createMessageComponentCollector({
            filter: (i) => i.user.id === s4dmessage.author.id,
            time: 60000,
          });
          collector.on("collect", async (i) => {
            if (i.customId == "pv_gaming") {
              postVideoProbsGaming = mathRandomInt(1, 3);
              if (postVideoProbsGaming < 3) {
                postVideoMoney = mathRandomInt(90, 120);
                s4d.database.add(
                  String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-money"].join("")),
                  parseInt(postVideoMoney)
                );
                await i
                  .update({
                    embeds: [
                      {
                        color: String("#33cc00"),
                        title: String("You posted a Gaming video!"),
                        description: String(
                          [
                            "Your video about: **",
                            listsGetRandomItem(
                              ["Minecraft", "Garry's Mod", "Roblox", "Sex with Stalin", "TF2", "GTA V", "Gen*shit* Impact"],
                              false
                            ),
                            "** and you got **",
                            postVideoMoney,
                            "$** for the content!",
                          ].join("")
                        ),
                        thumbnail: {
                          url: String(
                            "https://cdn.discordapp.com/attachments/916701043738423336/965523328376922162/Sotnks.jpg"
                          ),
                        },
                      },
                    ],
                    components: [
                      new MessageActionRow().addComponents(
                        new MessageButton().setCustomId("pv_gaming").setLabel("Gaming").setDisabled(true).setStyle("SUCCESS"),
                        new MessageButton()
                          .setCustomId("pv_documentary")
                          .setLabel("Documentary")
                          .setDisabled(true)
                          .setStyle("SECONDARY"),
                        new MessageButton().setCustomId("pv_Funny").setLabel("Funny").setDisabled(true).setStyle("SECONDARY"),
                        new MessageButton()
                          .setCustomId("pv_tutorial")
                          .setLabel("Tutorial")
                          .setDisabled(true)
                          .setStyle("SECONDARY")
                      ),
                    ],
                  })
                  .then(async (m) => {
                    return;
                  });
              } else if (postVideoProbsGaming == 3) {
                await i
                  .update({
                    embeds: [
                      {
                        color: String("#ff0000"),
                        title: String("You posted a Gaming video!"),
                        description: String("The gameplay was boring! You got nothing!"),
                        thumbnail: {
                          url: String(
                            "https://media.discordapp.net/attachments/916701043738423336/965523328188157952/Not_stonks.jpg"
                          ),
                        },
                      },
                    ],
                    components: [
                      new MessageActionRow().addComponents(
                        new MessageButton().setCustomId("pv_gaming").setLabel("Gaming").setDisabled(true).setStyle("SUCCESS"),
                        new MessageButton()
                          .setCustomId("pv_documentary")
                          .setLabel("Documentary")
                          .setDisabled(true)
                          .setStyle("SECONDARY"),
                        new MessageButton().setCustomId("pv_Funny").setLabel("Funny").setDisabled(true).setStyle("SECONDARY"),
                        new MessageButton()
                          .setCustomId("pv_tutorial")
                          .setLabel("Tutorial")
                          .setDisabled(true)
                          .setStyle("SECONDARY")
                      ),
                    ],
                  })
                  .then(async (m) => {
                    return;
                  });
              }
            } else if (i.customId == "pv_documentary") {
              postVideoProbsDocumentary = mathRandomInt(1, 4);
              if (postVideoProbsDocumentary == 4) {
                postVideoMoney = mathRandomInt(90, 120);
                s4d.database.add(
                  String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-money"].join("")),
                  parseInt(postVideoMoney)
                );
                await i
                  .update({
                    embeds: [
                      {
                        color: String("#33cc00"),
                        title: String("You posted a Documentary video!"),
                        description: String(
                          [
                            "Your video about: **",
                            listsGetRandomItem(
                              ["History", "Science", "Geography", "Physics", "Psychology", "2b2t history", "Mechanics"],
                              false
                            ),
                            "** and you got **",
                            postVideoMoney,
                            "$** for the content!",
                          ].join("")
                        ),
                        thumbnail: {
                          url: String(
                            "https://cdn.discordapp.com/attachments/916701043738423336/965523328376922162/Sotnks.jpg"
                          ),
                        },
                      },
                    ],
                    components: [
                      new MessageActionRow().addComponents(
                        new MessageButton().setCustomId("pv_gaming").setLabel("Gaming").setDisabled(true).setStyle("SECONDARY"),
                        new MessageButton()
                          .setCustomId("pv_documentary")
                          .setLabel("Documentary")
                          .setDisabled(true)
                          .setStyle("SUCCESS"),
                        new MessageButton().setCustomId("pv_Funny").setLabel("Funny").setDisabled(true).setStyle("SECONDARY"),
                        new MessageButton()
                          .setCustomId("pv_tutorial")
                          .setLabel("Tutorial")
                          .setDisabled(true)
                          .setStyle("SECONDARY")
                      ),
                    ],
                  })
                  .then(async (m) => {
                    return;
                  });
              } else if (postVideoProbsDocumentary < 4) {
                await i
                  .update({
                    embeds: [
                      {
                        color: String("#ff0000"),
                        title: String("You posted a Documentary video!"),
                        description: String("The video was really boring, you got nothing!"),
                        thumbnail: {
                          url: String(
                            "https://cdn.discordapp.com/attachments/916701043738423336/965523328188157952/Not_stonks.jpg"
                          ),
                        },
                      },
                    ],
                    components: [
                      new MessageActionRow().addComponents(
                        new MessageButton().setCustomId("pv_gaming").setLabel("Gaming").setDisabled(true).setStyle("SECONDARY"),
                        new MessageButton()
                          .setCustomId("pv_documentary")
                          .setLabel("Documentary")
                          .setDisabled(true)
                          .setStyle("SUCCESS"),
                        new MessageButton().setCustomId("pv_Funny").setLabel("Funny").setDisabled(true).setStyle("SECONDARY"),
                        new MessageButton()
                          .setCustomId("pv_tutorial")
                          .setLabel("Tutorial")
                          .setDisabled(true)
                          .setStyle("SECONDARY")
                      ),
                    ],
                  })
                  .then(async (m) => {
                    return;
                  });
              }
            } else if (i.customId == "pv_funny") {
              postVideoProbsFunny = mathRandomInt(1, 3);
              if (postVideoProbsFunny < 3) {
                postVideoMoney = mathRandomInt(90, 120);
                s4d.database.add(
                  String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-money"].join("")),
                  parseInt(postVideoMoney)
                );
                await i
                  .update({
                    embeds: [
                      {
                        color: String("#33cc00"),
                        title: String("You posted a Funny video!"),
                        description: String(
                          [
                            "Your video about: **",
                            listsGetRandomItem(
                              ["Memes", "Funny Cats", "Funny Dogs", "Funny images", "Funny moments", "Trolls", "Funny people"],
                              false
                            ),
                            "** and you got **",
                            postVideoMoney,
                            "$** for the content!",
                          ].join("")
                        ),
                        thumbnail: {
                          url: String(
                            "https://cdn.discordapp.com/attachments/916701043738423336/965523328376922162/Sotnks.jpg"
                          ),
                        },
                      },
                    ],
                    components: [
                      new MessageActionRow().addComponents(
                        new MessageButton().setCustomId("pv_gaming").setLabel("Gaming").setDisabled(true).setStyle("SECONDARY"),
                        new MessageButton()
                          .setCustomId("pv_documentary")
                          .setLabel("Documentary")
                          .setDisabled(true)
                          .setStyle("SECONDARY"),
                        new MessageButton().setCustomId("pv_Funny").setLabel("Funny").setDisabled(true).setStyle("SUCCESS"),
                        new MessageButton()
                          .setCustomId("pv_tutorial")
                          .setLabel("Tutorial")
                          .setDisabled(true)
                          .setStyle("SECONDARY")
                      ),
                    ],
                  })
                  .then(async (m) => {
                    return;
                  });
              } else if (postVideoProbsFunny == 3) {
                await i
                  .update({
                    embeds: [
                      {
                        color: String("#ff0000"),
                        title: String("You posted a Funny video!"),
                        description: String(
                          "Brooo do you see what I see? No, this can't be real... Omg dude... Bro I think you just posted cringe bro. Smh. This is going to have consequences my friend. No, I'm not going to rape, torture or kill you and your family, even if i could do it. You gonna lose subscriber!!!! Bro you gonna lose subscriber. Don't you realize? You gonna lose subscriber! Go back to your cringe subscriber on cringe.com and cry like a cringe baby. Even your cringe subscriber are going to lose subscriber. That's how cringe you are. Have fun losing your fucking subscriber."
                        ),
                        thumbnail: {
                          url: String(
                            "https://cdn.discordapp.com/attachments/916701043738423336/965523328188157952/Not_stonks.jpg"
                          ),
                        },
                      },
                    ],
                    components: [
                      new MessageActionRow().addComponents(
                        new MessageButton().setCustomId("pv_gaming").setLabel("Gaming").setDisabled(true).setStyle("SECONDARY"),
                        new MessageButton()
                          .setCustomId("pv_documentary")
                          .setLabel("Documentary")
                          .setDisabled(true)
                          .setStyle("SECONDARY"),
                        new MessageButton().setCustomId("pv_Funny").setLabel("Funny").setDisabled(true).setStyle("SUCCESS"),
                        new MessageButton()
                          .setCustomId("pv_tutorial")
                          .setLabel("Tutorial")
                          .setDisabled(true)
                          .setStyle("SECONDARY")
                      ),
                    ],
                  })
                  .then(async (m) => {
                    return;
                  });
              }
            } else if (i.customId == "pv_tutorial") {
              postVideoProbsTutorial = mathRandomInt(1, 4);
              if (postVideoProbsTutorial < 4) {
                postVideoMoney = mathRandomInt(90, 120);
                s4d.database.add(
                  String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-money"].join("")),
                  parseInt(postVideoMoney)
                );
                await i
                  .update({
                    embeds: [
                      {
                        color: String("#33cc00"),
                        title: String("You posted a Tutorial video!"),
                        description: String(
                          [
                            "Your video about: **",
                            listsGetRandomItem(
                              [
                                "How to build an house in Minecraft",
                                "How to DoS with Paint",
                                "How to install Win10",
                                "How to fly",
                                "How to Alt F4 on your teacher",
                                "How to copy homeworks",
                                "How to teleport in real life",
                              ],
                              false
                            ),
                            "** and you got **",
                            postVideoMoney,
                            "$** for the content!",
                          ].join("")
                        ),
                        thumbnail: {
                          url: String(
                            "https://cdn.discordapp.com/attachments/916701043738423336/965523328376922162/Sotnks.jpg"
                          ),
                        },
                      },
                    ],
                    components: [
                      new MessageActionRow().addComponents(
                        new MessageButton().setCustomId("pv_gaming").setLabel("Gaming").setDisabled(true).setStyle("SECONDARY"),
                        new MessageButton()
                          .setCustomId("pv_documentary")
                          .setLabel("Documentary")
                          .setDisabled(true)
                          .setStyle("SECONDARY"),
                        new MessageButton().setCustomId("pv_Funny").setLabel("Funny").setDisabled(true).setStyle("SECONDARY"),
                        new MessageButton()
                          .setCustomId("pv_tutorial")
                          .setLabel("Tutorial")
                          .setDisabled(true)
                          .setStyle("SUCCESS")
                      ),
                    ],
                  })
                  .then(async (m) => {
                    return;
                  });
              } else if (postVideoProbsTutorial == 4) {
                await i
                  .update({
                    embeds: [
                      {
                        color: String("#ff0000"),
                        title: String("You posted a Tutorial video!"),
                        description: String("The Tutorial was useless and you got nothing!"),
                        thumbnail: {
                          url: String(
                            "https://cdn.discordapp.com/attachments/916701043738423336/965523328188157952/Not_stonks.jpg"
                          ),
                        },
                      },
                    ],
                    components: [
                      new MessageActionRow().addComponents(
                        new MessageButton().setCustomId("pv_gaming").setLabel("Gaming").setDisabled(true).setStyle("SECONDARY"),
                        new MessageButton()
                          .setCustomId("pv_documentary")
                          .setLabel("Documentary")
                          .setDisabled(true)
                          .setStyle("SECONDARY"),
                        new MessageButton().setCustomId("pv_Funny").setLabel("Funny").setDisabled(true).setStyle("SECONDARY"),
                        new MessageButton()
                          .setCustomId("pv_tutorial")
                          .setLabel("Tutorial")
                          .setDisabled(true)
                          .setStyle("SUCCESS")
                      ),
                    ],
                  })
                  .then(async (m) => {
                    return;
                  });
              }
            }
          });
        });
      return;
    }

    /*
    D!PM
    */
    if (
      (s4dmessage.content.toUpperCase() || "").startsWith("D!POSTMEME" || "") ||
      (s4dmessage.content.toUpperCase() || "").startsWith("D!PM" || "")
    ) {
      if (!s4d.database.has(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-pmtimer"].join("")))) {
        s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-pmtimer"].join("")), 0);
      }
      if (
        !(
          new Date().getTime() >
          s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-pmtimer"].join(""))) + 1800000
        )
      ) {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#000000"),
              description: String(
                [
                  "⏰ Slowdown man, you can post a meme again: **<t:",
                  Math.floor(
                    (s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-pmtimer"].join(""))) +
                      1800000) /
                      1000
                  ),
                  ":R>**",
                ].join("")
              ),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      postMemeCooldown = new Date().getTime();
      s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-pmtimer"].join("")), postMemeCooldown);
      s4dmessage
        .reply({
          embeds: [
            {
              color: String("#3366ff"),
              title: String(String(s4dmessage.author.username) + " is going to post a meme!"),
              description: String("What type of meme do you want to post?"),
              thumbnail: {
                url: String("https://cdn.discordapp.com/attachments/916701043738423336/965531370795434024/Reddit.png"),
              },
              footer: {
                text: String("Click the button to choose"),
                icon_url: String(),
              },
            },
          ],
          components: [
            new MessageActionRow().addComponents(
              new MessageButton().setCustomId("pm_funny").setLabel("Funny").setDisabled(false).setStyle("PRIMARY"),
              new MessageButton().setCustomId("pm_me_irl").setLabel("Me_irl").setDisabled(false).setStyle("PRIMARY"),
              new MessageButton().setCustomId("pm_classic").setLabel("Classic").setDisabled(false).setStyle("PRIMARY"),
              new MessageButton().setCustomId("pm_copypasta").setLabel("Copypasta").setDisabled(false).setStyle("PRIMARY"),
              new MessageButton().setCustomId("pm_old").setLabel("Old").setDisabled(false).setStyle("PRIMARY")
            ),
          ],
        })
        .then(async (m) => {
          let collector = m.createMessageComponentCollector({
            filter: (i) => i.user.id === s4dmessage.author.id,
            time: 60000,
          });
          collector.on("collect", async (i) => {
            if (i.customId == "pm_funny") {
              postMemeProbsFunny = mathRandomInt(1, 3);
              if (postMemeProbsFunny < 3) {
                postMemeMoney = mathRandomInt(90, 120);
                s4d.database.add(
                  String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-money"].join("")),
                  parseInt(postMemeMoney)
                );
                await i
                  .update({
                    embeds: [
                      {
                        color: String("#33cc00"),
                        title: String("You posted a Funny meme!"),
                        description: String(["Nice meme, you got **", postMemeMoney, "$** for the content!"].join("")),
                        thumbnail: {
                          url: String(
                            "https://cdn.discordapp.com/attachments/916701043738423336/965538846546726933/Upvotes.png"
                          ),
                        },
                      },
                    ],
                    components: [
                      new MessageActionRow().addComponents(
                        new MessageButton().setCustomId("pm_funny").setLabel("Funny").setDisabled(true).setStyle("SUCCESS"),
                        new MessageButton().setCustomId("pm_me_irl").setLabel("Me_irl").setDisabled(true).setStyle("SECONDARY"),
                        new MessageButton()
                          .setCustomId("pm_classic")
                          .setLabel("Classic")
                          .setDisabled(true)
                          .setStyle("SECONDARY"),
                        new MessageButton()
                          .setCustomId("pm_copypasta")
                          .setLabel("Copypasta")
                          .setDisabled(true)
                          .setStyle("SECONDARY"),
                        new MessageButton().setCustomId("pm_old").setLabel("Old").setDisabled(true).setStyle("SECONDARY")
                      ),
                    ],
                  })
                  .then(async (m) => {
                    return;
                  });
              } else if (postMemeProbsFunny == 3) {
                await i
                  .update({
                    embeds: [
                      {
                        color: String("#ff0000"),
                        title: String("You posted a Funny meme!"),
                        description: String("What a cringe meme, no upvotes"),
                        thumbnail: {
                          url: String(
                            "https://cdn.discordapp.com/attachments/916701043738423336/965538846085373952/Downvotes.png"
                          ),
                        },
                      },
                    ],
                    components: [
                      new MessageActionRow().addComponents(
                        new MessageButton().setCustomId("pm_funny").setLabel("Funny").setDisabled(true).setStyle("SUCCESS"),
                        new MessageButton().setCustomId("pm_me_irl").setLabel("Me_irl").setDisabled(true).setStyle("SECONDARY"),
                        new MessageButton()
                          .setCustomId("pm_classic")
                          .setLabel("Classic")
                          .setDisabled(true)
                          .setStyle("SECONDARY"),
                        new MessageButton()
                          .setCustomId("pm_copypasta")
                          .setLabel("Copypasta")
                          .setDisabled(true)
                          .setStyle("SECONDARY"),
                        new MessageButton().setCustomId("pm_old").setLabel("Old").setDisabled(true).setStyle("SECONDARY")
                      ),
                    ],
                  })
                  .then(async (m) => {
                    return;
                  });
              }
            } else if (i.customId == "pm_me_irl") {
              postMemeProbsMeIrl = mathRandomInt(1, 4);
              if (postMemeProbsMeIrl < 4) {
                postMemeMoney = mathRandomInt(90, 120);
                s4d.database.add(
                  String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-money"].join("")),
                  parseInt(postMemeMoney)
                );
                await i
                  .update({
                    embeds: [
                      {
                        color: String("#33cc00"),
                        title: String("You posted a Me_irl meme!"),
                        description: String(["It was a true meme, you got **", postMemeMoney, "$** for that!"].join("")),
                        thumbnail: {
                          url: String(
                            "https://cdn.discordapp.com/attachments/916701043738423336/965538846546726933/Upvotes.png"
                          ),
                        },
                      },
                    ],
                    components: [
                      new MessageActionRow().addComponents(
                        new MessageButton().setCustomId("pm_funny").setLabel("Funny").setDisabled(true).setStyle("SECONDARY"),
                        new MessageButton().setCustomId("pm_me_irl").setLabel("Me_irl").setDisabled(true).setStyle("SUCCESS"),
                        new MessageButton()
                          .setCustomId("pm_classic")
                          .setLabel("Classic")
                          .setDisabled(true)
                          .setStyle("SECONDARY"),
                        new MessageButton()
                          .setCustomId("pm_copypasta")
                          .setLabel("Copypasta")
                          .setDisabled(true)
                          .setStyle("SECONDARY"),
                        new MessageButton().setCustomId("pm_old").setLabel("Old").setDisabled(true).setStyle("SECONDARY")
                      ),
                    ],
                  })
                  .then(async (m) => {
                    return;
                  });
              } else if (postMemeProbsMeIrl == 4) {
                await i
                  .update({
                    embeds: [
                      {
                        color: String("#ff0000"),
                        title: String("Nah!"),
                        description: String("The meme wasn't realistic"),
                        thumbnail: {
                          url: String(
                            "https://cdn.discordapp.com/attachments/916701043738423336/965538846085373952/Downvotes.png"
                          ),
                        },
                      },
                    ],
                    components: [
                      new MessageActionRow().addComponents(
                        new MessageButton().setCustomId("pm_funny").setLabel("Funny").setDisabled(true).setStyle("SECONDARY"),
                        new MessageButton().setCustomId("pm_me_irl").setLabel("Me_irl").setDisabled(true).setStyle("SUCCESS"),
                        new MessageButton()
                          .setCustomId("pm_classic")
                          .setLabel("Classic")
                          .setDisabled(true)
                          .setStyle("SECONDARY"),
                        new MessageButton()
                          .setCustomId("pm_copypasta")
                          .setLabel("Copypasta")
                          .setDisabled(true)
                          .setStyle("SECONDARY"),
                        new MessageButton().setCustomId("pm_old").setLabel("Old").setDisabled(true).setStyle("SECONDARY")
                      ),
                    ],
                  })
                  .then(async (m) => {
                    return;
                  });
              }
            } else if (i.customId == "pm_classic") {
              postMemeProbsClassic = mathRandomInt(1, 2);
              if (postMemeProbsClassic == 2) {
                postMemeMoney = mathRandomInt(90, 120);
                s4d.database.add(
                  String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-money"].join("")),
                  parseInt(postMemeMoney)
                );
                await i
                  .update({
                    embeds: [
                      {
                        color: String("#33cc00"),
                        title: String("You posted the Classic meme!"),
                        description: String(["Still a funny meme, you got **", postMemeMoney, "$**"].join("")),
                        thumbnail: {
                          url: String(
                            "https://cdn.discordapp.com/attachments/916701043738423336/965538846546726933/Upvotes.png"
                          ),
                        },
                      },
                    ],
                    components: [
                      new MessageActionRow().addComponents(
                        new MessageButton().setCustomId("pm_funny").setLabel("Funny").setDisabled(true).setStyle("SECONDARY"),
                        new MessageButton().setCustomId("pm_me_irl").setLabel("Me_irl").setDisabled(true).setStyle("SECONDARY"),
                        new MessageButton().setCustomId("pm_classic").setLabel("Classic").setDisabled(true).setStyle("SUCCESS"),
                        new MessageButton()
                          .setCustomId("pm_copypasta")
                          .setLabel("Copypasta")
                          .setDisabled(true)
                          .setStyle("SECONDARY"),
                        new MessageButton().setCustomId("pm_old").setLabel("Old").setDisabled(true).setStyle("SECONDARY")
                      ),
                    ],
                  })
                  .then(async (m) => {
                    return;
                  });
              } else if (postMemeProbsClassic == 1) {
                await i
                  .update({
                    embeds: [
                      {
                        color: String("#ff0000"),
                        title: String("You posted a Classic meme!"),
                        description: String("This meme is not funny anymore"),
                        thumbnail: {
                          url: String(
                            "https://cdn.discordapp.com/attachments/916701043738423336/965538846085373952/Downvotes.png"
                          ),
                        },
                      },
                    ],
                    components: [
                      new MessageActionRow().addComponents(
                        new MessageButton().setCustomId("pm_funny").setLabel("Funny").setDisabled(true).setStyle("SECONDARY"),
                        new MessageButton().setCustomId("pm_me_irl").setLabel("Me_irl").setDisabled(true).setStyle("SECONDARY"),
                        new MessageButton().setCustomId("pm_classic").setLabel("Classic").setDisabled(true).setStyle("SUCCESS"),
                        new MessageButton()
                          .setCustomId("pm_copypasta")
                          .setLabel("Copypasta")
                          .setDisabled(true)
                          .setStyle("SECONDARY"),
                        new MessageButton().setCustomId("pm_old").setLabel("Old").setDisabled(true).setStyle("SECONDARY")
                      ),
                    ],
                  })
                  .then(async (m) => {
                    return;
                  });
              }
            } else if (i.customId == "pm_copypasta") {
              postMemeProbsCopypasta = mathRandomInt(1, 3);
              if (postMemeProbsCopypasta == 3) {
                postMemeMoney = mathRandomInt(90, 120);
                s4d.database.add(
                  String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-money"].join("")),
                  parseInt(postMemeMoney)
                );
                await i
                  .update({
                    embeds: [
                      {
                        color: String("#33cc00"),
                        title: String("You posted a Copypasta meme!"),
                        description: String(
                          ["Lucky, nice meme, here **", postMemeMoney, "$** for the not copied meme!"].join("")
                        ),
                        thumbnail: {
                          url: String(
                            "https://cdn.discordapp.com/attachments/916701043738423336/965538846546726933/Upvotes.png"
                          ),
                        },
                      },
                    ],
                    components: [
                      new MessageActionRow().addComponents(
                        new MessageButton().setCustomId("pm_funny").setLabel("Funny").setDisabled(true).setStyle("SECONDARY"),
                        new MessageButton().setCustomId("pm_me_irl").setLabel("Me_irl").setDisabled(true).setStyle("SECONDARY"),
                        new MessageButton()
                          .setCustomId("pm_classic")
                          .setLabel("Classic")
                          .setDisabled(true)
                          .setStyle("SECONDARY"),
                        new MessageButton()
                          .setCustomId("pm_copypasta")
                          .setLabel("Copypasta")
                          .setDisabled(true)
                          .setStyle("SUCCESS"),
                        new MessageButton().setCustomId("pm_old").setLabel("Old").setDisabled(true).setStyle("SECONDARY")
                      ),
                    ],
                  })
                  .then(async (m) => {
                    return;
                  });
              } else if (postMemeProbsCopypasta < 3) {
                await i
                  .update({
                    embeds: [
                      {
                        color: String("#ff0000"),
                        title: String(">:("),
                        description: String("Stop copying this meme! It's cringe!"),
                        thumbnail: {
                          url: String(
                            "https://cdn.discordapp.com/attachments/916701043738423336/965538846085373952/Downvotes.png"
                          ),
                        },
                      },
                    ],
                    components: [
                      new MessageActionRow().addComponents(
                        new MessageButton().setCustomId("pm_funny").setLabel("Funny").setDisabled(true).setStyle("SECONDARY"),
                        new MessageButton().setCustomId("pm_me_irl").setLabel("Me_irl").setDisabled(true).setStyle("SECONDARY"),
                        new MessageButton()
                          .setCustomId("pm_classic")
                          .setLabel("Classic")
                          .setDisabled(true)
                          .setStyle("SECONDARY"),
                        new MessageButton()
                          .setCustomId("pm_copypasta")
                          .setLabel("Copypasta")
                          .setDisabled(true)
                          .setStyle("SUCCESS"),
                        new MessageButton().setCustomId("pm_old").setLabel("Old").setDisabled(true).setStyle("SECONDARY")
                      ),
                    ],
                  })
                  .then(async (m) => {
                    return;
                  });
              }
            } else if (i.customId == "pm_old") {
              postMemeProbsOld = mathRandomInt(1, 3);
              if (postMemeProbsOld < 3) {
                postMemeMoney = mathRandomInt(90, 120);
                s4d.database.add(
                  String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-money"].join("")),
                  parseInt(postMemeMoney)
                );
                await i
                  .update({
                    embeds: [
                      {
                        color: String("#33cc00"),
                        title: String("You posted an Old meme!"),
                        description: String(["Old memes still funny, you got **", postMemeMoney, "$**!"].join("")),
                        thumbnail: {
                          url: String(
                            "https://cdn.discordapp.com/attachments/916701043738423336/965538846546726933/Upvotes.png"
                          ),
                        },
                      },
                    ],
                    components: [
                      new MessageActionRow().addComponents(
                        new MessageButton().setCustomId("pm_funny").setLabel("Funny").setDisabled(true).setStyle("SECONDARY"),
                        new MessageButton().setCustomId("pm_me_irl").setLabel("Me_irl").setDisabled(true).setStyle("SECONDARY"),
                        new MessageButton()
                          .setCustomId("pm_classic")
                          .setLabel("Classic")
                          .setDisabled(true)
                          .setStyle("SECONDARY"),
                        new MessageButton()
                          .setCustomId("pm_copypasta")
                          .setLabel("Copypasta")
                          .setDisabled(true)
                          .setStyle("SECONDARY"),
                        new MessageButton().setCustomId("pm_old").setLabel("Old").setDisabled(true).setStyle("SUCCESS")
                      ),
                    ],
                  })
                  .then(async (m) => {
                    return;
                  });
              } else if (postMemeProbsOld == 3) {
                await i
                  .update({
                    embeds: [
                      {
                        color: String("#ff0000"),
                        title: String("You posted an Old meme!"),
                        description: String("Old memes are not funny, new memes are better!"),
                        thumbnail: {
                          url: String(
                            "https://cdn.discordapp.com/attachments/916701043738423336/965538846085373952/Downvotes.png"
                          ),
                        },
                      },
                    ],
                    components: [
                      new MessageActionRow().addComponents(
                        new MessageButton().setCustomId("pm_funny").setLabel("Funny").setDisabled(true).setStyle("SECONDARY"),
                        new MessageButton().setCustomId("pm_me_irl").setLabel("Me_irl").setDisabled(true).setStyle("SECONDARY"),
                        new MessageButton()
                          .setCustomId("pm_classic")
                          .setLabel("Classic")
                          .setDisabled(true)
                          .setStyle("SECONDARY"),
                        new MessageButton()
                          .setCustomId("pm_copypasta")
                          .setLabel("Copypasta")
                          .setDisabled(true)
                          .setStyle("SECONDARY"),
                        new MessageButton().setCustomId("pm_old").setLabel("Old").setDisabled(true).setStyle("SUCCESS")
                      ),
                    ],
                  })
                  .then(async (m) => {
                    return;
                  });
              }
            }
          });
        });
      return;
    }

    /*
    D!JOBS
    */
    if ((s4dmessage.content.toUpperCase() || "").startsWith("D!JOBS" || "")) {
      if (!s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-hasjob"].join("")))) {
        s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-hasjob"].join("")), "false");
      }
      if (s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-hasjob"].join(""))) == "true") {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("You already have a job!"),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      s4dmessage
        .reply({
          embeds: [
            {
              color: String("#33ccff"),
              title: String("Choose a job!"),
              description: String("You don't have a job, you need to choose a job to use **d!work**"),
            },
          ],
          components: [
            new MessageActionRow().addComponents(
              new MessageButton()
                .setCustomId("job_firefighter")
                .setLabel("Fire fighter")
                .setEmoji("🚒")
                .setDisabled(false)
                .setStyle("PRIMARY"),
              new MessageButton()
                .setCustomId("job_teacher")
                .setLabel("Teacher")
                .setEmoji("👩‍🏫")
                .setDisabled(false)
                .setStyle("PRIMARY"),
              new MessageButton()
                .setCustomId("job_dsmod")
                .setLabel("Discord Mod")
                .setEmoji("💻")
                .setDisabled(false)
                .setStyle("PRIMARY"),
              new MessageButton()
                .setCustomId("job_mechanic")
                .setLabel("Mechanic")
                .setEmoji("🔧")
                .setDisabled(false)
                .setStyle("PRIMARY"),
              new MessageButton()
                .setCustomId("joblist_nextpage")
                .setLabel("Next page")
                .setEmoji("➡️")
                .setDisabled(false)
                .setStyle("PRIMARY")
            ),
          ],
        })
        .then(async (m) => {
          let collector = m.createMessageComponentCollector({
            filter: (i) => i.user.id === s4dmessage.author.id,
            time: Number(60000) * 1000,
          });
          collector.on("collect", async (i) => {
            if (i.customId == "joblist_nextpage") {
              await i
                .update({
                  embeds: [
                    {
                      color: String("#33ccff"),
                      title: String("Choose a job!"),
                      description: String("You don't have a job, you need to choose a job to use **d!work**"),
                      footer: {
                        text: String("Click the buttons to choose"),
                        icon_url: String(),
                      },
                    },
                  ],
                  components: [
                    new MessageActionRow().addComponents(
                      new MessageButton()
                        .setCustomId("joblist_prevpage")
                        .setLabel("Previous page")
                        .setEmoji("⬅️")
                        .setDisabled(false)
                        .setStyle("PRIMARY"),
                      new MessageButton()
                        .setCustomId("job_chef")
                        .setLabel("Chef")
                        .setEmoji("🧑‍🍳")
                        .setDisabled(false)
                        .setStyle("PRIMARY"),
                      new MessageButton()
                        .setCustomId("job_scientist")
                        .setLabel("Scientist")
                        .setEmoji("🧪")
                        .setDisabled(false)
                        .setStyle("PRIMARY")
                    ),
                  ],
                })
                .then(async (m) => {
                  return;
                });
            } else if (i.customId == "joblist_prevpage") {
              await i
                .update({
                  embeds: [
                    {
                      color: String("#33ccff"),
                      title: String("Choose a job!"),
                      description: String("You don't have a job, you need to choose a job to use **d!work**"),
                      footer: {
                        text: String("Click the buttons to choose"),
                        icon_url: String(),
                      },
                    },
                  ],
                  components: [
                    new MessageActionRow().addComponents(
                      new MessageButton()
                        .setCustomId("job_firefighter")
                        .setLabel("Fire fighter")
                        .setEmoji("🚒")
                        .setDisabled(false)
                        .setStyle("PRIMARY"),
                      new MessageButton()
                        .setCustomId("job_teacher")
                        .setLabel("Teacher")
                        .setEmoji("👩‍🏫")
                        .setDisabled(false)
                        .setStyle("PRIMARY"),
                      new MessageButton()
                        .setCustomId("job_dsmod")
                        .setLabel("Discord Mod")
                        .setEmoji("💻")
                        .setDisabled(false)
                        .setStyle("PRIMARY"),
                      new MessageButton()
                        .setCustomId("job_mechanic")
                        .setLabel("Mechanic")
                        .setEmoji("🔧")
                        .setDisabled(false)
                        .setStyle("PRIMARY"),
                      new MessageButton()
                        .setCustomId("joblist_nextpage")
                        .setLabel("Next page")
                        .setEmoji("➡️")
                        .setDisabled(false)
                        .setStyle("PRIMARY")
                    ),
                  ],
                })
                .then(async (m) => {
                  return;
                });
            }
            if (i.customId == "job_firefighter") {
              await i
                .update({
                  embeds: [
                    {
                      color: String("#33cc00"),
                      title: String("You are now a Fire Fighter!"),
                      description: String("You choose to become a Fire Fighter"),
                    },
                  ],
                  components: [
                    new MessageActionRow().addComponents(
                      new MessageButton()
                        .setCustomId("job_firefighter")
                        .setLabel("Fire fighter")
                        .setEmoji("🚒")
                        .setDisabled(true)
                        .setStyle("SUCCESS"),
                      new MessageButton()
                        .setCustomId("job_teacher")
                        .setLabel("Teacher")
                        .setEmoji("👩‍🏫")
                        .setDisabled(true)
                        .setStyle("SECONDARY"),
                      new MessageButton()
                        .setCustomId("job_dsmod")
                        .setLabel("Discord Mod")
                        .setEmoji("💻")
                        .setDisabled(true)
                        .setStyle("SECONDARY"),
                      new MessageButton()
                        .setCustomId("job_mechanic")
                        .setLabel("Mechanic")
                        .setEmoji("🔧")
                        .setDisabled(true)
                        .setStyle("SECONDARY"),
                      new MessageButton()
                        .setCustomId("joblist_nextpage")
                        .setLabel("Next page")
                        .setEmoji("➡️")
                        .setDisabled(true)
                        .setStyle("SECONDARY")
                    ),
                  ],
                })
                .then(async (m) => {
                  s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-hasjob"].join("")), "true");
                  s4d.database.set(
                    String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-jobfirefighter"].join("")),
                    "true"
                  );
                  return;
                });
            } else if (i.customId == "job_teacher") {
              await i
                .update({
                  embeds: [
                    {
                      color: String("#33cc00"),
                      title: String("You are now a Teacher!"),
                      description: String("You choose to become a Teacher"),
                    },
                  ],
                  components: [
                    new MessageActionRow().addComponents(
                      new MessageButton()
                        .setCustomId("job_firefighter")
                        .setLabel("Fire fighter")
                        .setEmoji("🚒")
                        .setDisabled(true)
                        .setStyle("SECONDARY"),
                      new MessageButton()
                        .setCustomId("job_teacher")
                        .setLabel("Teacher")
                        .setEmoji("👩‍🏫")
                        .setDisabled(true)
                        .setStyle("SUCCESS"),
                      new MessageButton()
                        .setCustomId("job_dsmod")
                        .setLabel("Discord Mod")
                        .setEmoji("💻")
                        .setDisabled(true)
                        .setStyle("SECONDARY"),
                      new MessageButton()
                        .setCustomId("job_mechanic")
                        .setLabel("Mechanic")
                        .setEmoji("🔧")
                        .setDisabled(true)
                        .setStyle("SECONDARY"),
                      new MessageButton()
                        .setCustomId("joblist_nextpage")
                        .setLabel("Next page")
                        .setEmoji("➡️")
                        .setDisabled(true)
                        .setStyle("SECONDARY")
                    ),
                  ],
                })
                .then(async (m) => {
                  s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-hasjob"].join("")), "true");
                  s4d.database.set(
                    String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-jobteacher"].join("")),
                    "true"
                  );
                  return;
                });
            } else if (i.customId == "job_dsmod") {
              await i
                .update({
                  embeds: [
                    {
                      color: String("#33cc00"),
                      title: String("You are now a Discord Mod"),
                      description: String("You choose to become a Discord Mod"),
                    },
                  ],
                  components: [
                    new MessageActionRow().addComponents(
                      new MessageButton()
                        .setCustomId("job_firefighter")
                        .setLabel("Fire fighter")
                        .setEmoji("🚒")
                        .setDisabled(true)
                        .setStyle("SECONDARY"),
                      new MessageButton()
                        .setCustomId("job_teacher")
                        .setLabel("Teacher")
                        .setEmoji("👩‍🏫")
                        .setDisabled(true)
                        .setStyle("SECONDARY"),
                      new MessageButton()
                        .setCustomId("job_dsmod")
                        .setLabel("Discord Mod")
                        .setEmoji("💻")
                        .setDisabled(true)
                        .setStyle("SUCCESS"),
                      new MessageButton()
                        .setCustomId("job_mechanic")
                        .setLabel("Mechanic")
                        .setEmoji("🔧")
                        .setDisabled(true)
                        .setStyle("SECONDARY"),
                      new MessageButton()
                        .setCustomId("joblist_nextpage")
                        .setLabel("Next page")
                        .setEmoji("➡️")
                        .setDisabled(true)
                        .setStyle("SECONDARY")
                    ),
                  ],
                })
                .then(async (m) => {
                  s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-hasjob"].join("")), "true");
                  s4d.database.set(
                    String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-jobdiscordmod"].join("")),
                    "true"
                  );
                  return;
                });
            } else if (i.customId == "job_mechanic") {
              await i
                .update({
                  embeds: [
                    {
                      color: String("#33cc00"),
                      title: String("You are now a Mechanic"),
                      description: String("You choose to become a good Mechanic"),
                    },
                  ],
                  components: [
                    new MessageActionRow().addComponents(
                      new MessageButton()
                        .setCustomId("job_firefighter")
                        .setLabel("Fire fighter")
                        .setEmoji("🚒")
                        .setDisabled(true)
                        .setStyle("SECONDARY"),
                      new MessageButton()
                        .setCustomId("job_teacher")
                        .setLabel("Teacher")
                        .setEmoji("👩‍🏫")
                        .setDisabled(true)
                        .setStyle("SECONDARY"),
                      new MessageButton()
                        .setCustomId("job_dsmod")
                        .setLabel("Discord Mod")
                        .setEmoji("💻")
                        .setDisabled(true)
                        .setStyle("SECONDARY"),
                      new MessageButton()
                        .setCustomId("job_mechanic")
                        .setLabel("Mechanic")
                        .setEmoji("🔧")
                        .setDisabled(true)
                        .setStyle("SUCCESS"),
                      new MessageButton()
                        .setCustomId("joblist_nextpage")
                        .setLabel("Next page")
                        .setEmoji("➡️")
                        .setDisabled(true)
                        .setStyle("SECONDARY")
                    ),
                  ],
                })
                .then(async (m) => {
                  s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-hasjob"].join("")), "true");
                  s4d.database.set(
                    String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-jobmechanic"].join("")),
                    "true"
                  );
                  return;
                });
            }
            if (i.customId == "job_chef") {
              await i
                .update({
                  embeds: [
                    {
                      color: String("#33cc00"),
                      title: String("You are now a Chef!"),
                      description: String("You choose to become a Chef"),
                    },
                  ],
                  components: [
                    new MessageActionRow().addComponents(
                      new MessageButton()
                        .setCustomId("joblist_prevpage")
                        .setLabel("Previous page")
                        .setEmoji("⬅️")
                        .setDisabled(true)
                        .setStyle("SECONDARY"),
                      new MessageButton()
                        .setCustomId("job_chef")
                        .setLabel("Chef")
                        .setEmoji("🧑‍🍳")
                        .setDisabled(true)
                        .setStyle("SUCCESS"),
                      new MessageButton()
                        .setCustomId("job_scientist")
                        .setLabel("Scientist")
                        .setEmoji("🧪")
                        .setDisabled(true)
                        .setStyle("SECONDARY")
                    ),
                  ],
                })
                .then(async (m) => {
                  s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-hasjob"].join("")), "true");
                  s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-jobchef"].join("")), "true");
                  return;
                });
            } else if (i.customId == "job_scientist") {
              await i
                .update({
                  embeds: [
                    {
                      color: String("#33cc00"),
                      title: String("You are now a Scientist!"),
                      description: String("You choose to become a Scientist"),
                    },
                  ],
                  components: [
                    new MessageActionRow().addComponents(
                      new MessageButton()
                        .setCustomId("joblist_prevpage")
                        .setLabel("Previous page")
                        .setEmoji("⬅️")
                        .setDisabled(true)
                        .setStyle("SECONDARY"),
                      new MessageButton()
                        .setCustomId("job_chef")
                        .setLabel("Chef")
                        .setEmoji("🧑‍🍳")
                        .setDisabled(true)
                        .setStyle("SECONDARY"),
                      new MessageButton()
                        .setCustomId("job_scientist")
                        .setLabel("Scientist")
                        .setEmoji("🧪")
                        .setDisabled(true)
                        .setStyle("SUCCESS")
                    ),
                  ],
                })
                .then(async (m) => {
                  s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-hasjob"].join("")), "true");
                  s4d.database.set(
                    String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-jobscientist"].join("")),
                    "true"
                  );
                  return;
                });
            }
          });
        });
      return;
    }

    /*
    D!WORK
    */
    if ((s4dmessage.content.toUpperCase() || "").startsWith("D!WORK" || "")) {
      if (s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-hasjob"].join(""))) == "false") {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("You don't have a job, do **d!jobs**"),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      if (!s4d.database.has(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-worktimer"].join("")))) {
        s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-worktimer"].join("")), 0);
      }
      if (
        !(
          new Date().getTime() >
          s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-worktimer"].join(""))) + 3600000
        )
      ) {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#000000"),
              description: String(
                [
                  "⏰ Slowdown man, you can work again: **<t:",
                  Math.floor(
                    (s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-worktimer"].join(""))) +
                      3600000) /
                      1000
                  ),
                  ":R>**",
                ].join("")
              ),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      workCooldown = new Date().getTime();
      s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-worktimer"].join("")), workCooldown);
      if (
        s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-jobfirefighter"].join(""))) == "true"
      ) {
        s4dmessage
          .reply({
            embeds: [
              {
                color: String("#999999"),
                title: String("EMERGENCY!"),
                description: String("There are 3 emergencys, you have to choose"),
              },
            ],
            components: [
              new MessageActionRow().addComponents(
                new MessageButton()
                  .setCustomId("firefighter_animal")
                  .setLabel("Save an animal")
                  .setDisabled(false)
                  .setStyle("PRIMARY"),
                new MessageButton()
                  .setCustomId("firefighter_fire")
                  .setLabel("Kill the fire")
                  .setDisabled(false)
                  .setStyle("PRIMARY"),
                new MessageButton()
                  .setCustomId("firefighter_forest")
                  .setLabel("Save a forest")
                  .setDisabled(false)
                  .setStyle("PRIMARY")
              ),
            ],
          })
          .then(async (m) => {
            let collector = m.createMessageComponentCollector({
              filter: (i) => i.user.id === s4dmessage.author.id,
              time: Number(60000) * 1000,
            });
            collector.on("collect", async (i) => {
              if (i.customId == "firefighter_animal") {
                firedProbs = mathRandomInt(1, 5);
                if (firedProbs == 5) {
                  s4d.database.set(
                    String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-jobfirefighter"].join("")),
                    "false"
                  );
                  s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-hasjob"].join("")), "false");
                  await i
                    .update({
                      embeds: [
                        {
                          color: String("#ff0000"),
                          title: String("Oh no!"),
                          description: String("You got fired and you lost your job :("),
                        },
                      ],
                      components: [
                        new MessageActionRow().addComponents(
                          new MessageButton()
                            .setCustomId("firefighter_animal")
                            .setLabel("Save an animal")
                            .setDisabled(true)
                            .setStyle("SUCCESS"),
                          new MessageButton()
                            .setCustomId("firefighter_fire")
                            .setLabel("Kill the fire")
                            .setDisabled(true)
                            .setStyle("SECONDARY"),
                          new MessageButton()
                            .setCustomId("firefighter_forest")
                            .setLabel("Save a forest")
                            .setDisabled(true)
                            .setStyle("SECONDARY")
                        ),
                      ],
                    })
                    .then(async (m) => {
                      return;
                    });
                } else if (firedProbs < 5) {
                  workMoney = mathRandomInt(100, 300);
                  s4d.database.add(
                    String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-money"].join("")),
                    parseInt(workMoney)
                  );
                  await i
                    .update({
                      embeds: [
                        {
                          color: String("#33cc00"),
                          title: String("You saved an animal!"),
                          description: String(
                            ["You saved the classic cat on the tree, you got **", workMoney, "$**!"].join("")
                          ),
                        },
                      ],
                      components: [
                        new MessageActionRow().addComponents(
                          new MessageButton()
                            .setCustomId("firefighter_animal")
                            .setLabel("Save an animal")
                            .setDisabled(true)
                            .setStyle("SUCCESS"),
                          new MessageButton()
                            .setCustomId("firefighter_fire")
                            .setLabel("Kill the fire")
                            .setDisabled(true)
                            .setStyle("SECONDARY"),
                          new MessageButton()
                            .setCustomId("firefighter_forest")
                            .setLabel("Save a forest")
                            .setDisabled(true)
                            .setStyle("SECONDARY")
                        ),
                      ],
                    })
                    .then(async (m) => {
                      return;
                    });
                }
              } else if (i.customId == "firefighter_fire") {
                firedProbs = mathRandomInt(1, 5);
                if (firedProbs == 5) {
                  s4d.database.set(
                    String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-jobfirefighter"].join("")),
                    "false"
                  );
                  s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-hasjob"].join("")), "false");
                  await i
                    .update({
                      embeds: [
                        {
                          color: String("#ff0000"),
                          title: String("Oh no!"),
                          description: String("You got fired and you lost your job :("),
                        },
                      ],
                      components: [
                        new MessageActionRow().addComponents(
                          new MessageButton()
                            .setCustomId("firefighter_animal")
                            .setLabel("Save an animal")
                            .setDisabled(true)
                            .setStyle("SECONDARY"),
                          new MessageButton()
                            .setCustomId("firefighter_fire")
                            .setLabel("Kill the fire")
                            .setDisabled(true)
                            .setStyle("SUCCESS"),
                          new MessageButton()
                            .setCustomId("firefighter_forest")
                            .setLabel("Save a forest")
                            .setDisabled(true)
                            .setStyle("SECONDARY")
                        ),
                      ],
                    })
                    .then(async (m) => {
                      return;
                    });
                } else if (firedProbs < 5) {
                  workMoney = mathRandomInt(150, 400);
                  s4d.database.add(
                    String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-money"].join("")),
                    parseInt(workMoney)
                  );
                  await i
                    .update({
                      embeds: [
                        {
                          color: String("#33cc00"),
                          title: String("What an hero!"),
                          description: String(["You saved some people from fire and you got **", workMoney, "$**!"].join("")),
                        },
                      ],
                      components: [
                        new MessageActionRow().addComponents(
                          new MessageButton()
                            .setCustomId("firefighter_animal")
                            .setLabel("Save an animal")
                            .setDisabled(true)
                            .setStyle("SECONDARY"),
                          new MessageButton()
                            .setCustomId("firefighter_fire")
                            .setLabel("Kill the fire")
                            .setDisabled(true)
                            .setStyle("SUCCESS"),
                          new MessageButton()
                            .setCustomId("firefighter_forest")
                            .setLabel("Save a forest")
                            .setDisabled(true)
                            .setStyle("SECONDARY")
                        ),
                      ],
                    })
                    .then(async (m) => {
                      return;
                    });
                }
              } else if (i.customId == "firefighter_forest") {
                firedProbs = mathRandomInt(1, 5);
                if (firedProbs == 5) {
                  s4d.database.set(
                    String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-jobfirefighter"].join("")),
                    "false"
                  );
                  s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-hasjob"].join("")), "false");
                  await i
                    .update({
                      embeds: [
                        {
                          color: String("#ff0000"),
                          title: String("Oh no!"),
                          description: String("You got fired and you lost your job :("),
                        },
                      ],
                      components: [
                        new MessageActionRow().addComponents(
                          new MessageButton()
                            .setCustomId("firefighter_animal")
                            .setLabel("Save an animal")
                            .setDisabled(true)
                            .setStyle("SECONDARY"),
                          new MessageButton()
                            .setCustomId("firefighter_fire")
                            .setLabel("Kill the fire")
                            .setDisabled(true)
                            .setStyle("SECONDARY"),
                          new MessageButton()
                            .setCustomId("firefighter_forest")
                            .setLabel("Save a forest")
                            .setDisabled(true)
                            .setStyle("SUCCESS")
                        ),
                      ],
                    })
                    .then(async (m) => {
                      return;
                    });
                } else if (firedProbs < 5) {
                  workMoney = mathRandomInt(150, 300);
                  s4d.database.add(
                    String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-money"].join("")),
                    parseInt(workMoney)
                  );
                  await i
                    .update({
                      embeds: [
                        {
                          color: String("#33cc00"),
                          title: String("That was epik"),
                          description: String(["You saved a forest from fire! You got **", workMoney, "$**!"].join("")),
                        },
                      ],
                      components: [
                        new MessageActionRow().addComponents(
                          new MessageButton()
                            .setCustomId("firefighter_animal")
                            .setLabel("Save an animal")
                            .setDisabled(true)
                            .setStyle("SECONDARY"),
                          new MessageButton()
                            .setCustomId("firefighter_fire")
                            .setLabel("Kill the fire")
                            .setDisabled(true)
                            .setStyle("SECONDARY"),
                          new MessageButton()
                            .setCustomId("firefighter_forest")
                            .setLabel("Save a forest")
                            .setDisabled(true)
                            .setStyle("SUCCESS")
                        ),
                      ],
                    })
                    .then(async (m) => {
                      return;
                    });
                }
              }
            });
          });
        return;
      } else if (
        s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-jobteacher"].join(""))) == "true"
      ) {
        s4dmessage
          .reply({
            embeds: [
              {
                color: String("#999999"),
                title: String("Time to teach!"),
                description: String("What subject do you want to teach now?"),
              },
            ],
            components: [
              new MessageActionRow().addComponents(
                new MessageButton().setCustomId("teacher_maths").setLabel("Maths").setDisabled(false).setStyle("PRIMARY"),
                new MessageButton().setCustomId("teacher_history").setLabel("History").setDisabled(false).setStyle("PRIMARY"),
                new MessageButton().setCustomId("teacher_science").setLabel("Science").setDisabled(false).setStyle("PRIMARY")
              ),
            ],
          })
          .then(async (m) => {
            let collector = m.createMessageComponentCollector({
              filter: (i) => i.user.id === s4dmessage.author.id,
              time: Number(60000) * 1000,
            });
            collector.on("collect", async (i) => {
              if (i.customId == "teacher_maths") {
                firedProbs = mathRandomInt(1, 5);
                if (firedProbs == 5) {
                  s4d.database.set(
                    String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-jobteacher"].join("")),
                    "false"
                  );
                  s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-hasjob"].join("")), "false");
                  await i
                    .update({
                      embeds: [
                        {
                          color: String("#ff0000"),
                          title: String("Oh no!"),
                          description: String("You got fired and you lost your job :("),
                        },
                      ],
                      components: [
                        new MessageActionRow().addComponents(
                          new MessageButton()
                            .setCustomId("teacher_maths")
                            .setLabel("Maths")
                            .setDisabled(true)
                            .setStyle("SUCCESS"),
                          new MessageButton()
                            .setCustomId("teacher_history")
                            .setLabel("History")
                            .setDisabled(true)
                            .setStyle("SECONDARY"),
                          new MessageButton()
                            .setCustomId("teacher_science")
                            .setLabel("Science")
                            .setDisabled(true)
                            .setStyle("SECONDARY")
                        ),
                      ],
                    })
                    .then(async (m) => {
                      return;
                    });
                } else if (firedProbs < 5) {
                  workMoney = mathRandomInt(100, 300);
                  s4d.database.add(
                    String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-money"].join("")),
                    parseInt(workMoney)
                  );
                  await i
                    .update({
                      embeds: [
                        {
                          color: String("#33cc00"),
                          title: String("Interesting lesson"),
                          description: String(["Maths is important, and you got **", workMoney, "$**!"].join("")),
                        },
                      ],
                      components: [
                        new MessageActionRow().addComponents(
                          new MessageButton()
                            .setCustomId("teacher_maths")
                            .setLabel("Maths")
                            .setDisabled(true)
                            .setStyle("SUCCESS"),
                          new MessageButton()
                            .setCustomId("teacher_history")
                            .setLabel("History")
                            .setDisabled(true)
                            .setStyle("SECONDARY"),
                          new MessageButton()
                            .setCustomId("teacher_science")
                            .setLabel("Science")
                            .setDisabled(true)
                            .setStyle("SECONDARY")
                        ),
                      ],
                    })
                    .then(async (m) => {
                      return;
                    });
                }
              } else if (i.customId == "teacher_history") {
                firedProbs = mathRandomInt(1, 5);
                if (firedProbs == 5) {
                  s4d.database.set(
                    String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-jobteacher"].join("")),
                    "false"
                  );
                  s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-hasjob"].join("")), "false");
                  await i
                    .update({
                      embeds: [
                        {
                          color: String("#ff0000"),
                          title: String("Oh no!"),
                          description: String("You got fired and you lost your job :("),
                        },
                      ],
                      components: [
                        new MessageActionRow().addComponents(
                          new MessageButton()
                            .setCustomId("teacher_maths")
                            .setLabel("Maths")
                            .setDisabled(true)
                            .setStyle("SECONDARY"),
                          new MessageButton()
                            .setCustomId("teacher_history")
                            .setLabel("History")
                            .setDisabled(true)
                            .setStyle("SUCCESS"),
                          new MessageButton()
                            .setCustomId("teacher_science")
                            .setLabel("Science")
                            .setDisabled(true)
                            .setStyle("SECONDARY")
                        ),
                      ],
                    })
                    .then(async (m) => {
                      return;
                    });
                } else if (firedProbs < 5) {
                  workMoney = mathRandomInt(150, 400);
                  s4d.database.add(
                    String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-money"].join("")),
                    parseInt(workMoney)
                  );
                  await i
                    .update({
                      embeds: [
                        {
                          color: String("#33cc00"),
                          title: String("Interesting lesson"),
                          description: String(["History is always amazing, you got **", workMoney, "$**!"].join("")),
                        },
                      ],
                      components: [
                        new MessageActionRow().addComponents(
                          new MessageButton()
                            .setCustomId("teacher_maths")
                            .setLabel("Maths")
                            .setDisabled(true)
                            .setStyle("SECONDARY"),
                          new MessageButton()
                            .setCustomId("teacher_history")
                            .setLabel("History")
                            .setDisabled(true)
                            .setStyle("SUCCESS"),
                          new MessageButton()
                            .setCustomId("teacher_science")
                            .setLabel("Science")
                            .setDisabled(true)
                            .setStyle("SECONDARY")
                        ),
                      ],
                    })
                    .then(async (m) => {
                      return;
                    });
                }
              } else if (i.customId == "teacher_science") {
                firedProbs = mathRandomInt(1, 5);
                if (firedProbs == 5) {
                  s4d.database.set(
                    String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-jobteacher"].join("")),
                    "false"
                  );
                  s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-hasjob"].join("")), "false");
                  await i
                    .update({
                      embeds: [
                        {
                          color: String("#ff0000"),
                          title: String("Oh no!"),
                          description: String("You got fired and you lost your job :("),
                        },
                      ],
                      components: [
                        new MessageActionRow().addComponents(
                          new MessageButton()
                            .setCustomId("teacher_maths")
                            .setLabel("Maths")
                            .setDisabled(true)
                            .setStyle("SECONDARY"),
                          new MessageButton()
                            .setCustomId("teacher_history")
                            .setLabel("History")
                            .setDisabled(true)
                            .setStyle("SECONDARY"),
                          new MessageButton()
                            .setCustomId("teacher_science")
                            .setLabel("Science")
                            .setDisabled(true)
                            .setStyle("SUCCESS")
                        ),
                      ],
                    })
                    .then(async (m) => {
                      return;
                    });
                } else if (firedProbs < 5) {
                  workMoney = mathRandomInt(150, 300);
                  s4d.database.add(
                    String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-money"].join("")),
                    parseInt(workMoney)
                  );
                  await i
                    .update({
                      embeds: [
                        {
                          color: String("#33cc00"),
                          title: String("Interesting lesson"),
                          description: String(
                            ["Science is a great subject with funny experiments, you got **", workMoney, "$**!"].join("")
                          ),
                        },
                      ],
                      components: [
                        new MessageActionRow().addComponents(
                          new MessageButton()
                            .setCustomId("teacher_maths")
                            .setLabel("Maths")
                            .setDisabled(true)
                            .setStyle("SECONDARY"),
                          new MessageButton()
                            .setCustomId("teacher_history")
                            .setLabel("History")
                            .setDisabled(true)
                            .setStyle("SECONDARY"),
                          new MessageButton()
                            .setCustomId("teacher_science")
                            .setLabel("Science")
                            .setDisabled(true)
                            .setStyle("SUCCESS")
                        ),
                      ],
                    })
                    .then(async (m) => {
                      return;
                    });
                }
              }
            });
          });
        return;
      } else if (
        s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-jobdiscordmod"].join(""))) == "true"
      ) {
        s4dmessage
          .reply({
            embeds: [
              {
                color: String("#999999"),
                title: String("Time to moderate"),
                description: String("Well, you are a Discord mod now"),
              },
            ],
            components: [
              new MessageActionRow().addComponents(
                new MessageButton()
                  .setCustomId("discordmod_ban")
                  .setLabel("Ban someone")
                  .setDisabled(false)
                  .setStyle("PRIMARY"),
                new MessageButton()
                  .setCustomId("discordmod_mute")
                  .setLabel("Mute someone")
                  .setDisabled(false)
                  .setStyle("PRIMARY"),
                new MessageButton()
                  .setCustomId("discordmod_remove")
                  .setLabel("Remove a message")
                  .setDisabled(false)
                  .setStyle("PRIMARY")
              ),
            ],
          })
          .then(async (m) => {
            let collector = m.createMessageComponentCollector({
              filter: (i) => i.user.id === s4dmessage.author.id,
              time: Number(60000) * 1000,
            });
            collector.on("collect", async (i) => {
              if (i.customId == "discordmod_ban") {
                firedProbs = mathRandomInt(1, 5);
                if (firedProbs == 5) {
                  s4d.database.set(
                    String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-jobdiscordmod"].join("")),
                    "false"
                  );
                  s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-hasjob"].join("")), "false");
                  await i
                    .update({
                      embeds: [
                        {
                          color: String("#ff0000"),
                          title: String("Oh no!"),
                          description: String("You got fired and you lost your job :("),
                        },
                      ],
                      components: [
                        new MessageActionRow().addComponents(
                          new MessageButton()
                            .setCustomId("discordmod_ban")
                            .setLabel("Ban someone")
                            .setDisabled(true)
                            .setStyle("SUCCESS"),
                          new MessageButton()
                            .setCustomId("discordmod_mute")
                            .setLabel("Mute someone")
                            .setDisabled(true)
                            .setStyle("SECONDARY"),
                          new MessageButton()
                            .setCustomId("discordmod_remove")
                            .setLabel("Remove a message")
                            .setDisabled(true)
                            .setStyle("SECONDARY")
                        ),
                      ],
                    })
                    .then(async (m) => {
                      return;
                    });
                } else if (firedProbs < 5) {
                  workMoney = mathRandomInt(100, 300);
                  s4d.database.add(
                    String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-money"].join("")),
                    parseInt(workMoney)
                  );
                  await i
                    .update({
                      embeds: [
                        {
                          color: String("#33cc00"),
                          title: String("Nice ban!"),
                          description: String(["You banned a free Nitro Scammer, you got **", workMoney, "$**!"].join("")),
                        },
                      ],
                      components: [
                        new MessageActionRow().addComponents(
                          new MessageButton()
                            .setCustomId("discordmod_ban")
                            .setLabel("Ban someone")
                            .setDisabled(true)
                            .setStyle("SUCCESS"),
                          new MessageButton()
                            .setCustomId("discordmod_mute")
                            .setLabel("Mute someone")
                            .setDisabled(true)
                            .setStyle("SECONDARY"),
                          new MessageButton()
                            .setCustomId("discordmod_remove")
                            .setLabel("Remove a message")
                            .setDisabled(true)
                            .setStyle("SECONDARY")
                        ),
                      ],
                    })
                    .then(async (m) => {
                      return;
                    });
                }
              } else if (i.customId == "discordmod_mute") {
                firedProbs = mathRandomInt(1, 5);
                if (firedProbs == 5) {
                  s4d.database.set(
                    String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-jobdiscordmod"].join("")),
                    "false"
                  );
                  s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-hasjob"].join("")), "false");
                  await i
                    .update({
                      embeds: [
                        {
                          color: String("#ff0000"),
                          title: String("Oh no!"),
                          description: String("You got fired and you lost your job :("),
                        },
                      ],
                      components: [
                        new MessageActionRow().addComponents(
                          new MessageButton()
                            .setCustomId("discordmod_ban")
                            .setLabel("Ban someone")
                            .setDisabled(true)
                            .setStyle("SECONDARY"),
                          new MessageButton()
                            .setCustomId("discordmod_mute")
                            .setLabel("Mute someone")
                            .setDisabled(true)
                            .setStyle("SUCCESS"),
                          new MessageButton()
                            .setCustomId("discordmod_remove")
                            .setLabel("Remove a message")
                            .setDisabled(true)
                            .setStyle("SECONDARY")
                        ),
                      ],
                    })
                    .then(async (m) => {
                      return;
                    });
                } else if (firedProbs < 5) {
                  workMoney = mathRandomInt(150, 300);
                  s4d.database.add(
                    String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-money"].join("")),
                    parseInt(workMoney)
                  );
                  await i
                    .update({
                      embeds: [
                        {
                          color: String("#33cc00"),
                          title: String("/mute"),
                          description: String(["He posted a meme in #general, and you got **", workMoney, "$**!"].join("")),
                        },
                      ],
                      components: [
                        new MessageActionRow().addComponents(
                          new MessageButton()
                            .setCustomId("discordmod_ban")
                            .setLabel("Ban someone")
                            .setDisabled(true)
                            .setStyle("SECONDARY"),
                          new MessageButton()
                            .setCustomId("discordmod_mute")
                            .setLabel("Mute someone")
                            .setDisabled(true)
                            .setStyle("SUCCESS"),
                          new MessageButton()
                            .setCustomId("discordmod_remove")
                            .setLabel("Remove a message")
                            .setDisabled(true)
                            .setStyle("SECONDARY")
                        ),
                      ],
                    })
                    .then(async (m) => {
                      return;
                    });
                }
              } else if (i.customId == "discordmod_remove") {
                firedProbs = mathRandomInt(1, 5);
                if (firedProbs == 5) {
                  s4d.database.set(
                    String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-jobdiscordmod"].join("")),
                    "false"
                  );
                  s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-hasjob"].join("")), "false");
                  await i
                    .update({
                      embeds: [
                        {
                          color: String("#ff0000"),
                          title: String("Oh no!"),
                          description: String("You got fired and you lost your job :("),
                        },
                      ],
                      components: [
                        new MessageActionRow().addComponents(
                          new MessageButton()
                            .setCustomId("discordmod_ban")
                            .setLabel("Ban someone")
                            .setDisabled(true)
                            .setStyle("SECONDARY"),
                          new MessageButton()
                            .setCustomId("discordmod_mute")
                            .setLabel("Mute someone")
                            .setDisabled(true)
                            .setStyle("SECONDARY"),
                          new MessageButton()
                            .setCustomId("discordmod_remove")
                            .setLabel("Remove a message")
                            .setDisabled(true)
                            .setStyle("SUCCESS")
                        ),
                      ],
                    })
                    .then(async (m) => {
                      return;
                    });
                } else if (firedProbs < 5) {
                  workMoney = mathRandomInt(150, 300);
                  s4d.database.add(
                    String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-money"].join("")),
                    parseInt(workMoney)
                  );
                  await i
                    .update({
                      embeds: [
                        {
                          color: String("#33cc00"),
                          title: String("Fast as fuck"),
                          description: String(["Nice job moderating the chat, you got **", workMoney, "$**!"].join("")),
                        },
                      ],
                      components: [
                        new MessageActionRow().addComponents(
                          new MessageButton()
                            .setCustomId("discordmod_ban")
                            .setLabel("Ban someone")
                            .setDisabled(true)
                            .setStyle("SECONDARY"),
                          new MessageButton()
                            .setCustomId("discordmod_mute")
                            .setLabel("Mute someone")
                            .setDisabled(true)
                            .setStyle("SECONDARY"),
                          new MessageButton()
                            .setCustomId("discordmod_remove")
                            .setLabel("Remove a message")
                            .setDisabled(true)
                            .setStyle("SUCCESS")
                        ),
                      ],
                    })
                    .then(async (m) => {
                      return;
                    });
                }
              }
            });
          });
        return;
      } else if (
        s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-jobmechanic"].join(""))) == "true"
      ) {
        s4dmessage
          .reply({
            embeds: [
              {
                color: String("#999999"),
                title: String("Time to work"),
                description: String("Choose what to do today in your garage"),
              },
            ],
            components: [
              new MessageActionRow().addComponents(
                new MessageButton()
                  .setCustomId("mechanic_repair_car")
                  .setLabel("Repair a vehicle")
                  .setDisabled(false)
                  .setStyle("PRIMARY"),
                new MessageButton()
                  .setCustomId("mechanic_fix_truck")
                  .setLabel("Do a control")
                  .setDisabled(false)
                  .setStyle("PRIMARY"),
                new MessageButton()
                  .setCustomId("mechanic_rescue_car")
                  .setLabel("Rescue a vehicle")
                  .setDisabled(false)
                  .setStyle("PRIMARY")
              ),
            ],
          })
          .then(async (m) => {
            let collector = m.createMessageComponentCollector({
              filter: (i) => i.user.id === s4dmessage.author.id,
              time: Number(60000) * 1000,
            });
            collector.on("collect", async (i) => {
              if (i.customId == "mechanic_repair_car") {
                firedProbs = mathRandomInt(1, 5);
                if (firedProbs == 5) {
                  s4d.database.set(
                    String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-jobmechanic"].join("")),
                    "false"
                  );
                  s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-hasjob"].join("")), "false");
                  await i
                    .update({
                      embeds: [
                        {
                          color: String("#ff0000"),
                          title: String("Oh no!"),
                          description: String("You got fired and you lost your job :("),
                        },
                      ],
                      components: [
                        new MessageActionRow().addComponents(
                          new MessageButton()
                            .setCustomId("mechanic_repair_car")
                            .setLabel("Repair a vehicle")
                            .setDisabled(true)
                            .setStyle("SUCCESS"),
                          new MessageButton()
                            .setCustomId("mechanic_fix_truck")
                            .setLabel("Do a control")
                            .setDisabled(true)
                            .setStyle("SECONDARY"),
                          new MessageButton()
                            .setCustomId("mechanic_rescue_car")
                            .setLabel("Rescue a vehicle")
                            .setDisabled(true)
                            .setStyle("SECONDARY")
                        ),
                      ],
                    })
                    .then(async (m) => {
                      return;
                    });
                } else if (firedProbs < 5) {
                  workMoney = mathRandomInt(100, 300);
                  s4d.database.add(
                    String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-money"].join("")),
                    parseInt(workMoney)
                  );
                  await i
                    .update({
                      embeds: [
                        {
                          color: String("#33cc00"),
                          title: String("You repaired a vehicle!"),
                          description: String(
                            ["The client was really happy about that, you got **", workMoney, "$**!"].join("")
                          ),
                        },
                      ],
                      components: [
                        new MessageActionRow().addComponents(
                          new MessageButton()
                            .setCustomId("mechanic_repair_car")
                            .setLabel("Repair a vehicle")
                            .setDisabled(true)
                            .setStyle("SUCCESS"),
                          new MessageButton()
                            .setCustomId("mechanic_fix_truck")
                            .setLabel("Do a control")
                            .setDisabled(true)
                            .setStyle("SECONDARY"),
                          new MessageButton()
                            .setCustomId("mechanic_rescue_car")
                            .setLabel("Rescue a vehicle")
                            .setDisabled(true)
                            .setStyle("SECONDARY")
                        ),
                      ],
                    })
                    .then(async (m) => {
                      return;
                    });
                }
              } else if (i.customId == "mechanic_fix_truck") {
                firedProbs = mathRandomInt(1, 5);
                if (firedProbs == 5) {
                  s4d.database.set(
                    String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-jobmechanic"].join("")),
                    "false"
                  );
                  s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-hasjob"].join("")), "false");
                  await i
                    .update({
                      embeds: [
                        {
                          color: String("#ff0000"),
                          title: String("Oh no!"),
                          description: String("You got fired and you lost your job :("),
                        },
                      ],
                      components: [
                        new MessageActionRow().addComponents(
                          new MessageButton()
                            .setCustomId("mechanic_repair_car")
                            .setLabel("Repair a vehicle")
                            .setDisabled(true)
                            .setStyle("SECONDARY"),
                          new MessageButton()
                            .setCustomId("mechanic_fix_truck")
                            .setLabel("Do a control")
                            .setDisabled(true)
                            .setStyle("SUCCESS"),
                          new MessageButton()
                            .setCustomId("mechanic_rescue_car")
                            .setLabel("Rescue a vehicle")
                            .setDisabled(true)
                            .setStyle("SECONDARY")
                        ),
                      ],
                    })
                    .then(async (m) => {
                      return;
                    });
                } else if (firedProbs < 5) {
                  workMoney = mathRandomInt(50, 150);
                  s4d.database.add(
                    String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-money"].join("")),
                    parseInt(workMoney)
                  );
                  await i
                    .update({
                      embeds: [
                        {
                          color: String("#33cc00"),
                          title: String("You controlled a vehicle"),
                          description: String(["You checked a your client's vehicle, you got **", workMoney, "$**!"].join("")),
                        },
                      ],
                      components: [
                        new MessageActionRow().addComponents(
                          new MessageButton()
                            .setCustomId("mechanic_repair_car")
                            .setLabel("Repair a vehicle")
                            .setDisabled(true)
                            .setStyle("SECONDARY"),
                          new MessageButton()
                            .setCustomId("mechanic_fix_truck")
                            .setLabel("Do a control")
                            .setDisabled(true)
                            .setStyle("SUCCESS"),
                          new MessageButton()
                            .setCustomId("mechanic_rescue_car")
                            .setLabel("Rescue a vehicle")
                            .setDisabled(true)
                            .setStyle("SECONDARY")
                        ),
                      ],
                    })
                    .then(async (m) => {
                      return;
                    });
                }
              } else if (i.customId == "mechanic_rescue_car") {
                firedProbs = mathRandomInt(1, 5);
                if (firedProbs == 5) {
                  s4d.database.set(
                    String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-jobmechanic"].join("")),
                    "false"
                  );
                  s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-hasjob"].join("")), "false");
                  await i
                    .update({
                      embeds: [
                        {
                          color: String("#ff0000"),
                          title: String("Oh no!"),
                          description: String("You got fired and you lost your job :("),
                        },
                      ],
                      components: [
                        new MessageActionRow().addComponents(
                          new MessageButton()
                            .setCustomId("mechanic_repair_car")
                            .setLabel("Repair a vehicle")
                            .setDisabled(true)
                            .setStyle("SECONDARY"),
                          new MessageButton()
                            .setCustomId("mechanic_fix_truck")
                            .setLabel("Do a control")
                            .setDisabled(true)
                            .setStyle("SECONDARY"),
                          new MessageButton()
                            .setCustomId("mechanic_rescue_car")
                            .setLabel("Rescue a vehicle")
                            .setDisabled(true)
                            .setStyle("SUCCESS")
                        ),
                      ],
                    })
                    .then(async (m) => {
                      return;
                    });
                } else if (firedProbs < 5) {
                  workMoney = mathRandomInt(150, 300);
                  s4d.database.add(
                    String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-money"].join("")),
                    parseInt(workMoney)
                  );
                  await i
                    .update({
                      embeds: [
                        {
                          color: String("#33cc00"),
                          title: String("You took your truck"),
                          description: String(
                            ["You brought a broken vehicle into your garage, you got **", workMoney, "$**!"].join("")
                          ),
                        },
                      ],
                      components: [
                        new MessageActionRow().addComponents(
                          new MessageButton()
                            .setCustomId("mechanic_repair_car")
                            .setLabel("Repair a vehicle")
                            .setDisabled(true)
                            .setStyle("SECONDARY"),
                          new MessageButton()
                            .setCustomId("mechanic_fix_truck")
                            .setLabel("Do a control")
                            .setDisabled(true)
                            .setStyle("SECONDARY"),
                          new MessageButton()
                            .setCustomId("mechanic_rescue_car")
                            .setLabel("Rescue a vehicle")
                            .setDisabled(true)
                            .setStyle("SUCCESS")
                        ),
                      ],
                    })
                    .then(async (m) => {
                      return;
                    });
                }
              }
            });
          });
        return;
      } else if (
        s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-jobchef"].join(""))) == "true"
      ) {
        s4dmessage
          .reply({
            embeds: [
              {
                color: String("#999999"),
                title: String("Cooking time"),
                description: String("There are 3 plates you can cook"),
              },
            ],
            components: [
              new MessageActionRow().addComponents(
                new MessageButton()
                  .setCustomId("chef_first_dish")
                  .setLabel("First dish")
                  .setDisabled(false)
                  .setStyle("PRIMARY"),
                new MessageButton()
                  .setCustomId("chef_second_dish")
                  .setLabel("Second dish")
                  .setDisabled(false)
                  .setStyle("PRIMARY"),
                new MessageButton().setCustomId("chef_dessert").setLabel("Dessert").setDisabled(false).setStyle("PRIMARY")
              ),
            ],
          })
          .then(async (m) => {
            let collector = m.createMessageComponentCollector({
              filter: (i) => i.user.id === s4dmessage.author.id,
              time: Number(60000) * 1000,
            });
            collector.on("collect", async (i) => {
              if (i.customId == "chef_first_dish") {
                firedProbs = mathRandomInt(1, 5);
                if (firedProbs == 5) {
                  s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-jobchef"].join("")), "false");
                  s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-hasjob"].join("")), "false");
                  await i
                    .update({
                      embeds: [
                        {
                          color: String("#ff0000"),
                          title: String("Oh no!"),
                          description: String("You got fired and you lost your job :("),
                        },
                      ],
                      components: [
                        new MessageActionRow().addComponents(
                          new MessageButton()
                            .setCustomId("chef_first_dish")
                            .setLabel("First dish")
                            .setDisabled(true)
                            .setStyle("SUCCESS"),
                          new MessageButton()
                            .setCustomId("chef_second_dish")
                            .setLabel("Second dish")
                            .setDisabled(true)
                            .setStyle("SECONDARY"),
                          new MessageButton()
                            .setCustomId("chef_dessert")
                            .setLabel("Dessert")
                            .setDisabled(true)
                            .setStyle("SECONDARY")
                        ),
                      ],
                    })
                    .then(async (m) => {
                      return;
                    });
                } else if (firedProbs < 5) {
                  workMoney = mathRandomInt(100, 300);
                  s4d.database.add(
                    String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-money"].join("")),
                    parseInt(workMoney)
                  );
                  await i
                    .update({
                      embeds: [
                        {
                          color: String("#33cc00"),
                          title: String("You cooked a nice first dish"),
                          description: String(["Delicious food, you got **", workMoney, "$**!"].join("")),
                        },
                      ],
                      components: [
                        new MessageActionRow().addComponents(
                          new MessageButton()
                            .setCustomId("chef_first_dish")
                            .setLabel("First dish")
                            .setDisabled(true)
                            .setStyle("SUCCESS"),
                          new MessageButton()
                            .setCustomId("chef_second_dish")
                            .setLabel("Second dish")
                            .setDisabled(true)
                            .setStyle("SECONDARY"),
                          new MessageButton()
                            .setCustomId("chef_dessert")
                            .setLabel("Dessert")
                            .setDisabled(true)
                            .setStyle("SECONDARY")
                        ),
                      ],
                    })
                    .then(async (m) => {
                      return;
                    });
                }
              } else if (i.customId == "chef_second_dish") {
                firedProbs = mathRandomInt(1, 5);
                if (firedProbs == 5) {
                  s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-jobchef"].join("")), "false");
                  s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-hasjob"].join("")), "false");
                  await i
                    .update({
                      embeds: [
                        {
                          color: String("#ff0000"),
                          title: String("Oh no!"),
                          description: String("You got fired and you lost your job :("),
                        },
                      ],
                      components: [
                        new MessageActionRow().addComponents(
                          new MessageButton()
                            .setCustomId("chef_first_dish")
                            .setLabel("First dish")
                            .setDisabled(true)
                            .setStyle("SECONDARY"),
                          new MessageButton()
                            .setCustomId("chef_second_dish")
                            .setLabel("Second dish")
                            .setDisabled(true)
                            .setStyle("SUCCESS"),
                          new MessageButton()
                            .setCustomId("chef_dessert")
                            .setLabel("Dessert")
                            .setDisabled(true)
                            .setStyle("SECONDARY")
                        ),
                      ],
                    })
                    .then(async (m) => {
                      return;
                    });
                } else if (firedProbs < 5) {
                  workMoney = mathRandomInt(150, 400);
                  s4d.database.add(
                    String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-money"].join("")),
                    parseInt(workMoney)
                  );
                  await i
                    .update({
                      embeds: [
                        {
                          color: String("#33cc00"),
                          title: String("You cooked a second dish"),
                          description: String(["Delicious food again, you got **", workMoney, "$**!"].join("")),
                        },
                      ],
                      components: [
                        new MessageActionRow().addComponents(
                          new MessageButton()
                            .setCustomId("chef_first_dish")
                            .setLabel("First dish")
                            .setDisabled(true)
                            .setStyle("SECONDARY"),
                          new MessageButton()
                            .setCustomId("chef_second_dish")
                            .setLabel("Second dish")
                            .setDisabled(true)
                            .setStyle("SUCCESS"),
                          new MessageButton()
                            .setCustomId("chef_dessert")
                            .setLabel("Dessert")
                            .setDisabled(true)
                            .setStyle("SECONDARY")
                        ),
                      ],
                    })
                    .then(async (m) => {
                      return;
                    });
                }
              } else if (i.customId == "chef_dessert") {
                firedProbs = mathRandomInt(1, 5);
                if (firedProbs == 5) {
                  s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-jobchef"].join("")), "false");
                  s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-hasjob"].join("")), "false");
                  await i
                    .update({
                      embeds: [
                        {
                          color: String("#ff0000"),
                          title: String("Oh no!"),
                          description: String("You got fired and you lost your job :("),
                        },
                      ],
                      components: [
                        new MessageActionRow().addComponents(
                          new MessageButton()
                            .setCustomId("chef_first_dish")
                            .setLabel("First dish")
                            .setDisabled(true)
                            .setStyle("SECONDARY"),
                          new MessageButton()
                            .setCustomId("chef_second_dish")
                            .setLabel("Second dish")
                            .setDisabled(true)
                            .setStyle("SECONDARY"),
                          new MessageButton()
                            .setCustomId("chef_dessert")
                            .setLabel("Dessert")
                            .setDisabled(true)
                            .setStyle("SUCCESS")
                        ),
                      ],
                    })
                    .then(async (m) => {
                      return;
                    });
                } else if (firedProbs < 5) {
                  workMoney = mathRandomInt(150, 300);
                  s4d.database.add(
                    String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-money"].join("")),
                    parseInt(workMoney)
                  );
                  await i
                    .update({
                      embeds: [
                        {
                          color: String("#33cc00"),
                          title: String("You cooked a delicious dessert"),
                          description: String(["Epic dessert, you got **", workMoney, "$**!"].join("")),
                        },
                      ],
                      components: [
                        new MessageActionRow().addComponents(
                          new MessageButton()
                            .setCustomId("chef_first_dish")
                            .setLabel("First dish")
                            .setDisabled(true)
                            .setStyle("SECONDARY"),
                          new MessageButton()
                            .setCustomId("chef_second_dish")
                            .setLabel("Second dish")
                            .setDisabled(true)
                            .setStyle("SECONDARY"),
                          new MessageButton()
                            .setCustomId("chef_dessert")
                            .setLabel("Dessert")
                            .setDisabled(true)
                            .setStyle("SUCCESS")
                        ),
                      ],
                    })
                    .then(async (m) => {
                      return;
                    });
                }
              }
            });
          });
        return;
      } else if (
        s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-jobscientist"].join(""))) == "true"
      ) {
        s4dmessage
          .reply({
            embeds: [
              {
                color: String("#999999"),
                title: String("Science time"),
                description: String("What kinda of experiments do you want to do?"),
              },
            ],
            components: [
              new MessageActionRow().addComponents(
                new MessageButton()
                  .setCustomId("scientist_study")
                  .setLabel("Keep studiyng")
                  .setDisabled(false)
                  .setStyle("PRIMARY"),
                new MessageButton()
                  .setCustomId("scientist_work_others")
                  .setLabel("Work with others")
                  .setDisabled(false)
                  .setStyle("PRIMARY"),
                new MessageButton()
                  .setCustomId("scientist_discovery")
                  .setLabel("Do new discovery")
                  .setDisabled(false)
                  .setStyle("PRIMARY")
              ),
            ],
          })
          .then(async (m) => {
            let collector = m.createMessageComponentCollector({
              filter: (i) => i.user.id === s4dmessage.author.id,
              time: Number(60000) * 1000,
            });
            collector.on("collect", async (i) => {
              if (i.customId == "scientist_study") {
                firedProbs = mathRandomInt(1, 5);
                if (firedProbs == 5) {
                  s4d.database.set(
                    String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-jobscientist"].join("")),
                    "false"
                  );
                  s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-hasjob"].join("")), "false");
                  await i
                    .update({
                      embeds: [
                        {
                          color: String("#ff0000"),
                          title: String("Oh no!"),
                          description: String("You got fired and you lost your job :("),
                        },
                      ],
                      components: [
                        new MessageActionRow().addComponents(
                          new MessageButton()
                            .setCustomId("scientist_study")
                            .setLabel("Keep studiyng")
                            .setDisabled(true)
                            .setStyle("SUCCESS"),
                          new MessageButton()
                            .setCustomId("scientist_work_others")
                            .setLabel("Work with others")
                            .setDisabled(true)
                            .setStyle("SECONDARY"),
                          new MessageButton()
                            .setCustomId("scientist_discovery")
                            .setLabel("Do new discovery")
                            .setDisabled(true)
                            .setStyle("SECONDARY")
                        ),
                      ],
                    })
                    .then(async (m) => {
                      return;
                    });
                } else if (firedProbs < 5) {
                  workMoney = mathRandomInt(100, 300);
                  s4d.database.add(
                    String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-money"].join("")),
                    parseInt(workMoney)
                  );
                  await i
                    .update({
                      embeds: [
                        {
                          color: String("#33cc00"),
                          title: String("You kept researching"),
                          description: String(
                            ["You kept researching in your experiments, you got **", workMoney, "$**!"].join("")
                          ),
                        },
                      ],
                      components: [
                        new MessageActionRow().addComponents(
                          new MessageButton()
                            .setCustomId("scientist_study")
                            .setLabel("Keep studiyng")
                            .setDisabled(true)
                            .setStyle("SUCCESS"),
                          new MessageButton()
                            .setCustomId("scientist_work_others")
                            .setLabel("Work with others")
                            .setDisabled(true)
                            .setStyle("SECONDARY"),
                          new MessageButton()
                            .setCustomId("scientist_discovery")
                            .setLabel("Do new discovery")
                            .setDisabled(true)
                            .setStyle("SECONDARY")
                        ),
                      ],
                    })
                    .then(async (m) => {
                      return;
                    });
                }
              } else if (i.customId == "scientist_work_others") {
                firedProbs = mathRandomInt(1, 5);
                if (firedProbs == 5) {
                  s4d.database.set(
                    String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-jobscientist"].join("")),
                    "false"
                  );
                  s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-hasjob"].join("")), "false");
                  await i
                    .update({
                      embeds: [
                        {
                          color: String("#ff0000"),
                          title: String("Oh no!"),
                          description: String("You got fired and you lost your job :("),
                        },
                      ],
                      components: [
                        new MessageActionRow().addComponents(
                          new MessageButton()
                            .setCustomId("scientist_study")
                            .setLabel("Keep studiyng")
                            .setDisabled(true)
                            .setStyle("SECONDARY"),
                          new MessageButton()
                            .setCustomId("scientist_work_others")
                            .setLabel("Work with others")
                            .setDisabled(true)
                            .setStyle("SUCCESS"),
                          new MessageButton()
                            .setCustomId("scientist_discovery")
                            .setLabel("Do new discovery")
                            .setDisabled(true)
                            .setStyle("SECONDARY")
                        ),
                      ],
                    })
                    .then(async (m) => {
                      return;
                    });
                } else if (firedProbs < 5) {
                  workMoney = mathRandomInt(150, 400);
                  s4d.database.add(
                    String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-money"].join("")),
                    parseInt(workMoney)
                  );
                  await i
                    .update({
                      embeds: [
                        {
                          color: String("#33cc00"),
                          title: String("You worked with other scientists"),
                          description: String(["For being really good, you got **", workMoney, "$**!"].join("")),
                        },
                      ],
                      components: [
                        new MessageActionRow().addComponents(
                          new MessageButton()
                            .setCustomId("scientist_study")
                            .setLabel("Keep studiyng")
                            .setDisabled(true)
                            .setStyle("SECONDARY"),
                          new MessageButton()
                            .setCustomId("scientist_work_others")
                            .setLabel("Work with others")
                            .setDisabled(true)
                            .setStyle("SUCCESS"),
                          new MessageButton()
                            .setCustomId("scientist_discovery")
                            .setLabel("Do new discovery")
                            .setDisabled(true)
                            .setStyle("SECONDARY")
                        ),
                      ],
                    })
                    .then(async (m) => {
                      return;
                    });
                }
              } else if (i.customId == "scientist_discovery") {
                firedProbs = mathRandomInt(1, 5);
                if (firedProbs == 5) {
                  s4d.database.set(
                    String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-jobscientist"].join("")),
                    "false"
                  );
                  s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-hasjob"].join("")), "false");
                  await i
                    .update({
                      embeds: [
                        {
                          color: String("#ff0000"),
                          title: String("Oh no!"),
                          description: String("You got fired and you lost your job :("),
                        },
                      ],
                      components: [
                        new MessageActionRow().addComponents(
                          new MessageButton()
                            .setCustomId("scientist_study")
                            .setLabel("Keep studiyng")
                            .setDisabled(true)
                            .setStyle("SECONDARY"),
                          new MessageButton()
                            .setCustomId("scientist_work_others")
                            .setLabel("Work with others")
                            .setDisabled(true)
                            .setStyle("SECONDARY"),
                          new MessageButton()
                            .setCustomId("scientist_discovery")
                            .setLabel("Do new discovery")
                            .setDisabled(true)
                            .setStyle("SUCCESS")
                        ),
                      ],
                    })
                    .then(async (m) => {
                      return;
                    });
                } else if (firedProbs < 5) {
                  workMoney = mathRandomInt(150, 300);
                  s4d.database.add(
                    String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-money"].join("")),
                    parseInt(workMoney)
                  );
                  await i
                    .update({
                      embeds: [
                        {
                          color: String("#33cc00"),
                          title: String("You made a new discovery"),
                          description: String(["For that, you got **", workMoney, "$**!"].join("")),
                        },
                      ],
                      components: [
                        new MessageActionRow().addComponents(
                          new MessageButton()
                            .setCustomId("scientist_study")
                            .setLabel("Keep studiyng")
                            .setDisabled(true)
                            .setStyle("SECONDARY"),
                          new MessageButton()
                            .setCustomId("scientist_work_others")
                            .setLabel("Work with others")
                            .setDisabled(true)
                            .setStyle("SECONDARY"),
                          new MessageButton()
                            .setCustomId("scientist_discovery")
                            .setLabel("Do new discovery")
                            .setDisabled(true)
                            .setStyle("SUCCESS")
                        ),
                      ],
                    })
                    .then(async (m) => {
                      return;
                    });
                }
              }
            });
          });
        return;
      }
    }

    /*
    D!SHOP
    */
    if (
      (s4dmessage.content.toUpperCase() || "").startsWith("D!SHOP" || "") ||
      (s4dmessage.content.toUpperCase() || "").startsWith("D!STORE" || "")
    ) {
      s4dmessage.reply({
        embeds: [
          {
            color: String("#33ffff"),
            title: String("🏪 Welcome to the DiversityShop!"),
            description: String("You can buy Crypto, perks, and other things!"),
            fields: [
              {
                name: "👴 Hitler's Moustache: 999 000$",
                value: ["Very useful and overpower", "\n", "Item ID: **1**"].join(""),
                inline: false,
              },
              {
                name: ["🪙 Bitcoin: ", s4d.database.get(String("Bitcoins-price")), "$"].join(""),
                value: ["Best Crypto currency", "\n", "Item ID: **2**"].join(""),
                inline: false,
              },
              {
                name: ["🪙 Dogecoin: ", s4d.database.get(String("Dogecoins-price")), "$"].join(""),
                value: ["Elon Musk's crypto currency", "\n", "Item ID: **3**"].join(""),
                inline: false,
              },
              {
                name: "🔫 Gun: 2000$",
                value: ["Get 100% probs when rob someone", "\n", "Item ID: **4**"].join(""),
                inline: false,
              },
              {
                name: "🔫 AK-47: 5000$",
                value: ["Commit a crime with this", "\n", "Item ID: **5**"].join(""),
                inline: false,
              },
              {
                name: "🎣 Fishing rod: 400$",
                value: ["Use this to catch some fish", "\n", "Item ID: **6**"].join(""),
                inline: false,
              },
              {
                name: "🍌 Banana: 180$",
                value: ["Delicious food for Monkes", "\n", "Item ID: **7**"].join(""),
                inline: false,
              },
              {
                name: "🥫 Beans: 300$",
                value: ["This food is a weapon", "\n", "Item ID: **8**"].join(""),
                inline: false,
              },
              {
                name: "💩 Holy poo: 800$",
                value: ["Trow the poo to people!", "\n", "Item ID: **9**"].join(""),
                inline: false,
              },
              {
                name: ["🗿 Moacoin: ", s4d.database.get(String("Moacoins-price")), "$"].join(""),
                value: ["Better than Bitcoin", "\n", "Item ID: **10**"].join(""),
                inline: false,
              },
              {
                name: ["🪙 Divcoin: ", s4d.database.get(String("Divcoins-price")), "$"].join(""),
                value: ["Not a normal crypto", "\n", "Item ID: **11**"].join(""),
                inline: false,
              },
              {
                name: "🔫 Kar98k scoped: 1000$",
                value: ["Use this to hunt in the wild", "\n", "Item ID: **12**"].join(""),
                inline: false,
              },
              {
                name: "⛏️ Pickaxe: 500$",
                value: ["Use this to mine", "\n", "Item ID: **13**"].join(""),
                inline: false,
              },
            ],
          },
        ],
        allowedMentions: {
          repliedUser: true,
        },
      });
      return;
    }

    /*
    D!INV
    */
    if (s4dmessage.content.toUpperCase() == "D!INV" || s4dmessage.content.toUpperCase() == "D!INVENTORY") {
      var embedMessageForInventory = new Discord.MessageEmbed();
      embedMessageForInventory.setColor("#33ccff");
      embedMessageForInventory.setTitle(String(["💼 ", s4dmessage.author.username, "'s inventory:"].join("")));
      embedMessageForInventory.setURL(String());
      if (
        s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-item_id1"].join(""))) == "false" &&
        s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-item_id2"].join(""))) == "false" &&
        s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-item_id3"].join(""))) == "false" &&
        s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-item_id4"].join(""))) == "false" &&
        s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-item_id5"].join(""))) == "false" &&
        s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-item_id6"].join(""))) == "false" &&
        s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-item_id7"].join(""))) == "false" &&
        s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-item_id8"].join(""))) == "false" &&
        s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-item_id9"].join(""))) == "false" &&
        s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-item_id10"].join(""))) == "false" &&
        s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-item_id11"].join(""))) == "false" &&
        s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-item_id12"].join(""))) == "false" &&
        s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-item_id13"].join(""))) == "false"
      ) {
        embedMessageForInventory.addField(String("You have nothing!"), String("Poor old man! ;)"), false);
      }
      if (s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-item_id1"].join(""))) == "true") {
        embedMessageForInventory.addField(String("👴 Hitler's Moustache"), String("Item ID: **1**"), false);
      }
      if (s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-item_id2_count"].join(""))) > 0) {
        embedMessageForInventory.addField(
          String(
            [
              "🪙 ",
              s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-item_id2_count"].join(""))),
              " Bitcoin",
            ].join("")
          ),
          String("Item ID: **2**"),
          false
        );
      }
      if (s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-item_id3_count"].join(""))) > 0) {
        embedMessageForInventory.addField(
          String(
            [
              "🪙 ",
              s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-item_id3_count"].join(""))),
              " Dogecoin",
            ].join("")
          ),
          String("Item ID: **3**"),
          false
        );
      }
      if (s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-item_id4"].join(""))) == "true") {
        embedMessageForInventory.addField(String("🔫 Gun"), String("Item ID: **4**"), false);
      }
      if (s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-item_id5"].join(""))) == "true") {
        embedMessageForInventory.addField(String("🔫 AK-47"), String("Item ID: **5**"), false);
      }
      if (s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-item_id6"].join(""))) == "true") {
        embedMessageForInventory.addField(String("🎣 Fishing rod"), String("Item ID: **6**"), false);
      }
      if (s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-item_id7"].join(""))) == "true") {
        embedMessageForInventory.addField(String("🍌 Banana"), String("Item ID: **7**"), false);
      }
      if (s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-item_id8"].join(""))) == "true") {
        embedMessageForInventory.addField(String("🥫 Beans"), String("Item ID: **8**"), false);
      }
      if (s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-item_id9"].join(""))) == "true") {
        embedMessageForInventory.addField(String("💩 Holy poo"), String("Item ID: **9**"), false);
      }
      if (s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-item_id10_count"].join(""))) > 0) {
        embedMessageForInventory.addField(
          String(
            [
              "🗿 ",
              s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-item_id10_count"].join(""))),
              " Moacoin",
            ].join("")
          ),
          String("Item ID: **10**"),
          false
        );
      }
      if (s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-item_id11_count"].join(""))) > 0) {
        embedMessageForInventory.addField(
          String(
            [
              "🪙 ",
              s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-item_id11_count"].join(""))),
              " Divcoin",
            ].join("")
          ),
          String("Item ID: **11**"),
          false
        );
      }
      if (s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-item_id12"].join(""))) == "true") {
        embedMessageForInventory.addField(String("🔫 Kar98k scoped"), String("Item ID: **12**"), false);
      }
      if (s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-item_id13"].join(""))) == "true") {
        embedMessageForInventory.addField(String("⛏️ Pickaxe"), String("Item ID: **13**"), false);
      }

      s4dmessage.reply({
        embeds: [embedMessageForInventory],
        allowedMentions: {
          repliedUser: true,
        },
      });
      return;
    } else if (
      (s4dmessage.content.toUpperCase() || "").startsWith("D!INV" || "") ||
      (s4dmessage.content.toUpperCase() || "").startsWith("D!INVENTORY" || "")
    ) {
      try {
        var embedMessageForInventory = new Discord.MessageEmbed();
        embedMessageForInventory.setColor("#33ccff");
        embedMessageForInventory.setTitle(
          String(
            ["💼 ", s4d.client.users.cache.get(String(s4dmessage.mentions.members.first().id)).username, "'s inventory:"].join(
              ""
            )
          )
        );
        embedMessageForInventory.setURL(String());
        if (
          s4d.database.get(
            String([(s4dmessage.guild || {}).id, "-<@", s4dmessage.mentions.members.first().id, ">-item_id1"].join(""))
          ) == "false" &&
          s4d.database.get(
            String([(s4dmessage.guild || {}).id, "-<@", s4dmessage.mentions.members.first().id, ">-item_id2"].join(""))
          ) == "false" &&
          s4d.database.get(
            String([(s4dmessage.guild || {}).id, "-<@", s4dmessage.mentions.members.first().id, ">-item_id3"].join(""))
          ) == "false" &&
          s4d.database.get(
            String([(s4dmessage.guild || {}).id, "-<@", s4dmessage.mentions.members.first().id, ">-item_id4"].join(""))
          ) == "false" &&
          s4d.database.get(
            String([(s4dmessage.guild || {}).id, "-<@", s4dmessage.mentions.members.first().id, ">-item_id5"].join(""))
          ) == "false" &&
          s4d.database.get(
            String([(s4dmessage.guild || {}).id, "-<@", s4dmessage.mentions.members.first().id, ">-item_id6"].join(""))
          ) == "false" &&
          s4d.database.get(
            String([(s4dmessage.guild || {}).id, "-<@", s4dmessage.mentions.members.first().id, ">-item_id7"].join(""))
          ) == "false" &&
          s4d.database.get(
            String([(s4dmessage.guild || {}).id, "-<@", s4dmessage.mentions.members.first().id, ">-item_id8"].join(""))
          ) == "false" &&
          s4d.database.get(
            String([(s4dmessage.guild || {}).id, "-<@", s4dmessage.mentions.members.first().id, ">-item_id9"].join(""))
          ) == "false" &&
          s4d.database.get(
            String([(s4dmessage.guild || {}).id, "-<@", s4dmessage.mentions.members.first().id, ">-item_id10"].join(""))
          ) == "false" &&
          s4d.database.get(
            String([(s4dmessage.guild || {}).id, "-<@", s4dmessage.mentions.members.first().id, ">-item_id11"].join(""))
          ) == "false" &&
          s4d.database.get(
            String([(s4dmessage.guild || {}).id, "-<@", s4dmessage.mentions.members.first().id, ">-item_id12"].join(""))
          ) == "false" &&
          s4d.database.get(
            String([(s4dmessage.guild || {}).id, "-<@", s4dmessage.mentions.members.first().id, ">-item_id13"].join(""))
          ) == "false"
        ) {
          embedMessageForInventory.addField(String("You have nothing!"), String("Poor old man! ;)"), false);
        }
        if (
          s4d.database.get(
            String([(s4dmessage.guild || {}).id, "-<@", s4dmessage.mentions.members.first().id, ">-item_id1"].join(""))
          ) == "true"
        ) {
          embedMessageForInventory.addField(String("👴 Hitler's Moustache"), String("Item ID: **1**"), false);
        }
        if (
          s4d.database.get(
            String([(s4dmessage.guild || {}).id, "-<@", s4dmessage.mentions.members.first(), ">-item_id2_count"].join(""))
          ) > 0
        ) {
          embedMessageForInventory.addField(
            String(
              [
                "🪙 ",
                s4d.database.get(
                  String([(s4dmessage.guild || {}).id, "-<@", s4dmessage.mentions.members.first(), ">-item_id2_count"].join(""))
                ),
                " Bitcoin",
              ].join("")
            ),
            String("Item ID: **2**"),
            false
          );
        }
        if (
          s4d.database.get(
            String([(s4dmessage.guild || {}).id, "-<@", s4dmessage.mentions.members.first(), ">-item_id3_count"].join(""))
          ) > 0
        ) {
          embedMessageForInventory.addField(
            String(
              [
                "🪙 ",
                s4d.database.get(
                  String([(s4dmessage.guild || {}).id, "-<@", s4dmessage.mentions.members.first(), ">-item_id3_count"].join(""))
                ),
                " Dogecoin",
              ].join("")
            ),
            String("Item ID: **3**"),
            false
          );
        }
        if (
          s4d.database.get(
            String([(s4dmessage.guild || {}).id, "-<@", s4dmessage.mentions.members.first().id, ">-item_id4"].join(""))
          ) == "true"
        ) {
          embedMessageForInventory.addField(String("🔫 Gun"), String("Item ID: **4**"), false);
        }
        if (
          s4d.database.get(
            String([(s4dmessage.guild || {}).id, "-<@", s4dmessage.mentions.members.first().id, ">-item_id5"].join(""))
          ) == "true"
        ) {
          embedMessageForInventory.addField(String("🔫 AK-47"), String("Item ID: **5**"), false);
        }
        if (
          s4d.database.get(
            String([(s4dmessage.guild || {}).id, "-<@", s4dmessage.mentions.members.first().id, ">-item_id6"].join(""))
          ) == "true"
        ) {
          embedMessageForInventory.addField(String("🎣 Fishing rod"), String("Item ID: **6**"), false);
        }
        if (
          s4d.database.get(
            String([(s4dmessage.guild || {}).id, "-<@", s4dmessage.mentions.members.first().id, ">-item_id7"].join(""))
          ) == "true"
        ) {
          embedMessageForInventory.addField(String("🍌 Banana"), String("Item ID: **7**"), false);
        }
        if (
          s4d.database.get(
            String([(s4dmessage.guild || {}).id, "-<@", s4dmessage.mentions.members.first().id, ">-item_id8"].join(""))
          ) == "true"
        ) {
          embedMessageForInventory.addField(String("🥫 Beans"), String("Item ID: **8**"), false);
        }
        if (
          s4d.database.get(
            String([(s4dmessage.guild || {}).id, "-<@", s4dmessage.mentions.members.first().id, ">-item_id9"].join(""))
          ) == "true"
        ) {
          embedMessageForInventory.addField(String("💩 Holy poo"), String("Item ID: **9**"), false);
        }
        if (
          s4d.database.get(
            String([(s4dmessage.guild || {}).id, "-<@", s4dmessage.mentions.members.first().id, ">-item_id10_count"].join(""))
          ) > 0
        ) {
          embedMessageForInventory.addField(
            String(
              [
                "🗿 ",
                s4d.database.get(
                  String(
                    [(s4dmessage.guild || {}).id, "-<@", s4dmessage.mentions.members.first().id, ">-item_id10_count"].join("")
                  )
                ),
                " Moacoin",
              ].join("")
            ),
            String("Item ID: **10**"),
            false
          );
        }
        if (
          s4d.database.get(
            String([(s4dmessage.guild || {}).id, "-<@", s4dmessage.mentions.members.first().id, ">-item_id11_count"].join(""))
          ) > 0
        ) {
          embedMessageForInventory.addField(
            String(
              [
                "🪙 ",
                s4d.database.get(
                  String(
                    [(s4dmessage.guild || {}).id, "-<@", s4dmessage.mentions.members.first().id, ">-item_id11_count"].join("")
                  )
                ),
                " Divcoin",
              ].join("")
            ),
            String("Item ID: **11**"),
            false
          );
        }
        if (
          s4d.database.get(
            String([(s4dmessage.guild || {}).id, "-<@", s4dmessage.mentions.members.first().id, ">-item_id12"].join(""))
          ) == "true"
        ) {
          embedMessageForInventory.addField(String("🔫 Kar98k scoped"), String("Item ID: **12**"), false);
        }
        if (
          s4d.database.get(
            String([(s4dmessage.guild || {}).id, "-<@", s4dmessage.mentions.members.first().id, ">-item_id13"].join(""))
          ) == "true"
        ) {
          embedMessageForInventory.addField(String("⛏️ Pickaxe"), String("Item ID: **13**"), false);
        }

        s4dmessage.reply({
          embeds: [embedMessageForInventory],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      } catch (err) {
        s4dmessage.reply({
          content: String(String(s4dmessage.author) + ", can you mention an user?"),
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
    }

    /*
    D!SELL
    */
    if (s4dmessage.content.toUpperCase() == "D!SELL") {
      s4dmessage.reply({
        embeds: [
          {
            color: String("#ff0000"),
            title: String("❌ Error"),
            description: String("Correct command: **d!sell <item id/name>**"),
          },
        ],
        allowedMentions: {
          repliedUser: true,
        },
      });
      return;
    }

    /*
    D!SELL 1
    */
    if (
      s4dmessage.content.toUpperCase() == "D!SELL 1" ||
      (s4dmessage.content.toUpperCase() || "").startsWith("D!SELL HITLERS MOUSTACHE" || "")
    ) {
      if (s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-item_id1"].join(""))) == "false") {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("You don't have that item"),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-item_id1"].join("")), "false");
      s4d.database.add(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-money"].join("")), parseInt(999000));
      s4dmessage.reply({
        embeds: [
          {
            color: String("#33ff33"),
            title: String("✅ Sold successfully"),
            description: String("You sold **Hitler's Moustache** and you got **999 000$**"),
          },
        ],
        allowedMentions: {
          repliedUser: true,
        },
      });
      return;
    }

    /*
    D!SELL 2
    */
    if (
      s4dmessage.content.toUpperCase() == "D!SELL 2" ||
      (s4dmessage.content.toUpperCase() || "").startsWith("D!SELL BITCOIN" || "")
    ) {
      if (s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-item_id2_count"].join(""))) <= 0) {
        s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-item_id2"].join("")), "false");
      }
      if (
        !(
          s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-item_id2"].join(""))) == "true" &&
          s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-item_id2_count"].join(""))) > 0
        )
      ) {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("You don't have that item"),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      s4d.database.subtract(
        String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-item_id2_count"].join("")),
        parseInt(1)
      );
      s4d.database.add(
        String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-money"].join("")),
        parseInt(s4d.database.get(String("Bitcoins-price")))
      );
      if (s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-item_id2_count"].join(""))) <= 0) {
        s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-item_id2"].join("")), "false");
      }
      s4dmessage.reply({
        embeds: [
          {
            color: String("#33ff33"),
            title: String("✅ Sold successfully"),
            description: String(
              ["You sold **1 Bitcoin** and you got **", s4d.database.get(String("Bitcoins-price")), "$**"].join("")
            ),
          },
        ],
        allowedMentions: {
          repliedUser: true,
        },
      });
      return;
    }

    /*
    D!SELL 3
    */
    if (
      s4dmessage.content.toUpperCase() == "D!SELL 3" ||
      (s4dmessage.content.toUpperCase() || "").startsWith("D!SELL DOGECOIN" || "")
    ) {
      if (s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-item_id3_count"].join(""))) <= 0) {
        s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-item_id3"].join("")), "false");
      }
      if (
        !(
          s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-item_id3"].join(""))) == "true" &&
          s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-item_id3_count"].join(""))) > 0
        )
      ) {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("You don't have that item"),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      s4d.database.subtract(
        String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-item_id3_count"].join("")),
        parseInt(1)
      );
      s4d.database.add(
        String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-money"].join("")),
        parseInt(s4d.database.get(String("Dogecoins-price")))
      );
      if (s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-item_id3_count"].join(""))) <= 0) {
        s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-item_id3"].join("")), "false");
      }
      s4dmessage.reply({
        embeds: [
          {
            color: String("#33ff33"),
            title: String("✅ Sold successfully"),
            description: String(
              ["You sold **1 Dogecoin** and you got **", s4d.database.get(String("Dogecoins-price")), "$**"].join("")
            ),
          },
        ],
        allowedMentions: {
          repliedUser: true,
        },
      });
      return;
    }

    /*
    D!SELL 4
    */
    if (
      (s4dmessage.content.toUpperCase() || "").startsWith("D!SELL 4" || "") ||
      (s4dmessage.content.toUpperCase() || "").startsWith("D!SELL GUN" || "")
    ) {
      if (s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-item_id4"].join(""))) == "false") {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("You don't have that item"),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-item_id4"].join("")), "false");
      s4d.database.add(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-money"].join("")), parseInt(2000));
      s4dmessage.reply({
        embeds: [
          {
            color: String("#33ff33"),
            title: String("✅ Sold successfully"),
            description: String("You sold a **Gun** and you got **2000$**"),
          },
        ],
        allowedMentions: {
          repliedUser: true,
        },
      });
      return;
    }

    /*
    D!SELL 5
    */
    if (
      (s4dmessage.content.toUpperCase() || "").startsWith("D!SELL 5" || "") ||
      (s4dmessage.content.toUpperCase() || "").startsWith("D!SELL AK-47" || "")
    ) {
      if (s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-item_id5"].join(""))) == "false") {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("You don't have that item"),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-item_id5"].join("")), "false");
      s4d.database.add(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-money"].join("")), parseInt(5000));
      s4dmessage.reply({
        embeds: [
          {
            color: String("#33ff33"),
            title: String("✅ Sold successfully"),
            description: String("You sold an **AK-47** and you got **5000$**"),
          },
        ],
        allowedMentions: {
          repliedUser: true,
        },
      });
      return;
    }

    /*
    D!SELL 6
    */
    if (
      (s4dmessage.content.toUpperCase() || "").startsWith("D!SELL 6" || "") ||
      (s4dmessage.content.toUpperCase() || "").startsWith("D!SELL FISHING ROD" || "")
    ) {
      if (s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-item_id6"].join(""))) == "false") {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("You don't have that item"),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-item_id6"].join("")), "false");
      s4d.database.add(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-money"].join("")), parseInt(400));
      s4dmessage.reply({
        embeds: [
          {
            color: String("#33ff33"),
            title: String("✅ Sold successfully"),
            description: String("You sold a **Fishing rod** and you got **400$**"),
          },
        ],
        allowedMentions: {
          repliedUser: true,
        },
      });
      return;
    }

    /*
    D!SELL 7
    */
    if (
      (s4dmessage.content.toUpperCase() || "").startsWith("D!SELL 7" || "") ||
      (s4dmessage.content.toUpperCase() || "").startsWith("D!SELL BANANA" || "")
    ) {
      if (s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-item_id7"].join(""))) == "false") {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("You don't have that item"),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-item_id7"].join("")), "false");
      s4d.database.add(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-money"].join("")), parseInt(180));
      s4dmessage.reply({
        embeds: [
          {
            color: String("#33ff33"),
            title: String("✅ Sold successfully"),
            description: String("You sold a **Banana** and you got **180$**"),
          },
        ],
        allowedMentions: {
          repliedUser: true,
        },
      });
      return;
    }

    /*
    D!SELL 8
    */
    if (
      (s4dmessage.content.toUpperCase() || "").startsWith("D!SELL 8" || "") ||
      (s4dmessage.content.toUpperCase() || "").startsWith("D!SELL BEANS" || "")
    ) {
      if (s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-item_id8"].join(""))) == "false") {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("You don't have that item"),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-item_id8"].join("")), "false");
      s4d.database.add(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-money"].join("")), parseInt(300));
      s4dmessage.reply({
        embeds: [
          {
            color: String("#33ff33"),
            title: String("✅ Sold successfully"),
            description: String("You sold **Beans** and you got **300$**"),
          },
        ],
        allowedMentions: {
          repliedUser: true,
        },
      });
      return;
    }

    /*
    D!SELL 9
    */
    if (
      (s4dmessage.content.toUpperCase() || "").startsWith("D!SELL 9" || "") ||
      (s4dmessage.content.toUpperCase() || "").startsWith("D!SELL HOLY POO" || "")
    ) {
      if (s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-item_id9"].join(""))) == "false") {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("You don't have that item"),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-item_id9"].join("")), "false");
      s4d.database.add(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-money"].join("")), parseInt(800));
      s4dmessage.reply({
        embeds: [
          {
            color: String("#33ff33"),
            title: String("✅ Sold successfully"),
            description: String("You sold **holy poo** and you got **800$**"),
          },
        ],
        allowedMentions: {
          repliedUser: true,
        },
      });
      return;
    }

    /*
    D!SELL 10
    */
    if (
      (s4dmessage.content.toUpperCase() || "").startsWith("D!SELL 10" || "") ||
      (s4dmessage.content.toUpperCase() || "").startsWith("D!SELL MOACOIN" || "")
    ) {
      if (s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-item_id10_count"].join(""))) <= 0) {
        s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-item_id10"].join("")), "false");
      }
      if (
        !(
          s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-item_id10"].join(""))) == "true" &&
          s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-item_id10_count"].join(""))) > 0
        )
      ) {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("You don't have that item"),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      s4d.database.subtract(
        String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-item_id10_count"].join("")),
        parseInt(1)
      );
      s4d.database.add(
        String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-money"].join("")),
        parseInt(s4d.database.get(String("Moacoins-price")))
      );
      s4d.database.subtract(String("Moacoins-price"), parseInt(4));
      if (s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-item_id10_count"].join(""))) <= 0) {
        s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-item_id10"].join("")), "false");
      }
      s4dmessage.reply({
        embeds: [
          {
            color: String("#33ff33"),
            title: String("✅ Sold successfully"),
            description: String(
              ["You sold **1 Moacoin** and you got **", s4d.database.get(String("Moacoins-price")), "$**"].join("")
            ),
          },
        ],
        allowedMentions: {
          repliedUser: true,
        },
      });
      return;
    }

    /*
    D!SELL 11
    */
    if (
      (s4dmessage.content.toUpperCase() || "").startsWith("D!SELL 11" || "") ||
      (s4dmessage.content.toUpperCase() || "").startsWith("D!SELL DIVCOIN" || "")
    ) {
      if (s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-item_id11_count"].join(""))) <= 0) {
        s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-item_id11"].join("")), "false");
      }
      if (
        !(
          s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-item_id11"].join(""))) == "true" &&
          s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-item_id11_count"].join(""))) > 0
        )
      ) {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("You don't have that item"),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      s4d.database.subtract(
        String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-item_id11_count"].join("")),
        parseInt(1)
      );
      s4d.database.add(
        String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-money"].join("")),
        parseInt(s4d.database.get(String("Divcoins-price")))
      );
      s4d.database.subtract(String("Divcoins-price"), parseInt(14));
      if (s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-item_id11_count"].join(""))) <= 0) {
        s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-item_id11"].join("")), "false");
      }
      s4dmessage.reply({
        embeds: [
          {
            color: String("#33ff33"),
            title: String("✅ Sold successfully"),
            description: String(
              ["You sold **1 Divcoin** and you got **", s4d.database.get(String("Divcoins-price")), "$**"].join("")
            ),
          },
        ],
        allowedMentions: {
          repliedUser: true,
        },
      });
      return;
    }

    /*
    D!SELL 12
    */
    if (
      (s4dmessage.content.toUpperCase() || "").startsWith("D!SELL 12" || "") ||
      (s4dmessage.content.toUpperCase() || "").startsWith("D!SELL KAR98K SCOPED" || "")
    ) {
      if (s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-item_id12"].join(""))) == "false") {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("You don't have that item"),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-item_id12"].join("")), "false");
      s4d.database.add(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-money"].join("")), parseInt(1000));
      s4dmessage.reply({
        embeds: [
          {
            color: String("#33ff33"),
            title: String("✅ Sold successfully"),
            description: String("You sold a **Kar98k scoped** and you got **1000$**"),
          },
        ],
        allowedMentions: {
          repliedUser: true,
        },
      });
      return;
    }

    /*
    D!SELL 13
    */
    if (
      (s4dmessage.content.toUpperCase() || "").startsWith("D!SELL 13" || "") ||
      (s4dmessage.content.toUpperCase() || "").startsWith("D!SELL PICKAXE" || "")
    ) {
      if (s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-item_id13"].join(""))) == "false") {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("You don't have that item"),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-item_id13"].join("")), "false");
      s4d.database.add(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-money"].join("")), parseInt(500));
      s4dmessage.reply({
        embeds: [
          {
            color: String("#33ff33"),
            title: String("✅ Sold successfully"),
            description: String("You sold a **Pickaxe** and you got **500$**"),
          },
        ],
        allowedMentions: {
          repliedUser: true,
        },
      });
      return;
    }

    /*
    Coins price changing
    */
    if (s4dmessage.author.id == "724990112030654484") {
      /*
      D!CPRICE-DC
      */
      arguments = s4dmessage.content.split(" ");
      command = arguments.splice(0, 1)[0];
      if ((command.toUpperCase() || "").startsWith("D!CPRICE-DC" || "")) {
        s4d.database.set(String("Dogecoins-price"), Number(arguments.slice(-1)[0]));
        s4dmessage
          .reply({
            embeds: [
              {
                color: String("#ffff00"),
                title: String("✅ Done"),
                description: String(
                  ["Dogecoin price is now: **", s4d.database.get(String("Dogecoins-price")), "$**!"].join("")
                ),
              },
            ],
            allowedMentions: {
              repliedUser: true,
            },
          })
          .then(async (s4dfrost_real_reply) => {
            await delay(Number(2) * 1000);
            s4dfrost_real_reply.delete();
            s4dmessage.delete();
          });
        return;
      }

      /*
      D!CPRICE-BTC
      */
      arguments = s4dmessage.content.split(" ");
      command = arguments.splice(0, 1)[0];
      if ((command.toUpperCase() || "").startsWith("D!CPRICE-BTC" || "")) {
        s4d.database.set(String("Bitcoins-price"), Number(arguments.slice(-1)[0]));
        s4dmessage
          .reply({
            embeds: [
              {
                color: String("#ffff00"),
                title: String("✅ Done"),
                description: String(["Bitcoin price is now: **", s4d.database.get(String("Bitcoins-price")), "$**!"].join("")),
              },
            ],
            allowedMentions: {
              repliedUser: true,
            },
          })
          .then(async (s4dfrost_real_reply) => {
            await delay(Number(2) * 1000);
            s4dfrost_real_reply.delete();
            s4dmessage.delete();
          });
        return;
      }

      /*
      D!CPRICE-DIV
      */
      arguments = s4dmessage.content.split(" ");
      command = arguments.splice(0, 1)[0];
      if ((command.toUpperCase() || "").startsWith("D!CPRICE-DIV" || "")) {
        s4d.database.set(String("Divcoins-price"), Number(arguments.slice(-1)[0]));
        s4dmessage
          .reply({
            embeds: [
              {
                color: String("#ffff00"),
                title: String("✅ Done"),
                description: String(["Divcoin price is now: **", s4d.database.get(String("Divcoins-price")), "$**!"].join("")),
              },
            ],
            allowedMentions: {
              repliedUser: true,
            },
          })
          .then(async (s4dfrost_real_reply) => {
            await delay(Number(2) * 1000);
            s4dfrost_real_reply.delete();
            s4dmessage.delete();
          });
        return;
      }

      /*
      D!CPRICE-MOAI
      */
      arguments = s4dmessage.content.split(" ");
      command = arguments.splice(0, 1)[0];
      if ((command.toUpperCase() || "").startsWith("D!CPRICE-MOAI" || "")) {
        s4d.database.set(String("Moacoins-price"), Number(arguments.slice(-1)[0]));
        s4dmessage
          .reply({
            embeds: [
              {
                color: String("#ffff00"),
                title: String("✅ Done"),
                description: String(["🗿coin price is now: **", s4d.database.get(String("Moacoins-price")), "$**!"].join("")),
              },
            ],
            allowedMentions: {
              repliedUser: true,
            },
          })
          .then(async (s4dfrost_real_reply) => {
            await delay(Number(2) * 1000);
            s4dfrost_real_reply.delete();
            s4dmessage.delete();
          });
        return;
      }
    }

    /*
    D!USE
    */
    if (s4dmessage.content.toUpperCase() == "D!USE") {
      s4dmessage.reply({
        embeds: [
          {
            color: String("#ff6600"),
            title: String("Here is the list of usable items:"),
            description: String(["d!use banana", "\n", "d!use beans", "\n", "d!use poo <@user>"].join("")),
          },
        ],
        allowedMentions: {
          repliedUser: true,
        },
      });
      return;
    }

    /*
    D!USE BANANA
    */
    if ((s4dmessage.content.toUpperCase() || "").startsWith("D!USE BANANA" || "")) {
      if (s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-item_id7"].join(""))) == "false") {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("You don't have that item!"),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-item_id7"].join("")), "false");
      s4dmessage.reply({
        embeds: [
          {
            color: String("#ffcc00"),
            title: String("Delicious!"),
            description: String("You ate the Banana! 🍌"),
          },
        ],
        allowedMentions: {
          repliedUser: true,
        },
      });
      return;
    }

    /*
    D!USE BEANS
    */
    if ((s4dmessage.content.toUpperCase() || "").startsWith("D!USE BEANS" || "")) {
      if (s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-item_id8"].join(""))) == "false") {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("You don't have that item!"),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-item_id8"].join("")), "false");
      s4dmessage
        .reply({
          embeds: [
            {
              color: String("#ffcc00"),
              title: String("Delicious!"),
              description: String("You ate beans! 🥫"),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        })
        .then(async (s4dfrost_real_reply) => {
          await delay(Number(3) * 1000);
          s4dfrost_real_reply.edit({
            embeds: [
              {
                color: String("#000000"),
                title: String("And..."),
              },
            ],
          });
          await delay(Number(3) * 1000);
          s4dfrost_real_reply.edit({
            embeds: [
              {
                color: String("#33ff33"),
                title: String("💨 You farted!"),
              },
            ],
          });
        });
      return;
    }

    /*
    D!USE POO
    */
    if ((s4dmessage.content.toUpperCase() || "").startsWith("D!USE POO" || "")) {
      if (s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-item_id9"].join(""))) == "false") {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("You don't have that item!"),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      try {
        s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-item_id9"].join("")), "false");
        s4dmessage.reply({
          embeds: [
            {
              color: String("#ffcc00"),
              title: String("You trow the poo!"),
              description: String(String(s4dmessage.mentions.members.first()) + " is ded! HA! HA! HA!"),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      } catch (err) {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("Please ping a valid user"),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
    }

    /*
    D!BUY 1
    */
    if (
      s4dmessage.content.toUpperCase() == "D!BUY 1" ||
      (s4dmessage.content.toUpperCase() || "").startsWith("D!BUY HITLER MOUSTACHE" || "")
    ) {
      if (!(s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-money"].join(""))) >= 999000)) {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("Not enough money"),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      if (s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-item_id1"].join(""))) == "true") {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("You can buy only 1 of that"),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-item_id1"].join("")), "true");
      s4d.database.subtract(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-money"].join("")), parseInt(999000));
      s4dmessage.reply({
        embeds: [
          {
            color: String("#33ff33"),
            title: String("✅ Purchase succesfull"),
            description: String("You bought **Hitler's Moustache** for **999 000$**!  "),
          },
        ],
        allowedMentions: {
          repliedUser: true,
        },
      });
      return;
    }

    /*
    D!BUY 2
    */
    if (
      (s4dmessage.content.toUpperCase() || "").startsWith("D!BUY 2" || "") ||
      (s4dmessage.content.toUpperCase() || "").startsWith("D!BUY BITCOIN" || "")
    ) {
      if (
        !(
          s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-money"].join(""))) >=
          s4d.database.get(String("Bitcoins-price"))
        )
      ) {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("Not enough money"),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-item_id2"].join("")), "true");
      s4d.database.subtract(
        String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-money"].join("")),
        parseInt(s4d.database.get(String("Bitcoins-price")))
      );
      s4d.database.add(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-item_id2_count"].join("")), parseInt(1));
      s4dmessage.reply({
        embeds: [
          {
            color: String("#33ff33"),
            title: String("✅ Purchase succesfull"),
            description: String(
              ["You bought **1 Bitcoin** for **", s4d.database.get(String("Bitcoins-price")), "$**"].join("")
            ),
          },
        ],
        allowedMentions: {
          repliedUser: true,
        },
      });
      return;
    }

    /*
    D!BUY 3
    */
    if (
      (s4dmessage.content.toUpperCase() || "").startsWith("D!BUY 3" || "") ||
      (s4dmessage.content.toUpperCase() || "").startsWith("D!BUY DOGECOIN" || "")
    ) {
      if (
        !(
          s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-money"].join(""))) >=
          s4d.database.get(String("Dogecoins-price"))
        )
      ) {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("Not enough money"),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-item_id3"].join("")), "true");
      s4d.database.subtract(
        String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-money"].join("")),
        parseInt(s4d.database.get(String("Dogecoins-price")))
      );
      s4d.database.add(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-item_id3_count"].join("")), parseInt(1));
      s4dmessage.reply({
        embeds: [
          {
            color: String("#33ff33"),
            title: String("✅ Purchase succesfull"),
            description: String(
              ["You bought **1 Dogecoin** for **", s4d.database.get(String("Dogecoins-price")), "$**"].join("")
            ),
          },
        ],
        allowedMentions: {
          repliedUser: true,
        },
      });
      return;
    }

    /*
    D!BUY 4
    */
    if (
      (s4dmessage.content.toUpperCase() || "").startsWith("D!BUY 4" || "") ||
      (s4dmessage.content.toUpperCase() || "").startsWith("D!BUY GUN" || "")
    ) {
      if (!(s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-money"].join(""))) >= 2000)) {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("Not enough money"),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      if (s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-item_id4"].join(""))) == "true") {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("You can buy only 1 of that"),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-item_id4"].join("")), "true");
      s4d.database.subtract(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-money"].join("")), parseInt(2000));
      s4dmessage.reply({
        embeds: [
          {
            color: String("#33ff33"),
            title: String("✅ Purchase succesfull"),
            description: String("You bought a **Gun** for **2000$**!"),
          },
        ],
        allowedMentions: {
          repliedUser: true,
        },
      });
      return;
    }

    /*
    D!BUY 5
    */
    if (
      (s4dmessage.content.toUpperCase() || "").startsWith("D!BUY 5" || "") ||
      (s4dmessage.content.toUpperCase() || "").startsWith("D!BUY AK-47" || "")
    ) {
      if (!(s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-money"].join(""))) >= 5000)) {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("Not enough money"),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      if (s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-item_id5"].join(""))) == "true") {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("You can buy only 1 of that"),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-item_id5"].join("")), "true");
      s4d.database.subtract(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-money"].join("")), parseInt(5000));
      s4dmessage.reply({
        embeds: [
          {
            color: String("#33ff33"),
            title: String("✅ Purchase succesfull"),
            description: String("You bought an **AK-47** for **5000$**!"),
          },
        ],
        allowedMentions: {
          repliedUser: true,
        },
      });
      return;
    }

    /*
    D!BUY 6
    */
    if (
      (s4dmessage.content.toUpperCase() || "").startsWith("D!BUY 6" || "") ||
      (s4dmessage.content.toUpperCase() || "").startsWith("D!BUY FISHING ROD" || "")
    ) {
      if (!(s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-money"].join(""))) >= 400)) {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("Not enough money"),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      if (s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-item_id6"].join(""))) == "true") {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("You can buy only 1 of that"),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-item_id6"].join("")), "true");
      s4d.database.subtract(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-money"].join("")), parseInt(400));
      s4dmessage.reply({
        embeds: [
          {
            color: String("#33ff33"),
            title: String("✅ Purchase succesfull"),
            description: String("You bought a **Fishing rod** for **400$**!"),
          },
        ],
        allowedMentions: {
          repliedUser: true,
        },
      });
      return;
    }

    /*
    D!BUY 7
    */
    if (
      (s4dmessage.content.toUpperCase() || "").startsWith("D!BUY 7" || "") ||
      (s4dmessage.content.toUpperCase() || "").startsWith("D!BUY BANANA" || "")
    ) {
      if (!(s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-money"].join(""))) >= 180)) {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("Not enough money"),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      if (s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-item_id7"].join(""))) == "true") {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("You can buy only 1 of that"),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-item_id7"].join("")), "true");
      s4d.database.subtract(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-money"].join("")), parseInt(180));
      s4dmessage.reply({
        embeds: [
          {
            color: String("#33ff33"),
            title: String("✅ Purchase succesfull"),
            description: String("You bought a **Banana** for **180$**!"),
          },
        ],
        allowedMentions: {
          repliedUser: true,
        },
      });
      return;
    }

    /*
    D!BUY 8
    */
    if (
      (s4dmessage.content.toUpperCase() || "").startsWith("D!BUY 8" || "") ||
      (s4dmessage.content.toUpperCase() || "").startsWith("D!BUY BEANS" || "")
    ) {
      if (!(s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-money"].join(""))) >= 300)) {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("Not enough money"),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      if (s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-item_id8"].join(""))) == "true") {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("You can buy only 1 of that"),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-item_id8"].join("")), "true");
      s4d.database.subtract(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-money"].join("")), parseInt(300));
      s4dmessage.reply({
        embeds: [
          {
            color: String("#33ff33"),
            title: String("✅ Purchase succesfull"),
            description: String("You bought **Beans** for **300$**!"),
          },
        ],
        allowedMentions: {
          repliedUser: true,
        },
      });
      return;
    }

    /*
    D!BUY 9
    */
    if (
      (s4dmessage.content.toUpperCase() || "").startsWith("D!BUY 9" || "") ||
      (s4dmessage.content.toUpperCase() || "").startsWith("D!BUY HOLY POO" || "")
    ) {
      if (!(s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-money"].join(""))) >= 800)) {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("Not enough money"),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      if (s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-item_id9"].join(""))) == "true") {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("You can buy only 1 of that"),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-item_id9"].join("")), "true");
      s4d.database.subtract(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-money"].join("")), parseInt(800));
      s4dmessage.reply({
        embeds: [
          {
            color: String("#33ff33"),
            title: String("✅ Purchase succesfull"),
            description: String("You bought a **the holy poo** for **800$**!"),
          },
        ],
        allowedMentions: {
          repliedUser: true,
        },
      });
      return;
    }

    /*
    D!BUY 10
    */
    if (
      (s4dmessage.content.toUpperCase() || "").startsWith("D!BUY 10" || "") ||
      (s4dmessage.content.toUpperCase() || "").startsWith("D!BUY MOACOIN" || "")
    ) {
      if (
        !(
          s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-money"].join(""))) >=
          s4d.database.get(String("Moacoins-price"))
        )
      ) {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("Not enough money"),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-item_id11"].join("")), "true");
      s4d.database.subtract(
        String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-money"].join("")),
        parseInt(s4d.database.get(String("Moacoins-price")))
      );
      s4d.database.add(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-item_id11_count"].join("")), parseInt(1));
      s4d.database.add(String("Moacoins-price"), parseInt(7));
      s4dmessage.reply({
        embeds: [
          {
            color: String("#33ff33"),
            title: String("✅ Purchase succesfull"),
            description: String(
              ["You bought **1 Moaicoin** for **", s4d.database.get(String("Moacoins-price")), "$**"].join("")
            ),
          },
        ],
        allowedMentions: {
          repliedUser: true,
        },
      });
      return;
    }

    /*
    D!BUY 11
    */
    if (
      (s4dmessage.content.toUpperCase() || "").startsWith("D!BUY 11" || "") ||
      (s4dmessage.content.toUpperCase() || "").startsWith("D!BUY DIVCOIN" || "")
    ) {
      if (
        !(
          s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-money"].join(""))) >=
          s4d.database.get(String("Divcoins-price"))
        )
      ) {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("Not enough money"),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-item_id10"].join("")), "true");
      s4d.database.subtract(
        String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-money"].join("")),
        parseInt(s4d.database.get(String("Divcoins-price")))
      );
      s4d.database.add(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-item_id10_count"].join("")), parseInt(1));
      s4d.database.add(String("Divcoins-price"), parseInt(21));
      s4dmessage.reply({
        embeds: [
          {
            color: String("#33ff33"),
            title: String("✅ Purchase succesfull"),
            description: String(
              ["You bought **1 Divcoin** for **", s4d.database.get(String("Divcoins-price")), "$**"].join("")
            ),
          },
        ],
        allowedMentions: {
          repliedUser: true,
        },
      });
      return;
    }

    /*
    D!BUY 12
    */
    if (
      (s4dmessage.content.toUpperCase() || "").startsWith("D!BUY 12" || "") ||
      (s4dmessage.content.toUpperCase() || "").startsWith("D!BUY KAR98K SCOPED" || "")
    ) {
      if (!(s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-money"].join(""))) >= 1000)) {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("Not enough money"),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      if (s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-item_id12"].join(""))) == "true") {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("You can buy only 1 of that"),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-item_id12"].join("")), "true");
      s4d.database.subtract(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-money"].join("")), parseInt(1000));
      s4dmessage.reply({
        embeds: [
          {
            color: String("#33ff33"),
            title: String("✅ Purchase succesfull"),
            description: String("You bought a **Kar98k scoped** for **1000$**!"),
          },
        ],
        allowedMentions: {
          repliedUser: true,
        },
      });
      return;
    }

    /*
    D!BUY 13
    */
    if (
      (s4dmessage.content.toUpperCase() || "").startsWith("D!BUY 13" || "") ||
      (s4dmessage.content.toUpperCase() || "").startsWith("D!BUY PICKAXE" || "")
    ) {
      if (!(s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-money"].join(""))) >= 500)) {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("Not enough money"),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      if (s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-item_id13"].join(""))) == "true") {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("You can buy only 1 of that"),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-item_id13"].join("")), "true");
      s4d.database.subtract(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-money"].join("")), parseInt(500));
      s4dmessage.reply({
        embeds: [
          {
            color: String("#33ff33"),
            title: String("✅ Purchase succesfull"),
            description: String("You bought a **Pickaxe** for **500$**!"),
          },
        ],
        allowedMentions: {
          repliedUser: true,
        },
      });
      return;
    }

    /*
    D!FISH
    */
    if ((s4dmessage.content.toUpperCase() || "").startsWith("D!FISH" || "")) {
      if (s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-item_id6"].join(""))) == "false") {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("You need a **Fishing rod** for fishing"),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      if (!s4d.database.has(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-fishtimer"].join("")))) {
        s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-fishtimer"].join("")), 0);
      }
      if (
        !(
          new Date().getTime() >
          s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-fishtimer"].join(""))) + 900000
        )
      ) {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#000000"),
              description: String(
                [
                  "⏰ Slowdown man, you can fish again: **<t:",
                  Math.floor(
                    (s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-fishtimer"].join(""))) +
                      900000) /
                      1000
                  ),
                  ":R>**",
                ].join("")
              ),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      fishCooldown = new Date().getTime();
      s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-fishtimer"].join("")), fishCooldown);
      fishingRodBreakProbs = mathRandomInt(1, 4);
      if (fishingRodBreakProbs == 1) {
        s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-item_id6"].join("")), "false");
        s4dmessage.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("Oh no!"),
              description: String(["Your fishing rod broke!", "\n", "Go buy a new one to start fishing again"].join("")),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      fishingProbs = mathRandomInt(1, 15);
      if (fishingProbs >= 11 && fishingProbs <= 15) {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("Try again!"),
              description: String("You haven't caught any fish"),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      if (fishingProbs == 1) {
        s4d.database.add(
          String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-fish_id1_count"].join("")),
          parseInt(1)
        );
        s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-fish_id1"].join("")), "true");
        s4dmessage.reply({
          embeds: [
            {
              color: String("#33ff33"),
              title: String("🐟 You caught a Fish!"),
              description: String("Classic fish"),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      if (fishingProbs == 2) {
        s4d.database.add(
          String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-fish_id2_count"].join("")),
          parseInt(1)
        );
        s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-fish_id2"].join("")), "true");
        s4dmessage.reply({
          embeds: [
            {
              color: String("#33ff33"),
              title: String("🐠 You caught a Tropical fish!"),
              description: String("Nice fish you got!"),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      if (fishingProbs == 3) {
        s4d.database.add(
          String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-fish_id3_count"].join("")),
          parseInt(1)
        );
        s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-fish_id3"].join("")), "true");
        s4dmessage.reply({
          embeds: [
            {
              color: String("#33ff33"),
              title: String("🐡 You caught a Puffer fish!"),
              description: String("You got a fat fish XD"),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      if (fishingProbs == 4) {
        s4d.database.add(
          String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-fish_id4_count"].join("")),
          parseInt(1)
        );
        s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-fish_id4"].join("")), "true");
        s4dmessage.reply({
          embeds: [
            {
              color: String("#33ff33"),
              title: String("🦐 You caught a Shrimp!"),
              description: String("Nice!"),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      if (fishingProbs == 5) {
        s4d.database.add(
          String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-fish_id5_count"].join("")),
          parseInt(1)
        );
        s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-fish_id5"].join("")), "true");
        s4dmessage.reply({
          embeds: [
            {
              color: String("#33ff33"),
              title: String("🦞 You caught a Lobster!"),
              description: String("Wow, delicious!"),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      if (fishingProbs == 6) {
        s4d.database.add(
          String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-fish_id6_count"].join("")),
          parseInt(1)
        );
        s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-fish_id6"].join("")), "true");
        s4dmessage.reply({
          embeds: [
            {
              color: String("#33ff33"),
              title: String("🦀 You caught a Crab!"),
              description: String("Poor Mr. Crab :("),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      if (fishingProbs == 7) {
        s4d.database.add(
          String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-fish_id7_count"].join("")),
          parseInt(1)
        );
        s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-fish_id7"].join("")), "true");
        s4dmessage.reply({
          embeds: [
            {
              color: String("#33ff33"),
              title: String("🦑 You caught a Squid!"),
              description: String("A...squid..."),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      if (fishingProbs == 8) {
        s4d.database.add(
          String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-fish_id8_count"].join("")),
          parseInt(1)
        );
        s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-fish_id8"].join("")), "true");
        s4dmessage.reply({
          embeds: [
            {
              color: String("#33ff33"),
              title: String("🐙 You caught an Octopus!"),
              description: String("Impressive"),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      if (fishingProbs == 9) {
        s4d.database.add(
          String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-fish_id9_count"].join("")),
          parseInt(1)
        );
        s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-fish_id9"].join("")), "true");
        s4dmessage.reply({
          embeds: [
            {
              color: String("#33ff33"),
              title: String("🦈 You caught a Shark!"),
              description: String("JO BRO WTF"),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      if (fishingProbs == 10) {
        s4d.database.add(
          String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-fish_id10_count"].join("")),
          parseInt(1)
        );
        s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-fish_id10"].join("")), "true");
        s4dmessage.reply({
          embeds: [
            {
              color: String("#33ff33"),
              title: String("🐋 You caught a Whale!"),
              description: String("*Physics has left the game*"),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      return;
    }

    /*
    D!BUCKET
    */
    if (s4dmessage.content.toUpperCase() == "D!BUCKET") {
      var embedMessageForBucketCmd = new Discord.MessageEmbed();
      embedMessageForBucketCmd.setColor("#33ccff");
      embedMessageForBucketCmd.setTitle(String(["🪣 ", s4dmessage.author.username, "'s bucket:"].join("")));
      embedMessageForBucketCmd.setURL(String());
      if (
        s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-fish_id1"].join(""))) == "false" &&
        s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-fish_id2"].join(""))) == "false" &&
        s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-fish_id3"].join(""))) == "false" &&
        s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-fish_id4"].join(""))) == "false" &&
        s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-fish_id5"].join(""))) == "false" &&
        s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-fish_id6"].join(""))) == "false" &&
        s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-fish_id7"].join(""))) == "false" &&
        s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-fish_id8"].join(""))) == "false" &&
        s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-fish_id9"].join(""))) == "false" &&
        s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-fish_id10"].join(""))) == "false"
      ) {
        embedMessageForBucketCmd.addField(String("You have nothing!"), String("Go fishing"), false);
      }
      if (
        s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-fish_id1"].join(""))) == "true" &&
        s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-fish_id1_count"].join(""))) > 0
      ) {
        embedMessageForBucketCmd.addField(
          String(
            [
              "🐟 ",
              s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-fish_id1_count"].join(""))),
              " Classic fish",
            ].join("")
          ),
          String("Fish ID: **f1**"),
          false
        );
      }
      if (
        s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-fish_id2"].join(""))) == "true" &&
        s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-fish_id2_count"].join(""))) > 0
      ) {
        embedMessageForBucketCmd.addField(
          String(
            [
              "🐠 ",
              s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-fish_id2_count"].join(""))),
              " Tropical fish",
            ].join("")
          ),
          String("Fish ID: **f2**"),
          false
        );
      }
      if (
        s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-fish_id3"].join(""))) == "true" &&
        s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-fish_id3_count"].join(""))) > 0
      ) {
        embedMessageForBucketCmd.addField(
          String(
            [
              "🐡 ",
              s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-fish_id3_count"].join(""))),
              " Blowfish",
            ].join("")
          ),
          String("Fish ID: **f3**"),
          false
        );
      }
      if (
        s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-fish_id4"].join(""))) == "true" &&
        s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-fish_id4_count"].join(""))) > 0
      ) {
        embedMessageForBucketCmd.addField(
          String(
            [
              "🦐 ",
              s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-fish_id4_count"].join(""))),
              " Shrimp",
            ].join("")
          ),
          String("Fish ID: **f4**"),
          false
        );
      }
      if (
        s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-fish_id5"].join(""))) == "true" &&
        s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-fish_id5_count"].join(""))) > 0
      ) {
        embedMessageForBucketCmd.addField(
          String(
            [
              "🦞 ",
              s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-fish_id5_count"].join(""))),
              " Lobster",
            ].join("")
          ),
          String("Fish ID: **f5**"),
          false
        );
      }
      if (
        s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-fish_id6"].join(""))) == "true" &&
        s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-fish_id6_count"].join(""))) > 0
      ) {
        embedMessageForBucketCmd.addField(
          String(
            [
              "🦀 ",
              s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-fish_id6_count"].join(""))),
              " Crab",
            ].join("")
          ),
          String("Fish ID: **f6**"),
          false
        );
      }
      if (
        s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-fish_id7"].join(""))) == "true" &&
        s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-fish_id7_count"].join(""))) > 0
      ) {
        embedMessageForBucketCmd.addField(
          String(
            [
              "🦑 ",
              s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-fish_id7_count"].join(""))),
              " Squid",
            ].join("")
          ),
          String("Fish ID: **f7**"),
          false
        );
      }
      if (
        s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-fish_id8"].join(""))) == "true" &&
        s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-fish_id8_count"].join(""))) > 0
      ) {
        embedMessageForBucketCmd.addField(
          String(
            [
              "🐙 ",
              s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-fish_id8_count"].join(""))),
              " Octopus",
            ].join("")
          ),
          String("Fish ID: **f8**"),
          false
        );
      }
      if (
        s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-fish_id9"].join(""))) == "true" &&
        s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-fish_id9_count"].join(""))) > 0
      ) {
        embedMessageForBucketCmd.addField(
          String(
            [
              "🦈 ",
              s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-fish_id9_count"].join(""))),
              " Shark",
            ].join("")
          ),
          String("Fish ID: **f9**"),
          false
        );
      }
      if (
        s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-fish_id10"].join(""))) == "true" &&
        s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-fish_id10_count"].join(""))) > 0
      ) {
        embedMessageForBucketCmd.addField(
          String(
            [
              "🐋 ",
              s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-fish_id10_count"].join(""))),
              " Whale",
            ].join("")
          ),
          String("Fish ID: **f10**"),
          false
        );
      }

      s4dmessage.reply({
        embeds: [embedMessageForBucketCmd],
        allowedMentions: {
          repliedUser: true,
        },
      });
      return;
    } else if ((s4dmessage.content.toUpperCase() || "").startsWith("D!BUCKET" || "")) {
      try {
        var embedMessageForBucketCmd = new Discord.MessageEmbed();
        embedMessageForBucketCmd.setColor("#33ccff");
        embedMessageForBucketCmd.setTitle(
          String(
            ["🪣 ", s4d.client.users.cache.get(String(s4dmessage.mentions.members.first().id)).username, "'s bucket:"].join("")
          )
        );
        embedMessageForBucketCmd.setURL(String());
        if (
          s4d.database.get(
            String([(s4dmessage.guild || {}).id, "-<@", s4dmessage.mentions.members.first().id, ">-fish_id1"].join(""))
          ) == "false" &&
          s4d.database.get(
            String([(s4dmessage.guild || {}).id, "-<@", s4dmessage.mentions.members.first().id, ">-fish_id2"].join(""))
          ) == "false" &&
          s4d.database.get(
            String([(s4dmessage.guild || {}).id, "-<@", s4dmessage.mentions.members.first().id, ">-fish_id3"].join(""))
          ) == "false" &&
          s4d.database.get(
            String([(s4dmessage.guild || {}).id, "-<@", s4dmessage.mentions.members.first().id, ">-fish_id4"].join(""))
          ) == "false" &&
          s4d.database.get(
            String([(s4dmessage.guild || {}).id, "-<@", s4dmessage.mentions.members.first().id, ">-fish_id5"].join(""))
          ) == "false" &&
          s4d.database.get(
            String([(s4dmessage.guild || {}).id, "-<@", s4dmessage.mentions.members.first().id, ">-fish_id6"].join(""))
          ) == "false" &&
          s4d.database.get(
            String([(s4dmessage.guild || {}).id, "-<@", s4dmessage.mentions.members.first().id, ">-fish_id7"].join(""))
          ) == "false" &&
          s4d.database.get(
            String([(s4dmessage.guild || {}).id, "-<@", s4dmessage.mentions.members.first().id, ">-fish_id8"].join(""))
          ) == "false" &&
          s4d.database.get(
            String([(s4dmessage.guild || {}).id, "-<@", s4dmessage.mentions.members.first().id, ">-fish_id9"].join(""))
          ) == "false" &&
          s4d.database.get(
            String([(s4dmessage.guild || {}).id, "-<@", s4dmessage.mentions.members.first().id, ">-fish_id10"].join(""))
          ) == "false"
        ) {
          embedMessageForBucketCmd.addField(String("Nothing to see here"), String("Fishing is needed"), false);
        }
        if (
          s4d.database.get(
            String([(s4dmessage.guild || {}).id, "-<@", s4dmessage.mentions.members.first().id, ">-fish_id1"].join(""))
          ) == "true" &&
          s4d.database.get(
            String([(s4dmessage.guild || {}).id, "-<@", s4dmessage.mentions.members.first().id, ">-fish_id1_count"].join(""))
          ) > 0
        ) {
          embedMessageForBucketCmd.addField(
            String(
              [
                "🐟 ",
                s4d.database.get(
                  String(
                    [(s4dmessage.guild || {}).id, "-<@", s4dmessage.mentions.members.first().id, ">-fish_id1_count"].join("")
                  )
                ),
                " Classic fish",
              ].join("")
            ),
            String("Fish ID: **f1**"),
            false
          );
        }
        if (
          s4d.database.get(
            String([(s4dmessage.guild || {}).id, "-<@", s4dmessage.mentions.members.first().id, ">-fish_id2"].join(""))
          ) == "true" &&
          s4d.database.get(
            String([(s4dmessage.guild || {}).id, "-<@", s4dmessage.mentions.members.first().id, ">-fish_id2_count"].join(""))
          ) > 0
        ) {
          embedMessageForBucketCmd.addField(
            String(
              [
                "🐠 ",
                s4d.database.get(
                  String(
                    [(s4dmessage.guild || {}).id, "-<@", s4dmessage.mentions.members.first().id, ">-fish_id2_count"].join("")
                  )
                ),
                " Tropical fish",
              ].join("")
            ),
            String("Fish ID: **f2**"),
            false
          );
        }
        if (
          s4d.database.get(
            String([(s4dmessage.guild || {}).id, "-<@", s4dmessage.mentions.members.first().id, ">-fish_id3"].join(""))
          ) == "true" &&
          s4d.database.get(
            String([(s4dmessage.guild || {}).id, "-<@", s4dmessage.mentions.members.first().id, ">-fish_id3_count"].join(""))
          ) > 0
        ) {
          embedMessageForBucketCmd.addField(
            String(
              [
                "🐡 ",
                s4d.database.get(
                  String(
                    [(s4dmessage.guild || {}).id, "-<@", s4dmessage.mentions.members.first().id, ">-fish_id3_count"].join("")
                  )
                ),
                " Blowfish",
              ].join("")
            ),
            String("Fish ID: **f3**"),
            false
          );
        }
        if (
          s4d.database.get(
            String([(s4dmessage.guild || {}).id, "-<@", s4dmessage.mentions.members.first().id, ">-fish_id4"].join(""))
          ) == "true" &&
          s4d.database.get(
            String([(s4dmessage.guild || {}).id, "-<@", s4dmessage.mentions.members.first().id, ">-fish_id4_count"].join(""))
          ) > 0
        ) {
          embedMessageForBucketCmd.addField(
            String(
              [
                "🦐 ",
                s4d.database.get(
                  String(
                    [(s4dmessage.guild || {}).id, "-<@", s4dmessage.mentions.members.first().id, ">-fish_id4_count"].join("")
                  )
                ),
                " Shrimp",
              ].join("")
            ),
            String("Fish ID: **f4**"),
            false
          );
        }
        if (
          s4d.database.get(
            String([(s4dmessage.guild || {}).id, "-<@", s4dmessage.mentions.members.first().id, ">-fish_id5"].join(""))
          ) == "true" &&
          s4d.database.get(
            String([(s4dmessage.guild || {}).id, "-<@", s4dmessage.mentions.members.first().id, ">-fish_id5_count"].join(""))
          ) > 0
        ) {
          embedMessageForBucketCmd.addField(
            String(
              [
                "🦞 ",
                s4d.database.get(
                  String(
                    [(s4dmessage.guild || {}).id, "-<@", s4dmessage.mentions.members.first().id, ">-fish_id5_count"].join("")
                  )
                ),
                " Lobster",
              ].join("")
            ),
            String("Fish ID: **f5**"),
            false
          );
        }
        if (
          s4d.database.get(
            String([(s4dmessage.guild || {}).id, "-<@", s4dmessage.mentions.members.first().id, ">-fish_id6"].join(""))
          ) == "true" &&
          s4d.database.get(
            String([(s4dmessage.guild || {}).id, "-<@", s4dmessage.mentions.members.first().id, ">-fish_id6_count"].join(""))
          ) > 0
        ) {
          embedMessageForBucketCmd.addField(
            String(
              [
                "🦀 ",
                s4d.database.get(
                  String(
                    [(s4dmessage.guild || {}).id, "-<@", s4dmessage.mentions.members.first().id, ">-fish_id6_count"].join("")
                  )
                ),
                " Crab",
              ].join("")
            ),
            String("Fish ID: **f6**"),
            false
          );
        }
        if (
          s4d.database.get(
            String([(s4dmessage.guild || {}).id, "-<@", s4dmessage.mentions.members.first().id, ">-fish_id7"].join(""))
          ) == "true" &&
          s4d.database.get(
            String([(s4dmessage.guild || {}).id, "-<@", s4dmessage.mentions.members.first().id, ">-fish_id7_count"].join(""))
          ) > 0
        ) {
          embedMessageForBucketCmd.addField(
            String(
              [
                "🦑 ",
                s4d.database.get(
                  String(
                    [(s4dmessage.guild || {}).id, "-<@", s4dmessage.mentions.members.first().id, ">-fish_id7_count"].join("")
                  )
                ),
                " Squid",
              ].join("")
            ),
            String("Fish ID: **f7**"),
            false
          );
        }
        if (
          s4d.database.get(
            String([(s4dmessage.guild || {}).id, "-<@", s4dmessage.mentions.members.first().id, ">-fish_id8"].join(""))
          ) == "true" &&
          s4d.database.get(
            String([(s4dmessage.guild || {}).id, "-<@", s4dmessage.mentions.members.first().id, ">-fish_id8_count"].join(""))
          ) > 0
        ) {
          embedMessageForBucketCmd.addField(
            String(
              [
                "🐙 ",
                s4d.database.get(
                  String(
                    [(s4dmessage.guild || {}).id, "-<@", s4dmessage.mentions.members.first().id, ">-fish_id8_count"].join("")
                  )
                ),
                " Octopus",
              ].join("")
            ),
            String("Fish ID: **f8**"),
            false
          );
        }
        if (
          s4d.database.get(
            String([(s4dmessage.guild || {}).id, "-<@", s4dmessage.mentions.members.first().id, ">-fish_id9"].join(""))
          ) == "true" &&
          s4d.database.get(
            String([(s4dmessage.guild || {}).id, "-<@", s4dmessage.mentions.members.first().id, ">-fish_id9_count"].join(""))
          ) > 0
        ) {
          embedMessageForBucketCmd.addField(
            String(
              [
                "🦈 ",
                s4d.database.get(
                  String(
                    [(s4dmessage.guild || {}).id, "-<@", s4dmessage.mentions.members.first().id, ">-fish_id9_count"].join("")
                  )
                ),
                " Shark",
              ].join("")
            ),
            String("Fish ID: **f9**"),
            false
          );
        }
        if (
          s4d.database.get(
            String([(s4dmessage.guild || {}).id, "-<@", s4dmessage.mentions.members.first().id, ">-fish_id10"].join(""))
          ) == "true" &&
          s4d.database.get(
            String([(s4dmessage.guild || {}).id, "-<@", s4dmessage.mentions.members.first().id, ">-fish_id10_count"].join(""))
          ) > 0
        ) {
          embedMessageForBucketCmd.addField(
            String(
              [
                "🐋 ",
                s4d.database.get(
                  String(
                    [(s4dmessage.guild || {}).id, "-<@", s4dmessage.mentions.members.first().id, ">-fish_id10_count"].join("")
                  )
                ),
                " Whale",
              ].join("")
            ),
            String("Fish ID: **f10**"),
            false
          );
        }

        s4dmessage.reply({
          embeds: [embedMessageForBucketCmd],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      } catch (err) {
        s4dmessage.reply({
          content: String(String(s4dmessage.author) + ", can you mention an user?"),
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
    }

    /*
    D!SELL F1
    */
    if (
      s4dmessage.content.toUpperCase() == "D!SELL F1" ||
      (s4dmessage.content.toUpperCase() || "").startsWith("D!SELL FISH" || "")
    ) {
      if (
        !(
          s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-fish_id1"].join(""))) == "true" &&
          s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-fish_id1_count"].join(""))) > 0
        )
      ) {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("You don't have that fish!"),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      s4d.database.subtract(
        String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-fish_id1_count"].join("")),
        parseInt(1)
      );
      if (s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-fish_id1_count"].join(""))) <= 0) {
        s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-fish_id1"].join("")), "false");
      }
      s4d.database.add(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-money"].join("")), parseInt(7));
      s4dmessage.reply({
        embeds: [
          {
            color: String("#33ff33"),
            title: String("✅ Sold successfully"),
            description: String("You sold **1 Classic fish** and you got **7$**"),
          },
        ],
        allowedMentions: {
          repliedUser: true,
        },
      });
      return;
    }

    /*
    D!SELL F2
    */
    if (
      (s4dmessage.content.toUpperCase() || "").startsWith("D!SELL F2" || "") ||
      (s4dmessage.content.toUpperCase() || "").startsWith("D!SELL TROPICAL FISH" || "")
    ) {
      if (
        !(
          s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-fish_id2"].join(""))) == "true" &&
          s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-fish_id2_count"].join(""))) > 0
        )
      ) {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("You don't have that fish!"),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      s4d.database.subtract(
        String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-fish_id2_count"].join("")),
        parseInt(1)
      );
      if (s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-fish_id2_count"].join(""))) <= 0) {
        s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-fish_id2"].join("")), "false");
      }
      s4d.database.add(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-money"].join("")), parseInt(15));
      s4dmessage.reply({
        embeds: [
          {
            color: String("#33ff33"),
            title: String("✅ Sold successfully"),
            description: String("You sold **1 Tropical fish** and you got **15$**"),
          },
        ],
        allowedMentions: {
          repliedUser: true,
        },
      });
      return;
    }

    /*
    D!SELL F3
    */
    if (
      (s4dmessage.content.toUpperCase() || "").startsWith("D!SELL F3" || "") ||
      (s4dmessage.content.toLowerCase() || "").startsWith("d!sell blowfish" || "")
    ) {
      if (
        !(
          s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-fish_id3"].join(""))) == "true" &&
          s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-fish_id3_count"].join(""))) > 0
        )
      ) {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("You don't have that fish!"),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      s4d.database.subtract(
        String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-fish_id3_count"].join("")),
        parseInt(1)
      );
      if (s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-fish_id3_count"].join(""))) <= 0) {
        s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-fish_id3"].join("")), "false");
      }
      s4d.database.add(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-money"].join("")), parseInt(20));
      s4dmessage.reply({
        embeds: [
          {
            color: String("#33ff33"),
            title: String("✅ Sold successfully"),
            description: String("You sold **1 Blowfish** and you got **20$**"),
          },
        ],
        allowedMentions: {
          repliedUser: true,
        },
      });
      return;
    }

    /*
    D!SELL F4
    */
    if (
      (s4dmessage.content.toUpperCase() || "").startsWith("D!SELL F4" || "") ||
      (s4dmessage.content.toUpperCase() || "").startsWith("D!SELL SHRIMP" || "")
    ) {
      if (
        !(
          s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-fish_id4"].join(""))) == "true" &&
          s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-fish_id4_count"].join(""))) > 0
        )
      ) {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("You don't have that fish!"),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      s4d.database.subtract(
        String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-fish_id4_count"].join("")),
        parseInt(1)
      );
      if (s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-fish_id4_count"].join(""))) <= 0) {
        s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-fish_id4"].join("")), "false");
      }
      s4d.database.add(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-money"].join("")), parseInt(22));
      s4dmessage.reply({
        embeds: [
          {
            color: String("#33ff33"),
            title: String("✅ Sold successfully"),
            description: String("You sold **1 Shrimp** and you got **22$**"),
          },
        ],
        allowedMentions: {
          repliedUser: true,
        },
      });
      return;
    }

    /*
    D!SELL F5
    */
    if (
      (s4dmessage.content.toUpperCase() || "").startsWith("D!SELL F5" || "") ||
      (s4dmessage.content.toUpperCase() || "").startsWith("D!SELL LOBSTER" || "")
    ) {
      if (
        !(
          s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-fish_id5"].join(""))) == "true" &&
          s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-fish_id5_count"].join(""))) > 0
        )
      ) {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("You don't have that fish!"),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      s4d.database.subtract(
        String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-fish_id5_count"].join("")),
        parseInt(1)
      );
      if (s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-fish_id5_count"].join(""))) <= 0) {
        s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-fish_id5"].join("")), "false");
      }
      s4d.database.add(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-money"].join("")), parseInt(90));
      s4dmessage.reply({
        embeds: [
          {
            color: String("#33ff33"),
            title: String("✅ Sold successfully"),
            description: String("You sold **1 Lobster** and you got **90$**"),
          },
        ],
        allowedMentions: {
          repliedUser: true,
        },
      });
      return;
    }

    /*
    D!SELL F6
    */
    if (
      (s4dmessage.content.toUpperCase() || "").startsWith("D!SELL F6" || "") ||
      (s4dmessage.content.toUpperCase() || "").startsWith("D!SELL CRAB" || "")
    ) {
      if (
        !(
          s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-fish_id6"].join(""))) == "true" &&
          s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-fish_id6_count"].join(""))) > 0
        )
      ) {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("You don't have that fish!"),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      s4d.database.subtract(
        String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-fish_id6_count"].join("")),
        parseInt(1)
      );
      if (s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-fish_id6_count"].join(""))) <= 0) {
        s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-fish_id6"].join("")), "false");
      }
      s4d.database.add(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-money"].join("")), parseInt(150));
      s4dmessage.reply({
        embeds: [
          {
            color: String("#33ff33"),
            title: String("✅ Sold successfully"),
            description: String("You sold **1 Crab** and you got **150$**"),
          },
        ],
        allowedMentions: {
          repliedUser: true,
        },
      });
      return;
    }

    /*
    D!SELL F7
    */
    if (
      (s4dmessage.content.toUpperCase() || "").startsWith("D!SELL F7" || "") ||
      (s4dmessage.content.toUpperCase() || "").startsWith("D!SELL SQUID" || "")
    ) {
      if (
        !(
          s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-fish_id7"].join(""))) == "true" &&
          s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-fish_id7_count"].join(""))) > 0
        )
      ) {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("You don't have that fish!"),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      s4d.database.subtract(
        String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-fish_id7_count"].join("")),
        parseInt(1)
      );
      if (s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-fish_id7_count"].join(""))) <= 0) {
        s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-fish_id7"].join("")), "false");
      }
      s4d.database.add(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-money"].join("")), parseInt(27));
      s4dmessage.reply({
        embeds: [
          {
            color: String("#33ff33"),
            title: String("✅ Sold successfully"),
            description: String("You sold **1 Squid** and you got **27$**"),
          },
        ],
        allowedMentions: {
          repliedUser: true,
        },
      });
      return;
    }

    /*
    D!SELL F8
    */
    if (
      (s4dmessage.content.toUpperCase() || "").startsWith("D!SELL F8" || "") ||
      (s4dmessage.content.toUpperCase() || "").startsWith("D!SELL OCTOPUS" || "")
    ) {
      if (
        !(
          s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-fish_id8"].join(""))) == "true" &&
          s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-fish_id8_count"].join(""))) > 0
        )
      ) {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("You don't have that fish!"),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      s4d.database.subtract(
        String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-fish_id8_count"].join("")),
        parseInt(1)
      );
      if (s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-fish_id8_count"].join(""))) <= 0) {
        s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-fish_id8"].join("")), "false");
      }
      s4d.database.add(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-money"].join("")), parseInt(20));
      s4dmessage.reply({
        embeds: [
          {
            color: String("#33ff33"),
            title: String("✅ Sold successfully"),
            description: String("You sold **1 Octopus** and you got **20$**"),
          },
        ],
        allowedMentions: {
          repliedUser: true,
        },
      });
      return;
    }

    /*
    D!SELL F9
    */
    if (
      (s4dmessage.content.toUpperCase() || "").startsWith("D!SELL F9" || "") ||
      (s4dmessage.content.toUpperCase() || "").startsWith("D!SELL SHARK" || "")
    ) {
      if (
        !(
          s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-fish_id9"].join(""))) == "true" &&
          s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-fish_id9_count"].join(""))) > 0
        )
      ) {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("You don't have that fish!"),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      s4d.database.subtract(
        String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-fish_id9_count"].join("")),
        parseInt(1)
      );
      if (s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-fish_id9_count"].join(""))) <= 0) {
        s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-fish_id9"].join("")), "false");
      }
      s4d.database.add(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-money"].join("")), parseInt(3));
      s4dmessage.reply({
        embeds: [
          {
            color: String("#33ff33"),
            title: String("✅ Sold successfully"),
            description: String("You sold **1 Shark** and you got **3$**"),
          },
        ],
        allowedMentions: {
          repliedUser: true,
        },
      });
      return;
    }

    /*
    D!SELL F10
    */
    if (
      (s4dmessage.content.toUpperCase() || "").startsWith("D!SELL F10" || "") ||
      (s4dmessage.content.toUpperCase() || "").startsWith("D!SELL WHALE" || "")
    ) {
      if (
        !(
          s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-fish_id10"].join(""))) == "true" &&
          s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-fish_id10_count"].join(""))) > 0
        )
      ) {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("You don't have that fish!"),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      s4d.database.subtract(
        String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-fish_id10_count"].join("")),
        parseInt(1)
      );
      if (s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-fish_id10_count"].join(""))) <= 0) {
        s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-fish_id10"].join("")), "false");
      }
      s4d.database.add(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-money"].join("")), parseInt(300));
      s4dmessage.reply({
        embeds: [
          {
            color: String("#33ff33"),
            title: String("✅ Sold successfully"),
            description: String("You sold **1 Whale** and you got **300$**"),
          },
        ],
        allowedMentions: {
          repliedUser: true,
        },
      });
      return;
    }

    /*
    D!CONFIG
    */
    if (
      (s4dmessage.content.toUpperCase() || "").startsWith("D!CONFIG" || "") ||
      (s4dmessage.content.toUpperCase() || "").startsWith("D!SETUP" || "")
    ) {
      var embedMessageForSetupCmd = new Discord.MessageEmbed();
      embedMessageForSetupCmd.setColor("#000099");
      embedMessageForSetupCmd.setTitle(String(["⚙️ ", s4dmessage.guild.name, "'s Bot settings"].join("")));
      embedMessageForSetupCmd.setURL(String());
      if (s4d.database.get(String(String(s4dmessage.guild.id) + "-modcmd")) == "true") {
        embedMessageForSetupCmd.addField(
          String("✅ Moderation commands"),
          String(["🔨 Moderation commands are: **ON**", "\n", "Type **d!modcmd off** to disable them"].join("")),
          false
        );
      } else {
        embedMessageForSetupCmd.addField(
          String("❌ Moderation commands"),
          String(["🔨 Moderation commands are: **OFF**", "\n", "Type **d!modcmd on** to enable them"].join("")),
          false
        );
      }
      if (s4d.database.get(String(String(s4dmessage.guild.id) + "-musicmd")) == "true") {
        embedMessageForSetupCmd.addField(
          String("✅ Music commands"),
          String(["🎵 Music commands are: **ON**", "\n", "Type **d!musicmd off** to disable them"].join("")),
          false
        );
      } else {
        embedMessageForSetupCmd.addField(
          String("❌ Music commands"),
          String(["🎵 Music commands are: **OFF**", "\n", "Type **d!musicmd on** to enable them"].join("")),
          false
        );
      }
      if (s4d.database.get(String(String(s4dmessage.guild.id) + "-eventcmd")) == "true") {
        embedMessageForSetupCmd.addField(
          String("✅ Events"),
          String(["🎉 Bot events are: **ON**", "\n", "Type **d!eventcmd off** to disable them"].join("")),
          false
        );
      } else {
        embedMessageForSetupCmd.addField(
          String("❌ Events"),
          String(["🎉 Bot events are: **OFF**", "\n", "Type **d!eventcmd on** to enable them"].join("")),
          false
        );
      }

      s4dmessage.reply({
        embeds: [embedMessageForSetupCmd],
        allowedMentions: {
          repliedUser: true,
        },
      });
      return;
    }

    /*
    D!MODCMD
    */
    if (s4dmessage.content.toUpperCase() == "D!MODCMD") {
      if (!s4dmessage.member.permissions.has(Permissions.FLAGS.MANAGE_GUILD)) {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("You do not have the permission to perform this command!"),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      s4dmessage.reply({
        embeds: [
          {
            color: String("#ff0000"),
            title: String("❌ Error"),
            description: String("Correct command: **d!modcmd on/off**"),
          },
        ],
        allowedMentions: {
          repliedUser: true,
        },
      });
      return;
    } else if ((s4dmessage.content.toUpperCase() || "").startsWith("D!MODCMD ON" || "")) {
      if (!s4dmessage.member.permissions.has(Permissions.FLAGS.MANAGE_GUILD)) {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("You do not have the permission to perform this command!"),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      s4d.database.set(String(String(s4dmessage.guild.id) + "-modcmd"), "true");
      s4dmessage.reply({
        embeds: [
          {
            color: String("#33ff33"),
            title: String("✅ Done"),
            description: String("🔨 Moderation commands are now: **ON**"),
            footer: {
              text: String("You are able to use them now"),
              icon_url: String(),
            },
          },
        ],
        allowedMentions: {
          repliedUser: true,
        },
      });
      return;
    } else if ((s4dmessage.content.toUpperCase() || "").startsWith("D!MODCMD OFF" || "")) {
      if (!s4dmessage.member.permissions.has(Permissions.FLAGS.MANAGE_GUILD)) {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("You do not have the permission to perform this command!"),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      s4d.database.set(String(String(s4dmessage.guild.id) + "-modcmd"), "false");
      s4dmessage.reply({
        embeds: [
          {
            color: String("#33ff33"),
            title: String("✅ Done"),
            description: String("🔨 Moderation commands are now: **OFF**"),
            footer: {
              text: String("You are NOT able to use them now"),
              icon_url: String(),
            },
          },
        ],
        allowedMentions: {
          repliedUser: true,
        },
      });
      return;
    }

    /*
    D!MUSICMD
    */
    if (s4dmessage.content.toUpperCase() == "D!MUSICMD") {
      if (!s4dmessage.member.permissions.has(Permissions.FLAGS.MANAGE_GUILD)) {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("You do not have the permission to perform this command!"),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      s4dmessage.reply({
        embeds: [
          {
            color: String("#ff0000"),
            title: String("❌ Error"),
            description: String("Correct command: **d!musicmd on/off**"),
          },
        ],
        allowedMentions: {
          repliedUser: true,
        },
      });
      return;
    } else if ((s4dmessage.content.toUpperCase() || "").startsWith("D!MUSICMD ON" || "")) {
      if (!s4dmessage.member.permissions.has(Permissions.FLAGS.MANAGE_GUILD)) {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("You do not have the permission to perform this command!"),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      s4d.database.set(String(String(s4dmessage.guild.id) + "-musicmd"), "true");
      s4dmessage.reply({
        embeds: [
          {
            color: String("#33ff33"),
            title: String("✅ Done"),
            description: String("🎵 Music commands are now: **ON**"),
            footer: {
              text: String("You are able to use them now"),
              icon_url: String(),
            },
          },
        ],
        allowedMentions: {
          repliedUser: true,
        },
      });
      return;
    } else if ((s4dmessage.content.toUpperCase() || "").startsWith("D!MUSICMD OFF" || "")) {
      if (!s4dmessage.member.permissions.has(Permissions.FLAGS.MANAGE_GUILD)) {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("You do not have the permission to perform this command!"),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      s4d.database.set(String(String(s4dmessage.guild.id) + "-musicmd"), "false");
      s4dmessage.reply({
        embeds: [
          {
            color: String("#33ff33"),
            title: String("✅ Done"),
            description: String("🎵 Music commands are now: **OFF**"),
            footer: {
              text: String("You are NOT able to use them now"),
              icon_url: String(),
            },
          },
        ],
        allowedMentions: {
          repliedUser: true,
        },
      });
      return;
    }

    /*
    D!EVENTCMD
    */
    if (s4dmessage.content.toUpperCase() == "D!EVENTCMD") {
      if (!s4dmessage.member.permissions.has(Permissions.FLAGS.MANAGE_GUILD)) {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("You do not have the permission to perform this command!"),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      s4dmessage.reply({
        embeds: [
          {
            color: String("#ff0000"),
            title: String("❌ Error"),
            description: String("Correct command: **d!eventcmd on/off**"),
          },
        ],
        allowedMentions: {
          repliedUser: true,
        },
      });
      return;
    } else if ((s4dmessage.content.toUpperCase() || "").startsWith("D!EVENTCMD ON" || "")) {
      if (!s4dmessage.member.permissions.has(Permissions.FLAGS.MANAGE_GUILD)) {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("You do not have the permission to perform this command!"),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      s4d.database.set(String(String(s4dmessage.guild.id) + "-eventcmd"), "true");
      s4dmessage.reply({
        embeds: [
          {
            color: String("#33ff33"),
            title: String("✅ Done"),
            description: String("🎉 Bot events are now: **ON**"),
            footer: {
              text: String("More info about events: https://discord.gg/KxadTdz"),
              icon_url: String(),
            },
          },
        ],
        allowedMentions: {
          repliedUser: true,
        },
      });
      return;
    } else if ((s4dmessage.content.toUpperCase() || "").startsWith("D!EVENTCMD OFF" || "")) {
      if (!s4dmessage.member.permissions.has(Permissions.FLAGS.MANAGE_GUILD)) {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("You do not have the permission to perform this command!"),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      s4d.database.set(String(String(s4dmessage.guild.id) + "-eventcmd"), "false");
      s4dmessage.reply({
        embeds: [
          {
            color: String("#33ff33"),
            title: String("✅ Done"),
            description: String("🎉 Bot events are now: **OFF**"),
            footer: {
              text: String("More info about events: https://discord.gg/KxadTdz"),
              icon_url: String(),
            },
          },
        ],
        allowedMentions: {
          repliedUser: true,
        },
      });
      return;
    }

    /*
    D!CODE
    */
    arguments = s4dmessage.content.split(" ");
    command = arguments.splice(1, 1)[0];
    if (s4dmessage.content.toUpperCase() == "D!CODE") {
      s4dmessage.reply({
        embeds: [
          {
            color: String("#ff6600"),
            title: String("Available commands: "),
            description: String(
              [
                "**Please put SHORT LINES of code or the commands will not work properly!**",
                "\n",
                "\n",
                "d!code java <string>",
                "\n",
                "d!code js <string>",
                "\n",
                "d!code c <string>",
                "\n",
                "d!code c++ <string>",
                "\n",
                "d!code c# <string>",
                "\n",
                "d!code css <string>",
                "\n",
                "d!code html <string>",
                "\n",
                "d!code kotlin <string>",
                "\n",
                "d!code py <string>",
                "\n",
                "d!code php <string>",
                "\n",
                "d!code ts <string>",
                "\n",
                "d!code lua <string>",
              ].join("")
            ),
          },
        ],
        allowedMentions: {
          repliedUser: true,
        },
      });
      return;
    }

    /*
    D!CODE JAVA
    */
    if ((s4dmessage.content.toUpperCase() || "").startsWith("D!CODE JAVA" || "")) {
      await delay(Number(1) * 1000);
      s4dmessage.reply({
        embeds: [
          {
            color: String("#336666"),
            title: String("Here is your code in Java, " + String(s4dmessage.author.username)),
            description: String(["```java", "\n", arguments.join(" "), "```"].join("")),
          },
        ],
        allowedMentions: {
          repliedUser: true,
        },
      });
      await delay(Number(1) * 1000);
      s4dmessage.delete();
      return;
    }

    /*
    D!CODE JS
    */
    if ((s4dmessage.content.toUpperCase() || "").startsWith("D!CODE JS" || "")) {
      await delay(Number(1) * 1000);
      s4dmessage.reply({
        embeds: [
          {
            color: String("#336666"),
            title: String("Here is your code in JavaScript, " + String(s4dmessage.author.username)),
            description: String(["```js", "\n", arguments.join(" "), "```"].join("")),
          },
        ],
        allowedMentions: {
          repliedUser: true,
        },
      });
      await delay(Number(1) * 1000);
      s4dmessage.delete();
      return;
    }

    /*
    D!CODE C
    */
    if ((s4dmessage.content.toUpperCase() || "").startsWith("D!CODE C" || "")) {
      await delay(Number(1) * 1000);
      s4dmessage.reply({
        embeds: [
          {
            color: String("#336666"),
            title: String("Here is your code in C, " + String(s4dmessage.author.username)),
            description: String(["```c", "\n", arguments.join(" "), "```"].join("")),
          },
        ],
        allowedMentions: {
          repliedUser: true,
        },
      });
      await delay(Number(1) * 1000);
      s4dmessage.delete();
      return;
    }

    /*
    D!CODE C++
    */
    if ((s4dmessage.content.toUpperCase() || "").startsWith("D!CODE C++" || "")) {
      await delay(Number(1) * 1000);
      s4dmessage.reply({
        embeds: [
          {
            color: String("#336666"),
            title: String("Here is your code in C++, " + String(s4dmessage.author.username)),
            description: String(["```c++", "\n", arguments.join(" "), "```"].join("")),
          },
        ],
        allowedMentions: {
          repliedUser: true,
        },
      });
      await delay(Number(1) * 1000);
      s4dmessage.delete();
      return;
    }

    /*
    D!CODE C#
    */
    if ((s4dmessage.content.toUpperCase() || "").startsWith("D!CODE C#" || "")) {
      await delay(Number(1) * 1000);
      s4dmessage.reply({
        embeds: [
          {
            color: String("#336666"),
            title: String("Here is your code in C#, " + String(s4dmessage.author.username)),
            description: String(["```c#", "\n", arguments.join(" "), "```"].join("")),
          },
        ],
        allowedMentions: {
          repliedUser: true,
        },
      });
      await delay(Number(1) * 1000);
      s4dmessage.delete();
      return;
    }

    /*
    D!CODE CSS
    */
    if ((s4dmessage.content.toUpperCase() || "").startsWith("D!CODE CSS" || "")) {
      await delay(Number(1) * 1000);
      s4dmessage.reply({
        embeds: [
          {
            color: String("#336666"),
            title: String("Here is your code in CSS, " + String(s4dmessage.author.username)),
            description: String(["```css", "\n", arguments.join(" "), "```"].join("")),
          },
        ],
        allowedMentions: {
          repliedUser: true,
        },
      });
      await delay(Number(1) * 1000);
      s4dmessage.delete();
      return;
    }

    /*
    D!CODE HTML
    */
    if ((s4dmessage.content.toUpperCase() || "").startsWith("D!CODE HTML" || "")) {
      await delay(Number(1) * 1000);
      s4dmessage.reply({
        embeds: [
          {
            color: String("#336666"),
            title: String("Here is your code in HTML, " + String(s4dmessage.author.username)),
            description: String(["```html", "\n", arguments.join(" "), "```"].join("")),
          },
        ],
        allowedMentions: {
          repliedUser: true,
        },
      });
      await delay(Number(1) * 1000);
      s4dmessage.delete();
      return;
    }

    /*
    D!CODE KOTLIN
    */
    if ((s4dmessage.content.toUpperCase() || "").startsWith("D!CODE KOTLIN" || "")) {
      await delay(Number(1) * 1000);
      s4dmessage.reply({
        embeds: [
          {
            color: String("#336666"),
            title: String("Here is your code in Kotlin, " + String(s4dmessage.author.username)),
            description: String(["```kotlin", "\n", arguments.join(" "), "```"].join("")),
          },
        ],
        allowedMentions: {
          repliedUser: true,
        },
      });
      await delay(Number(1) * 1000);
      s4dmessage.delete();
      return;
    }

    /*
    D!CODE PY
    */
    if ((s4dmessage.content.toUpperCase() || "").startsWith("D!CODE PY" || "")) {
      await delay(Number(1) * 1000);
      s4dmessage.reply({
        embeds: [
          {
            color: String("#336666"),
            title: String("Here is your code in Python, " + String(s4dmessage.author.username)),
            description: String(["```py", "\n", arguments.join(" "), "```"].join("")),
          },
        ],
        allowedMentions: {
          repliedUser: true,
        },
      });
      await delay(Number(1) * 1000);
      s4dmessage.delete();
      return;
    }

    /*
    D!CODE PHP
    */
    if ((s4dmessage.content.toUpperCase() || "").startsWith("D!CODE PHP" || "")) {
      await delay(Number(1) * 1000);
      s4dmessage.reply({
        embeds: [
          {
            color: String("#336666"),
            title: String("Here is your code in PHP, " + String(s4dmessage.author.username)),
            description: String(["```php", "\n", arguments.join(" "), "```"].join("")),
          },
        ],
        allowedMentions: {
          repliedUser: true,
        },
      });
      await delay(Number(1) * 1000);
      s4dmessage.delete();
      return;
    }

    /*
    D!CODE TS
    */
    if ((s4dmessage.content.toUpperCase() || "").startsWith("D!CODE TS" || "")) {
      await delay(Number(1) * 1000);
      s4dmessage.reply({
        embeds: [
          {
            color: String("#336666"),
            title: String("Here is your code in TypeScript, " + String(s4dmessage.author.username)),
            description: String(["```ts", "\n", arguments.join(" "), "```"].join("")),
          },
        ],
        allowedMentions: {
          repliedUser: true,
        },
      });
      await delay(Number(1) * 1000);
      s4dmessage.delete();
      return;
    }

    /*
    D!CODE LUA
    */
    if ((s4dmessage.content.toUpperCase() || "").startsWith("D!CODE LUA" || "")) {
      await delay(Number(1) * 1000);
      s4dmessage.reply({
        embeds: [
          {
            color: String("#336666"),
            title: String("Here is your code in Lua, " + String(s4dmessage.author.username)),
            description: String(["```lua", "\n", arguments.join(" "), "```"].join("")),
          },
        ],
        allowedMentions: {
          repliedUser: true,
        },
      });
      await delay(Number(1) * 1000);
      s4dmessage.delete();
      return;
    }

    /*
    D!POLL
    */
    arguments = s4dmessage.content.split(" ");
    command = arguments.splice(0, 1)[0];
    if (s4dmessage.content.toUpperCase() == "D!POLL") {
      s4dmessage.reply({
        embeds: [
          {
            color: String("#ff0000"),
            title: String("❌ Error"),
            description: String("Correct command: **d!poll <text for the poll>**"),
          },
        ],
        allowedMentions: {
          repliedUser: true,
        },
      });
      return;
    } else if ((command.toUpperCase() || "").startsWith("D!POLL" || "")) {
      s4dmessage
        .reply({
          embeds: [
            {
              color: String("#999900"),
              title: String(["**", s4dmessage.author.username, "'s poll:** "].join("")),
              description: String(arguments.join(" ")),
              thumbnail: {
                url: String(
                  "https://cdn.discordapp.com/attachments/916701043738423336/926066158526935040/jMOKNXhQHEQAAAAAAOv4HgIQfYyECKOUAAAAASUVORK5CYII.png"
                ),
              },
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        })
        .then(async (s4dfrost_real_reply) => {
          s4dfrost_real_reply.react("👍");
          s4dfrost_real_reply.react("👎");
          s4dfrost_real_reply.react("🤷‍♂️");
        });
      await delay(Number(2) * 1000);
      s4dmessage.delete();
      return;
    }

    /*
    D!3POLL
    */
    arguments = s4dmessage.content.split(" ");
    command = arguments.splice(0, 1)[0];
    poll3Arguments = s4dmessage.content.split("|");
    if (s4dmessage.content.toUpperCase() == "D!3POLL") {
      s4dmessage.reply({
        embeds: [
          {
            color: String("#ff0000"),
            title: String("❌ Error"),
            description: String("Correct command: **d!3poll <|text1|text2|text3>**"),
          },
        ],
        allowedMentions: {
          repliedUser: true,
        },
      });
      return;
    } else if ((command.toUpperCase() || "").startsWith("D!3POLL" || "")) {
      s4dmessage
        .reply({
          embeds: [
            {
              color: String("#999900"),
              title: String(["**", s4dmessage.author.username, "'s poll:** "].join("")),
              description: String(
                ["A) ", poll3Arguments[1], "\n", "B) ", poll3Arguments[2], "\n", "C) ", poll3Arguments.slice(-1)[0], "\n"].join(
                  ""
                )
              ),
              thumbnail: {
                url: String(
                  "https://cdn.discordapp.com/attachments/916701043738423336/926066158526935040/jMOKNXhQHEQAAAAAAOv4HgIQfYyECKOUAAAAASUVORK5CYII.png"
                ),
              },
              footer: {
                text: String("Remember to use the correct format, type d!3poll"),
                icon_url: String(),
              },
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        })
        .then(async (s4dfrost_real_reply) => {
          s4dfrost_real_reply.react("🇦");
          s4dfrost_real_reply.react("🇧");
          s4dfrost_real_reply.react("🇨");
        });
      await delay(Number(2) * 1000);
      s4dmessage.delete();
      return;
    }

    /*
    D!STATS
    */
    if (s4dmessage.content.toUpperCase() == "D!STATS") {
      s4dmessage.reply({
        embeds: [
          {
            color: String("#000099"),
            title: String("Your stats: "),
            description: String(
              [
                "**Username:** " + String(s4dmessage.author.tag),
                "\n",
                "\n",
                "**ID:** " + String(s4dmessage.author.id),
                "\n",
                "\n",
                "**Join date:** " + String(String(s4dmessage.author.joinedAt)),
                "\n",
                "\n",
                "**Account creation date:** " + String(moment(s4dmessage.author.createdAt).format("LLLL")),
                "\n",
                "\n",
                "**Profile picture:**",
              ].join("")
            ),
            image: {
              url: String(
                s4dmessage.author.displayAvatarURL({
                  format: "png",
                })
              ),
            },
          },
        ],
        allowedMentions: {
          repliedUser: true,
        },
      });
      return;
    } else if ((s4dmessage.content.toUpperCase() || "").startsWith("D!STATS" || "")) {
      try {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#000099"),
              title: String(
                String(s4d.client.users.cache.get(String(s4dmessage.mentions.members.first().id)).username) + "'s stats: "
              ),
              description: String(
                [
                  "**Username:** " + String(s4d.client.users.cache.get(String(s4dmessage.mentions.members.first().id)).tag),
                  "\n",
                  "\n",
                  "**ID:** " + String(s4dmessage.mentions.members.first().id),
                  "\n",
                  "\n",
                  "**Join date:** " + String(String(s4dmessage.mentions.members.first().joinedAt)),
                  "\n",
                  "\n",
                  "**Account creation date:** " + String(moment(s4dmessage.mentions.members.first().createdAt).format("LLLL")),
                  "\n",
                  "\n",
                  "**Profile picture:**",
                ].join("")
              ),
              image: {
                url: String(
                  s4dmessage.mentions.members.first().displayAvatarURL({
                    format: "png",
                  })
                ),
              },
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      } catch (err) {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("Please ping a valid user"),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
    }

    /*
    D!SERVER
    */
    if ((s4dmessage.content.toUpperCase() || "").startsWith("D!SERVER" || "")) {
      s4dmessage.reply({
        embeds: [
          {
            color: String("#000099"),
            title: String(String(s4dmessage.guild.name) + "'s stats:"),
            description: String(
              [
                ["Server administator: ", "<@", String(s4dmessage.guild.ownerId), ">"].join(""),
                "\n",
                "\n",
                ["Server ID: `", s4dmessage.guild.id, "`"].join(""),
                "\n",
                "\n",
                ["Server creation date: `", s4dmessage.guild.createdAt, "`"].join(""),
                "\n",
                "\n",
                ["Server boosts: **", s4dmessage.guild.premiumSubscriptionCount, "**"].join(""),
                "\n",
                "\n",
                ["Boost level: `", s4dmessage.guild.premiumTier, "`"].join(""),
                "\n",
                "\n",
                ["Total users: `", s4dmessage.guild.memberCount, "`"].join(""),
                "\n",
                "\n",
                ["Members: `", s4dmessage.guild.members.cache.filter((m) => !m.user.bot).size, "`"].join(""),
                "\n",
                "\n",
                ["Bots: `", s4dmessage.guild.members.cache.filter((m) => m.user.bot).size, "`"].join(""),
                "\n",
                "\n",
                [
                  "Number of text channels: `",
                  s4dmessage.guild.channels.cache.filter((m) => m.type === "GUILD_TEXT").size,
                  "`",
                ].join(""),
                "\n",
                "\n",
                [
                  "Number of voice channels: `",
                  s4dmessage.guild.channels.cache.filter((m) => m.type === "GUILD_VOICE").size,
                  "`",
                ].join(""),
                "\n",
                "\n",
                ["Role slots: `", s4dmessage.guild.roles.cache.size, "/250`"].join(""),
                "\n",
                "\n",
                "**Server icon:**",
              ].join("")
            ),
            image: {
              url: String(
                s4dmessage.guild.iconURL({
                  dynamic: true,
                })
              ),
            },
          },
        ],
        allowedMentions: {
          repliedUser: true,
        },
      });
      return;
    }

    /*
    D!STATUS
    */
    if ((s4dmessage.content.toUpperCase() || "").startsWith("D!STATUS" || "")) {
      os.cpuUsage(async function (v) {
        var obj = v * 100;
        s4dmessage.reply({
          embeds: [
            {
              color: String("#990000"),
              title: String("Main server status: "),
              description: String("Here you call see all the stats: "),
              fields: [
                {
                  name: "Discord stats:",
                  value: [
                    "Total server: `",
                    s4d.client.guilds.cache.size,
                    "`",
                    "\n",
                    "Total members: `",
                    s4d.client.users.cache.size,
                    "`",
                    "\n",
                    "Ping: `",
                    s4d.client.ws.ping,
                    "ms`",
                  ].join(""),
                  inline: false,
                },
                {
                  name: "Hardware stats:",
                  value: [
                    "System: `",
                    os.platform(),
                    "`",
                    "\n",
                    "CPU usage: `",
                    obj,
                    "%`",
                    "\n",
                    "RAM usage: `",
                    os.totalmem(),
                    "MB`",
                    "\n",
                    "Uptime: `",
                    miliConverter.secsMinsHoursDays(os.sysUptime() * 1000, "string"),
                    "`",
                  ].join(""),
                  inline: false,
                },
              ],
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
      });
      return;
    }

    /*
    D!NEWS
    */
    if ((s4dmessage.content.toUpperCase() || "").startsWith("D!NEWS" || "")) {
      s4dmessage.reply({
        embeds: [
          {
            color: String("#ff6600"),
            title: String("📜 Changelogs/news"),
            fields: [
              {
                name: "Patch v1.12.2 - 30/01/24",
                value: [
                  "- Major bot's code changes",
                  "\n",
                  "- Fixed a few title misspells",
                  "\n",
                  "- Fixed d!akinator not working at all",
                  "\n",
                  "- Fixed d!rob cooldown not working",
                  "\n",
                  "- Fixed some data saved wrong in Database",
                  "\n",
                  "- You can see Bot's configs without perms",
                ].join(""),
                inline: false,
              },
              {
                name: "More info, suggestions and bug report here:",
                value: "https://discord.gg/KxadTdz",
                inline: false,
              },
            ],
          },
        ],
        allowedMentions: {
          repliedUser: true,
        },
      });
      return;
    }

    /*
    D!CREDITS
    */
    if ((s4dmessage.content.toUpperCase() || "").startsWith("D!CREDITS" || "")) {
      s4dmessage.reply({
        embeds: [
          {
            color: String("#ffff00"),
            title: String("Here all the credits:"),
            description: String("Thanks to all the following people"),
            fields: [
              {
                name: "**Pier77Repeter**",
                value: "For making me!",
                inline: false,
              },
              {
                name: "**WrenckWave and Kautz__**",
                value: "For testing new features!",
                inline: false,
              },
              {
                name: "**You**",
                value: "For supporting me! ❤️",
                inline: false,
              },
            ],
          },
        ],
        allowedMentions: {
          repliedUser: true,
        },
      });
      return;
    }

    /*
    D!LINK
    */
    if ((s4dmessage.content.toUpperCase() || "").startsWith("D!LINK" || "")) {
      s4dmessage.reply({
        embeds: [
          {
            color: String("#cc0000"),
            title: String("🔗 Here is the invite link: "),
            description: String(
              "**https://discord.com/api/oauth2/authorize?client_id=878594739744673863&permissions=2080948874566&scope=bot**"
            ),
            footer: {
              text: String("Make sure the give the correct Bot's permissions"),
              icon_url: String(),
            },
          },
        ],
        allowedMentions: {
          repliedUser: true,
        },
      });
      return;
    }

    /*
    D!MUTE
    */
    arguments = s4dmessage.content.split(" ");
    command = arguments.splice(0, 1)[0];
    timeoutMember = arguments.splice(0, 1)[0];
    timeoutTime = arguments.splice(0, 1)[0];
    timeoutTime = timeoutTime * 60;
    if (command.toUpperCase() == "D!MUTE") {
      if (s4d.database.get(String(String(s4dmessage.guild.id) + "-modcmd")) == "false") {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("Moderation commands are off! **Type: d!modcmd on**"),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      if (!s4dmessage.member.permissions.has(Permissions.FLAGS.MUTE_MEMBERS)) {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("You don't have the permission"),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      try {
        if (s4dmessage.member.id == s4dmessage.mentions.members.first().id) {
          s4dmessage.reply({
            embeds: [
              {
                color: String("#ff0000"),
                title: String("❌ Error"),
                description: String("You can't mute yourself lol"),
              },
            ],
            allowedMentions: {
              repliedUser: true,
            },
          });
          return;
        }
        if (!s4dmessage.mentions.members.first().moderatable) {
          s4dmessage.reply({
            embeds: [
              {
                color: String("#ff0000"),
                title: String("❌ Error"),
                description: String("I don't have the permission to `Moderate Members` or i can't mute him (higher role)"),
              },
            ],
            allowedMentions: {
              repliedUser: true,
            },
          });
          return;
        }
        s4dmessage.mentions.members.first().timeout(timeoutTime * 1000, arguments.join(" "));
        s4dmessage.reply({
          embeds: [
            {
              color: String("#33cc00"),
              title: String("✅ Done"),
              description: String(
                [
                  "**",
                  s4d.client.users.cache.get(String(s4dmessage.mentions.members.first().id)).username,
                  "** has been muted",
                  "\n",
                  "\n",
                  "Time in minutes: **",
                  timeoutTime,
                  " minutes**",
                  "\n",
                  "Reason: **",
                  arguments.join(" "),
                  "**",
                ].join("")
              ),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      } catch (err) {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("Please ping a valid user"),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
    }

    /*
    D!BAN
    */
    if ((s4dmessage.content.toUpperCase() || "").startsWith("D!BAN" || "")) {
      if (s4d.database.get(String(String(s4dmessage.guild.id) + "-modcmd")) == "false") {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("Moderation commands are off! **Type: d!modcmd on**"),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      if (!s4dmessage.member.permissions.has(Permissions.FLAGS.BAN_MEMBERS)) {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("You don't have the permission"),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      try {
        if (s4dmessage.member.id == s4dmessage.mentions.members.first().id) {
          s4dmessage.reply({
            embeds: [
              {
                color: String("#ff0000"),
                title: String("❌ Error"),
                description: String("You can't ban yourself lol"),
              },
            ],
            allowedMentions: {
              repliedUser: true,
            },
          });
          return;
        }
        if (!s4dmessage.mentions.members.first().bannable) {
          s4dmessage.reply({
            embeds: [
              {
                color: String("#ff0000"),
                title: String("❌ Error"),
                description: String("I don't have the permission to `Ban Members` or i can't ban him (higher role)"),
              },
            ],
            allowedMentions: {
              repliedUser: true,
            },
          });
          return;
        }
        s4dmessage.mentions.members.first().ban({
          reason: "",
        });
        s4dmessage.reply({
          embeds: [
            {
              color: String("#33ff33"),
              title: String("✅ Done"),
              description: String(String(s4dmessage.mentions.members.first().username) + " has been successfully banned!"),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      } catch (err) {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("Please ping a valid user"),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
    }

    /*
    D!KICK
    */
    if ((s4dmessage.content.toUpperCase() || "").startsWith("D!KICK" || "")) {
      if (s4d.database.get(String(String(s4dmessage.guild.id) + "-modcmd")) == "false") {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("Moderation commands are off! **Type: d!modcmd on**"),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      if (!s4dmessage.member.permissions.has(Permissions.FLAGS.KICK_MEMBERS)) {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("You don't have the permission"),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      try {
        if (s4dmessage.member.id == s4dmessage.mentions.members.first().id) {
          s4dmessage.reply({
            embeds: [
              {
                color: String("#ff0000"),
                title: String("❌ Error"),
                description: String("You cannot kick yourself lol"),
              },
            ],
            allowedMentions: {
              repliedUser: true,
            },
          });
          return;
        }
        if (!s4dmessage.mentions.members.first().kickable) {
          s4dmessage.reply({
            embeds: [
              {
                color: String("#ff0000"),
                title: String("❌ Error"),
                description: String("I don't have the permission to `Kick Members` or i can't kick him (higher role)"),
              },
            ],
            allowedMentions: {
              repliedUser: true,
            },
          });
          return;
        }
        s4dmessage.mentions.members.first().kick({
          reason: "",
        });
        s4dmessage.reply({
          embeds: [
            {
              color: String("#33ff33"),
              title: String("✅ Done"),
              description: String(String(s4dmessage.mentions.members.first().username) + " has been successfully kicked!"),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      } catch (err) {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("Please ping a valid user"),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
    }

    /*
    D!WARN
    */
    if (
      (s4dmessage.content.toUpperCase() || "").startsWith("D!WARN" || "") &&
      !(s4dmessage.content.toUpperCase() || "").startsWith("D!WARNS" || "")
    ) {
      if (s4d.database.get(String(String(s4dmessage.guild.id) + "-modcmd")) == "false") {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("Moderation commands are off! **Type: d!modcmd on**"),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      if (!s4dmessage.member.permissions.has(Permissions.FLAGS.MUTE_MEMBERS)) {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("You don't have the permission"),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      try {
        if (s4dmessage.member.id == s4dmessage.mentions.members.first().id) {
          s4dmessage.reply({
            embeds: [
              {
                color: String("#ff0000"),
                title: String("❌ Error"),
                description: String("You can't warn yourself lol"),
              },
            ],
            allowedMentions: {
              repliedUser: true,
            },
          });
          return;
        }
        if (!s4d.database.has(String([s4dmessage.guild.id, "-", s4dmessage.mentions.members.first(), "-warns"].join("")))) {
          s4d.database.set(String([s4dmessage.guild.id, "-", s4dmessage.mentions.members.first(), "-warns"].join("")), 0);
        }
        s4d.database.add(
          String([s4dmessage.guild.id, "-", s4dmessage.mentions.members.first(), "-warns"].join("")),
          parseInt(1)
        );
        s4dmessage.reply({
          embeds: [
            {
              color: String("#33cc00"),
              title: String("🛂 Warned"),
              description: String(
                [
                  "Uh oh, ",
                  s4d.client.users.cache.get(String(s4dmessage.mentions.members.first().id)).username,
                  " got warned!",
                ].join("")
              ),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      } catch (err) {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("Please ping a valid user"),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
    }

    /*
    D!WARNS
    */
    if (s4dmessage.content.toUpperCase() == "D!WARNS") {
      if (s4d.database.get(String(String(s4dmessage.guild.id) + "-modcmd")) == "false") {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("Moderation commands are off! **Type: d!modcmd on**"),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      if (!s4dmessage.member.permissions.has(Permissions.FLAGS.MUTE_MEMBERS)) {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("You don't have the permission"),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      s4dmessage.reply({
        embeds: [
          {
            color: String("#33ff33"),
            title: String("Your warns:"),
            description: String(
              [
                "You have **",
                s4d.database.get(String([s4dmessage.guild.id, "-", s4dmessage.author, "-warns"].join(""))),
                "** warns",
              ].join("")
            ),
          },
        ],
        allowedMentions: {
          repliedUser: true,
        },
      });
      return;
    } else if ((s4dmessage.content.toUpperCase() || "").startsWith("D!WARNS" || "")) {
      if (s4d.database.get(String(String(s4dmessage.guild.id) + "-modcmd")) == "false") {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("Moderation commands are off! **Type: d!modcmd on**"),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      if (!s4dmessage.member.permissions.has(Permissions.FLAGS.MUTE_MEMBERS)) {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("You don't have the permission"),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      try {
        if (!s4d.database.has(String([s4dmessage.guild.id, "-", s4dmessage.mentions.members.first(), "-warns"].join("")))) {
          s4d.database.set(String([s4dmessage.guild.id, "-", s4dmessage.mentions.members.first(), "-warns"].join("")), 0);
        }
        s4dmessage.reply({
          embeds: [
            {
              color: String("#33ff33"),
              title: String(
                String(s4d.client.users.cache.get(String(s4dmessage.mentions.members.first().id)).username) + "'s warns:"
              ),
              description: String(
                [
                  String(s4d.client.users.cache.get(String(s4dmessage.mentions.members.first().id)).username) + " has **",
                  s4d.database.get(String([s4dmessage.guild.id, "-", s4dmessage.mentions.members.first(), "-warns"].join(""))),
                  "** warns",
                ].join("")
              ),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      } catch (err) {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("Please ping a valid user"),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
    }

    /*
    D!CLEARWARNS
    */
    if (s4dmessage.content.toUpperCase() == "D!CLEARWARNS") {
      if (s4d.database.get(String(String(s4dmessage.guild.id) + "-modcmd")) == "false") {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("Moderation commands are off! **Type: d!modcmd on**"),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      if (!s4dmessage.member.permissions.has(Permissions.FLAGS.MUTE_MEMBERS)) {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("You don't have the permission"),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      s4d.database.set(String([s4dmessage.guild.id, "-", s4dmessage.author, "-warns"].join("")), 0);
      s4dmessage.reply({
        embeds: [
          {
            color: String("#33ff33"),
            title: String("✅ Done"),
            description: String(
              [
                "Your: **",
                s4d.database.get(String([s4dmessage.guild.id, "-", s4dmessage.author, "-warns"].join(""))),
                "** warns have been reset",
              ].join("")
            ),
          },
        ],
        allowedMentions: {
          repliedUser: true,
        },
      });
      return;
    } else if ((s4dmessage.content.toUpperCase() || "").startsWith("D!CLEARWARNS" || "")) {
      if (s4d.database.get(String(String(s4dmessage.guild.id) + "-modcmd")) == "false") {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("Moderation commands are off! **Type: d!modcmd on**"),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      if (!s4dmessage.member.permissions.has(Permissions.FLAGS.MUTE_MEMBERS)) {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("You don't have the permission"),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      try {
        s4d.database.set(String([s4dmessage.guild.id, "-", s4dmessage.mentions.members.first(), "-warns"].join("")), 0);
        s4dmessage.reply({
          embeds: [
            {
              color: String("#33ff33"),
              title: String("✅ Done"),
              description: String(
                [
                  String(s4d.client.users.cache.get(String(s4dmessage.mentions.members.first().id)).username) + "'s warns:",
                  s4d.database.get(String([s4dmessage.guild.id, "-", s4dmessage.author, "-warns"].join(""))),
                  "** have been reset",
                ].join("")
              ),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      } catch (err) {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("Please ping a valid user"),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
    }

    /*
    D!CLEAN
    */
    arguments = s4dmessage.content.split(" ");
    command = arguments.splice(0, 1)[0];
    if (s4dmessage.content.toUpperCase() == "D!CLEAN") {
      if (s4d.database.get(String(String(s4dmessage.guild.id) + "-modcmd")) == "false") {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("Moderation commands are off! **Type: d!modcmd on**"),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      if (!s4dmessage.member.permissions.has(Permissions.FLAGS.MANAGE_MESSAGES)) {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("You don't have the permission"),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      s4dmessage.reply({
        embeds: [
          {
            color: String("#ff0000"),
            title: String("❌ Error"),
            description: String("Please put a valid number"),
          },
        ],
        allowedMentions: {
          repliedUser: true,
        },
      });
      return;
    } else if ((s4dmessage.content.toUpperCase() || "").startsWith("D!CLEAN" || "")) {
      if (s4d.database.get(String(String(s4dmessage.guild.id) + "-modcmd")) == "false") {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("Moderation commands are off! **Type: d!modcmd on**"),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      if (!s4dmessage.member.permissions.has(Permissions.FLAGS.MANAGE_MESSAGES)) {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("You don't have the permission"),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      if (arguments <= 0) {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("What? I can't clean 0 messages"),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      if (arguments > 99) {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("That's too much, number MUST be less than 100"),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      try {
        if (arguments <= 99 && arguments % 1 === 0) {
          s4dmessage.channel.bulkDelete(arguments | 1);
        }
        arguments = s4dmessage.content.split(" ");
        command = arguments.splice(0, 1)[0];
        s4dmessage.channel.send({
          embeds: [
            {
              color: String("#33ff33"),
              title: String("✅ Done"),
              description: String(["I cleaned ", arguments.join(" "), " messages!"].join("")),
            },
          ],
        });
        return;
      } catch (err) {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("Error while deleting message, make sure i have the permission to **manage messages**"),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
    }

    // commented this because season is over, see you next December :(
    /*
    D!ACTIVEVENT and D!DISABLEVENT (THIS IS THE START OF EVENT SECTION, REMOVE WHEN EVENT IS OVER)
    */
    /*
    if (s4dmessage.content.toUpperCase() == "D!ACTIVEVENT" && s4dmessage.author.id == "724990112030654484") {
      eventsdatabase.set(String("botevent"), "true");
      s4dmessage
        .reply({
          embeds: [
            {
              color: String("#33cc00"),
              title: String("✅ Event enabled"),
              description: String("Bot event is now globally turned **ON**"),
              footer: {
                text: String("Disable with d!disablevent"),
                icon_url: String(),
              },
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        })
        .then(async (s4dfrost_real_reply) => {
          s4d.client.guilds.cache.forEach(async (s) => {
            database.set(String(String(s.id) + "-eventcmd"), "true");
          });
          await delay(Number(3) * 1000);
          s4dfrost_real_reply.delete();
          s4dmessage.delete();
        });
    } else if (s4dmessage.content.toUpperCase() == "D!DISABLEVENT" && s4dmessage.author.id == "724990112030654484") {
      eventsdatabase.set(String("botevent"), "false");
      s4dmessage
        .reply({
          embeds: [
            {
              color: String("#33cc00"),
              title: String("✅ Event disabled"),
              description: String("Bot event is now globally turned **OFF**"),
              footer: {
                text: String("Rip the event"),
                icon_url: String(),
              },
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        })
        .then(async (s4dfrost_real_reply) => {
          await delay(Number(3) * 1000);
          s4dfrost_real_reply.delete();
          s4dmessage.delete();
        });
    }

    // D!TREE
    if (s4dmessage.content.toUpperCase() == "D!TREE") {
      if (s4d.database.get(String(String(s4dmessage.guild.id) + "-eventcmd")) == "false") {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("Events are off in this server, turn them on with **d!eventcmd on**"),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      if (eventsdatabase.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-treelevel"].join(""))) == 0) {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#339999"),
              title: String("🎄 Your Christmas tree..."),
              description: String(`⬜⬛⬛⬛⬜⬛⬛⬛⬛⬛⬜⬛⬛
      ⬛⬛⬛⬛⬛⬛⬛⬜⬛⬛⬛⬛⬛
      ⬛⬜⬛⬛⬜⬛⬛⬛⬛⬜⬛⬛⬛
      ⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛
      ⬛⬛⬛⬛⬛⬛⬜⬛⬛⬛⬛⬛⬛
      ⬛⬛⬛⬜⬛⬛⬛⬛⬛⬛⬛⬛⬛
      ⬛⬛⬛⬛⬛⬛⬛⬛⬛⬜⬛⬛⬛
      ⬛⬛⬛⬛⬛⬛⬜⬛⬛⬛⬛⬛⬜
      ⬜⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛
      ⬛⬛⬜⬜⬜⬛⬛⬛⬛⬛⬜⬛⬛
      ⬜⬛⬜⬜⬜⬜⬛⬛⬜⬜⬜⬜⬛`),
              footer: {
                text: String("Didn't even start building it"),
                icon_url: String(),
              },
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
      } else if (eventsdatabase.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-treelevel"].join(""))) == 1) {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#339999"),
              title: String("🎄 Your Christmas tree"),
              description: String(`⬛⬛⬜⬛⬛⬛⬛⬛⬜⬛⬛⬛⬜
      ⬜⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛
      ⬛⬛⬛⬛⬛⬜⬛⬛⬛⬜⬛⬛⬛
      ⬛⬜⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛
      ⬛⬛⬛⬛⬛⬜⬛⬛⬛⬛⬜⬛⬛
      ⬛⬛⬛⬛⬛⬛⬛⬛⬜⬛⬛⬛⬛
      ⬛⬛⬜⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛
      ⬛⬛⬛⬛⬛⬛⬜⬛⬛⬛⬛⬜⬛
      ⬛⬜⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛
      ⬛⬛⬛⬛⬜⬛🟫⬜⬜⬛⬛⬛⬜
      ⬜⬜⬛⬛🟫🟫🟫🟫🟫⬛⬜⬜⬜`),
              footer: {
                text: String("Didn't complete the tree in time"),
                icon_url: String(),
              },
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
      } else if (eventsdatabase.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-treelevel"].join(""))) == 2) {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#339999"),
              title: String("🎄 Your Christmas tree"),
              description: String(`⬜⬛⬛⬜⬛⬛⬛⬛⬛⬜⬛⬛⬛
      ⬛⬛⬛⬛⬛⬜⬛⬛⬛⬛⬛⬜⬛
      ⬛⬛⬜⬛⬛⬛⬛⬛⬛⬜⬛⬛⬛
      ⬛⬛⬛⬛⬛⬛⬛⬜⬛⬛⬛⬛⬜
      ⬛⬛⬛⬛⬜⬛⬛⬛⬛⬛⬛⬛⬛
      ⬛⬜⬛⬛⬛⬛⬛⬛⬛⬜⬛⬛⬛
      ⬛⬛⬛⬜⬛⬛🟫⬜⬜⬛⬛⬛⬛
      ⬛⬛⬛🟫🟫🟫🟫🟫🟫🟫⬛⬜⬛
      ⬛⬛⬛⬛⬛⬛🟫⬛⬛⬛⬛⬛⬛
      ⬛⬛⬜⬛⬛⬛🟫⬛⬜⬛⬛⬛⬛
      ⬛⬜⬜⬛🟫🟫🟫🟫🟫⬜⬛⬜⬜`),
              footer: {
                text: String("Didn't complete the tree in time"),
                icon_url: String(),
              },
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
      } else if (eventsdatabase.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-treelevel"].join(""))) == 3) {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#339999"),
              title: String("🎄 Your Christmas tree"),
              description: String(`⬜⬛⬛⬛⬛⬜⬛⬛⬜⬛⬛⬛⬛
      ⬛⬛⬛⬜⬛⬛⬛⬛⬛⬛⬛⬜⬛
      ⬜⬛⬛⬛⬛⬜🟫⬛⬛⬜⬛⬛⬛
      ⬛⬛⬛⬛⬛🟫🟫🟫⬛⬛⬛⬛⬛
      ⬛⬜⬛⬛⬛⬛🟫⬛⬜⬛⬛⬛⬛
      ⬛⬛⬛⬛🟫🟫🟫🟫🟫⬛⬛⬜⬛
      ⬛⬛⬛⬜⬜⬛🟫⬛⬛⬛⬜⬛⬛
      ⬛⬛⬛🟫🟫🟫🟫🟫🟫🟫⬛⬛⬜
      ⬛⬜⬛⬛⬛⬛🟫⬛⬛⬛⬛⬛⬛
      ⬛⬛⬛⬜⬜⬛🟫⬛⬜⬜⬜⬛⬛
      ⬜⬜⬜⬜🟫🟫🟫🟫🟫⬜⬜⬜⬛`),
              footer: {
                text: String("Didn't complete the tree in time"),
                icon_url: String(),
              },
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
      } else if (eventsdatabase.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-treelevel"].join(""))) == 4) {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#339999"),
              title: String("🎄 Your Christmas tree"),
              description: String(`⬛⬜⬛⬛⬛⬛⬛⬛⬛⬜⬛⬛⬛
      ⬛⬛⬛⬛⬜⬜🟩⬛⬛⬛⬛⬛⬜
      ⬜⬛⬛⬛⬜🟩🟫🟩⬛⬛⬛⬛⬛
      ⬛⬜⬛⬛🟩🟫🟫🟫🟩⬛⬛⬜⬛
      ⬛⬛⬛🟩🟩🟩🟫🟩🟩🟩⬜⬛⬛
      ⬛⬛⬛🟩🟫🟫🟫🟫🟫🟩⬛⬛⬜
      ⬛⬜🟩🟩🟩🟩🟫🟩🟩🟩🟩⬛⬛
      ⬛⬛🟩🟫🟫🟫🟫🟫🟫🟫🟩⬜⬛
      ⬛🟩🟩🟩🟩🟩🟫🟩🟩🟩🟩🟩⬛
      ⬛⬛⬛⬛⬛⬛🟫⬛⬛⬛⬛⬛⬜
      ⬜⬛⬛⬛🟫🟫🟫🟫🟫⬛⬛⬜⬜`),
              footer: {
                text: String("Didn't complete the tree in time"),
                icon_url: String(),
              },
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
      } else if (eventsdatabase.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-treelevel"].join(""))) == 5) {
        const matrixForDecoratedTree = [
          ["⬜", "⬛", "⬛", "⬜", "⬛", "⬛", "⬛", "⬛", "⬛", "⬜", "⬛", "⬜", "⬛"],
          ["⬛", "⬛", "⬛", "⬛", "⬜", "⬛", "🟩", "⬛", "⬜", "⬛", "⬛", "⬛", "⬛"],
          ["⬛", "⬛", "⬜", "⬛", "⬛", "🟩", "🟩", "🟩", "⬛", "⬛", "⬜", "⬛", "⬜"],
          ["⬛", "⬛", "⬛", "⬛", "🟩", "🟩", "🟩", "🟩", "🟩", "⬛", "⬛", "⬛", "⬛"],
          ["⬛", "⬛", "⬛", "🟩", "🟩", "🟩", "🟩", "🟩", "🟩", "🟩", "⬛", "⬜", "⬛"],
          ["⬜", "⬛", "⬛", "🟩", "🟩", "🟩", "🟩", "🟩", "🟩", "🟩", "⬛", "⬛", "⬜"],
          ["⬛", "⬜", "🟩", "🟩", "🟩", "🟩", "🟩", "🟩", "🟩", "🟩", "🟩", "⬛", "⬛"],
          ["⬛", "⬛", "🟩", "🟩", "🟩", "🟩", "🟩", "🟩", "🟩", "🟩", "🟩", "⬛", "⬛"],
          ["⬛", "🟩", "🟩", "🟩", "🟩", "🟩", "🟩", "🟩", "🟩", "🟩", "🟩", "🟩", "⬛"],
          ["⬛", "⬛", "⬛", "⬛", "⬛", "⬛", "🟫", "⬛", "⬛", "⬛", "⬛", "⬛", "⬜"],
          ["⬜", "⬜", "⬛", "⬛", "🟫", "🟫", "🟫", "🟫", "🟫", "⬛", "⬛", "⬜", "⬛"],
        ];
        if (eventsdatabase.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-decoid_1"].join(""))) == "true") {
          matrixForDecoratedTree[0][6] = "🌟";
        }
        if (eventsdatabase.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-decoid_2"].join(""))) == "true") {
          matrixForDecoratedTree[3][3] = "🕯️";
          matrixForDecoratedTree[3][9] = "🕯️";
          matrixForDecoratedTree[5][2] = "🕯️";
          matrixForDecoratedTree[5][10] = "🕯️";
          matrixForDecoratedTree[7][1] = "🕯️";
          matrixForDecoratedTree[7][11] = "🕯️";
        }
        if (eventsdatabase.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-decoid_3"].join(""))) == "true") {
          matrixForDecoratedTree[3][7] = "🔴";
          matrixForDecoratedTree[4][5] = "🟣";
          matrixForDecoratedTree[4][8] = "🔵";
          matrixForDecoratedTree[6][3] = "🔴";
          matrixForDecoratedTree[7][2] = "🟡";
          matrixForDecoratedTree[7][9] = "🟣";
          matrixForDecoratedTree[8][4] = "🔵";
          matrixForDecoratedTree[8][7] = "🟡";
        }
        if (eventsdatabase.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-decoid_4"].join(""))) == "true") {
          matrixForDecoratedTree[2][5] = "🟪";
          matrixForDecoratedTree[2][6] = "🟪";
          matrixForDecoratedTree[3][4] = "🟧";
          matrixForDecoratedTree[3][5] = "🟧";
          matrixForDecoratedTree[4][6] = "🟧";
          matrixForDecoratedTree[4][7] = "🟧";
          matrixForDecoratedTree[5][4] = "🟦";
          matrixForDecoratedTree[5][3] = "🟦";
          matrixForDecoratedTree[5][8] = "🟧";
          matrixForDecoratedTree[5][9] = "🟧";
          matrixForDecoratedTree[6][5] = "🟦";
          matrixForDecoratedTree[6][6] = "🟦";
          matrixForDecoratedTree[6][7] = "🟥";
          matrixForDecoratedTree[6][8] = "🟥";
          matrixForDecoratedTree[6][9] = "🟥";
          matrixForDecoratedTree[7][4] = "🟥";
          matrixForDecoratedTree[7][5] = "🟥";
          matrixForDecoratedTree[7][6] = "🟥";
          matrixForDecoratedTree[7][8] = "🟦";
          matrixForDecoratedTree[7][7] = "🟦";
          matrixForDecoratedTree[8][1] = "🟥";
          matrixForDecoratedTree[8][2] = "🟥";
          matrixForDecoratedTree[8][3] = "🟥";
          matrixForDecoratedTree[8][9] = "🟦";
          matrixForDecoratedTree[8][10] = "🟦";
        }
        const matrixStringForTree = matrixForDecoratedTree.map((row) => row.join("")).join("\n");
        s4dmessage.reply({
          embeds: [
            {
              color: String("#339999"),
              title: String("🎄 Your Christmas tree"),
              description: String(matrixStringForTree),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
      }
    } else if ((s4dmessage.content.toUpperCase() || "").startsWith("D!TREE" || "")) {
      if (s4d.database.get(String(String(s4dmessage.guild.id) + "-eventcmd")) == "false") {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("Events are off in this server, turn them on with **d!eventcmd on**"),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      try {
        if (!eventsdatabase.has(String([(s4dmessage.guild || {}).id, "-", "<@", s4dmessage.mentions.members.first().id, ">", "-treelevel"].join("")))) {
          eventsdatabase.set(String([(s4dmessage.guild || {}).id, "-", "<@", s4dmessage.mentions.members.first().id, ">", "-treelevel"].join("")), 0);
        }
        if (eventsdatabase.get(String([(s4dmessage.guild || {}).id, "-", "<@", s4dmessage.mentions.members.first().id, ">", "-treelevel"].join(""))) == 0) {
          s4dmessage.reply({
            embeds: [
              {
                color: String("#339999"),
                title: String(["🎄 ", s4d.client.users.cache.get(String(s4dmessage.mentions.members.first().id)).username, "'s Christmas tree..."].join("")),
                description: String(`⬜⬛⬛⬛⬜⬛⬛⬛⬛⬛⬜⬛⬛
        ⬛⬛⬛⬛⬛⬛⬛⬜⬛⬛⬛⬛⬛
        ⬛⬜⬛⬛⬜⬛⬛⬛⬛⬜⬛⬛⬛
        ⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛
        ⬛⬛⬛⬛⬛⬛⬜⬛⬛⬛⬛⬛⬛
        ⬛⬛⬛⬜⬛⬛⬛⬛⬛⬛⬛⬛⬛
        ⬛⬛⬛⬛⬛⬛⬛⬛⬛⬜⬛⬛⬛
        ⬛⬛⬛⬛⬛⬛⬜⬛⬛⬛⬛⬛⬜
        ⬜⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛
        ⬛⬛⬜⬜⬜⬛⬛⬛⬛⬛⬜⬛⬛
        ⬜⬛⬜⬜⬜⬜⬛⬛⬜⬜⬜⬜⬛`),
                footer: {
                  text: String("Didn't even start building it"),
                  icon_url: String(),
                },
              },
            ],
            allowedMentions: {
              repliedUser: true,
            },
          });
        } else if (eventsdatabase.get(String([(s4dmessage.guild || {}).id, "-", "<@", s4dmessage.mentions.members.first().id, ">", "-treelevel"].join(""))) == 1) {
          s4dmessage.reply({
            embeds: [
              {
                color: String("#339999"),
                title: String(["🎄 ", s4d.client.users.cache.get(String(s4dmessage.mentions.members.first().id)).username, "'s Christmas tree..."].join("")),
                description: String(`⬛⬛⬜⬛⬛⬛⬛⬛⬜⬛⬛⬛⬜
        ⬜⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛
        ⬛⬛⬛⬛⬛⬜⬛⬛⬛⬜⬛⬛⬛
        ⬛⬜⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛
        ⬛⬛⬛⬛⬛⬜⬛⬛⬛⬛⬜⬛⬛
        ⬛⬛⬛⬛⬛⬛⬛⬛⬜⬛⬛⬛⬛
        ⬛⬛⬜⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛
        ⬛⬛⬛⬛⬛⬛⬜⬛⬛⬛⬛⬜⬛
        ⬛⬜⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛
        ⬛⬛⬛⬛⬜⬛🟫⬜⬜⬛⬛⬛⬜
        ⬜⬜⬛⬛🟫🟫🟫🟫🟫⬛⬜⬜⬜`),
                footer: {
                  text: String("Didn't complete the tree in time"),
                  icon_url: String(),
                },
              },
            ],
            allowedMentions: {
              repliedUser: true,
            },
          });
        } else if (eventsdatabase.get(String([(s4dmessage.guild || {}).id, "-", "<@", s4dmessage.mentions.members.first().id, ">", "-treelevel"].join(""))) == 2) {
          s4dmessage.reply({
            embeds: [
              {
                color: String("#339999"),
                title: String(["🎄 ", s4d.client.users.cache.get(String(s4dmessage.mentions.members.first().id)).username, "'s Christmas tree..."].join("")),
                description: String(`⬜⬛⬛⬜⬛⬛⬛⬛⬛⬜⬛⬛⬛
        ⬛⬛⬛⬛⬛⬜⬛⬛⬛⬛⬛⬜⬛
        ⬛⬛⬜⬛⬛⬛⬛⬛⬛⬜⬛⬛⬛
        ⬛⬛⬛⬛⬛⬛⬛⬜⬛⬛⬛⬛⬜
        ⬛⬛⬛⬛⬜⬛⬛⬛⬛⬛⬛⬛⬛
        ⬛⬜⬛⬛⬛⬛⬛⬛⬛⬜⬛⬛⬛
        ⬛⬛⬛⬜⬛⬛🟫⬜⬜⬛⬛⬛⬛
        ⬛⬛⬛🟫🟫🟫🟫🟫🟫🟫⬛⬜⬛
        ⬛⬛⬛⬛⬛⬛🟫⬛⬛⬛⬛⬛⬛
        ⬛⬛⬜⬛⬛⬛🟫⬛⬜⬛⬛⬛⬛
        ⬛⬜⬜⬛🟫🟫🟫🟫🟫⬜⬛⬜⬜`),
                footer: {
                  text: String("Didn't complete the tree in time"),
                  icon_url: String(),
                },
              },
            ],
            allowedMentions: {
              repliedUser: true,
            },
          });
        } else if (eventsdatabase.get(String([(s4dmessage.guild || {}).id, "-", "<@", s4dmessage.mentions.members.first().id, ">", "-treelevel"].join(""))) == 3) {
          s4dmessage.reply({
            embeds: [
              {
                color: String("#339999"),
                title: String(["🎄 ", s4d.client.users.cache.get(String(s4dmessage.mentions.members.first().id)).username, "'s Christmas tree..."].join("")),
                description: String(`⬜⬛⬛⬛⬛⬜⬛⬛⬜⬛⬛⬛⬛
        ⬛⬛⬛⬜⬛⬛⬛⬛⬛⬛⬛⬜⬛
        ⬜⬛⬛⬛⬛⬜🟫⬛⬛⬜⬛⬛⬛
        ⬛⬛⬛⬛⬛🟫🟫🟫⬛⬛⬛⬛⬛
        ⬛⬜⬛⬛⬛⬛🟫⬛⬜⬛⬛⬛⬛
        ⬛⬛⬛⬛🟫🟫🟫🟫🟫⬛⬛⬜⬛
        ⬛⬛⬛⬜⬜⬛🟫⬛⬛⬛⬜⬛⬛
        ⬛⬛⬛🟫🟫🟫🟫🟫🟫🟫⬛⬛⬜
        ⬛⬜⬛⬛⬛⬛🟫⬛⬛⬛⬛⬛⬛
        ⬛⬛⬛⬜⬜⬛🟫⬛⬜⬜⬜⬛⬛
        ⬜⬜⬜⬜🟫🟫🟫🟫🟫⬜⬜⬜⬛`),
                footer: {
                  text: String("Didn't complete the tree in time"),
                  icon_url: String(),
                },
              },
            ],
            allowedMentions: {
              repliedUser: true,
            },
          });
        } else if (eventsdatabase.get(String([(s4dmessage.guild || {}).id, "-", "<@", s4dmessage.mentions.members.first().id, ">", "-treelevel"].join(""))) == 4) {
          s4dmessage.reply({
            embeds: [
              {
                color: String("#339999"),
                title: String(["🎄 ", s4d.client.users.cache.get(String(s4dmessage.mentions.members.first().id)).username, "'s Christmas tree..."].join("")),
                description: String(`⬛⬜⬛⬛⬛⬛⬛⬛⬛⬜⬛⬛⬛
        ⬛⬛⬛⬛⬜⬜🟩⬛⬛⬛⬛⬛⬜
        ⬜⬛⬛⬛⬜🟩🟫🟩⬛⬛⬛⬛⬛
        ⬛⬜⬛⬛🟩🟫🟫🟫🟩⬛⬛⬜⬛
        ⬛⬛⬛🟩🟩🟩🟫🟩🟩🟩⬜⬛⬛
        ⬛⬛⬛🟩🟫🟫🟫🟫🟫🟩⬛⬛⬜
        ⬛⬜🟩🟩🟩🟩🟫🟩🟩🟩🟩⬛⬛
        ⬛⬛🟩🟫🟫🟫🟫🟫🟫🟫🟩⬜⬛
        ⬛🟩🟩🟩🟩🟩🟫🟩🟩🟩🟩🟩⬛
        ⬛⬛⬛⬛⬛⬛🟫⬛⬛⬛⬛⬛⬜
        ⬜⬛⬛⬛🟫🟫🟫🟫🟫⬛⬛⬜⬜`),
                footer: {
                  text: String("Didn't complete the tree in time"),
                  icon_url: String(),
                },
              },
            ],
            allowedMentions: {
              repliedUser: true,
            },
          });
        } else if (eventsdatabase.get(String([(s4dmessage.guild || {}).id, "-", "<@", s4dmessage.mentions.members.first().id, ">", "-treelevel"].join(""))) == 5) {
          const matrixForDecoratedTree = [
            ["⬜", "⬛", "⬛", "⬜", "⬛", "⬛", "⬛", "⬛", "⬛", "⬜", "⬛", "⬜", "⬛"],
            ["⬛", "⬛", "⬛", "⬛", "⬜", "⬛", "🟩", "⬛", "⬜", "⬛", "⬛", "⬛", "⬛"],
            ["⬛", "⬛", "⬜", "⬛", "⬛", "🟩", "🟩", "🟩", "⬛", "⬛", "⬜", "⬛", "⬜"],
            ["⬛", "⬛", "⬛", "⬛", "🟩", "🟩", "🟩", "🟩", "🟩", "⬛", "⬛", "⬛", "⬛"],
            ["⬛", "⬛", "⬛", "🟩", "🟩", "🟩", "🟩", "🟩", "🟩", "🟩", "⬛", "⬜", "⬛"],
            ["⬜", "⬛", "⬛", "🟩", "🟩", "🟩", "🟩", "🟩", "🟩", "🟩", "⬛", "⬛", "⬜"],
            ["⬛", "⬜", "🟩", "🟩", "🟩", "🟩", "🟩", "🟩", "🟩", "🟩", "🟩", "⬛", "⬛"],
            ["⬛", "⬛", "🟩", "🟩", "🟩", "🟩", "🟩", "🟩", "🟩", "🟩", "🟩", "⬛", "⬛"],
            ["⬛", "🟩", "🟩", "🟩", "🟩", "🟩", "🟩", "🟩", "🟩", "🟩", "🟩", "🟩", "⬛"],
            ["⬛", "⬛", "⬛", "⬛", "⬛", "⬛", "🟫", "⬛", "⬛", "⬛", "⬛", "⬛", "⬜"],
            ["⬜", "⬜", "⬛", "⬛", "🟫", "🟫", "🟫", "🟫", "🟫", "⬛", "⬛", "⬜", "⬛"],
          ];
          if (eventsdatabase.get(String([(s4dmessage.guild || {}).id, "-", "<@", s4dmessage.mentions.members.first().id, ">", "-decoid_1"].join(""))) == "true") {
            matrixForDecoratedTree[0][6] = "🌟";
          }
          if (eventsdatabase.get(String([(s4dmessage.guild || {}).id, "-", "<@", s4dmessage.mentions.members.first().id, ">", "-decoid_2"].join(""))) == "true") {
            matrixForDecoratedTree[3][3] = "🕯️";
            matrixForDecoratedTree[3][9] = "🕯️";
            matrixForDecoratedTree[5][2] = "🕯️";
            matrixForDecoratedTree[5][10] = "🕯️";
            matrixForDecoratedTree[7][1] = "🕯️";
            matrixForDecoratedTree[7][11] = "🕯️";
          }
          if (eventsdatabase.get(String([(s4dmessage.guild || {}).id, "-", "<@", s4dmessage.mentions.members.first().id, ">", "-decoid_3"].join(""))) == "true") {
            matrixForDecoratedTree[3][7] = "🔴";
            matrixForDecoratedTree[4][5] = "🟣";
            matrixForDecoratedTree[4][8] = "🔵";
            matrixForDecoratedTree[6][3] = "🔴";
            matrixForDecoratedTree[7][2] = "🟡";
            matrixForDecoratedTree[7][9] = "🟣";
            matrixForDecoratedTree[8][4] = "🔵";
            matrixForDecoratedTree[8][7] = "🟡";
          }
          if (eventsdatabase.get(String([(s4dmessage.guild || {}).id, "-", "<@", s4dmessage.mentions.members.first().id, ">", "-decoid_4"].join(""))) == "true") {
            matrixForDecoratedTree[2][5] = "🟪";
            matrixForDecoratedTree[2][6] = "🟪";
            matrixForDecoratedTree[3][4] = "🟧";
            matrixForDecoratedTree[3][5] = "🟧";
            matrixForDecoratedTree[4][6] = "🟧";
            matrixForDecoratedTree[4][7] = "🟧";
            matrixForDecoratedTree[5][4] = "🟦";
            matrixForDecoratedTree[5][3] = "🟦";
            matrixForDecoratedTree[5][8] = "🟧";
            matrixForDecoratedTree[5][9] = "🟧";
            matrixForDecoratedTree[6][5] = "🟦";
            matrixForDecoratedTree[6][6] = "🟦";
            matrixForDecoratedTree[6][7] = "🟥";
            matrixForDecoratedTree[6][8] = "🟥";
            matrixForDecoratedTree[6][9] = "🟥";
            matrixForDecoratedTree[7][4] = "🟥";
            matrixForDecoratedTree[7][5] = "🟥";
            matrixForDecoratedTree[7][6] = "🟥";
            matrixForDecoratedTree[7][8] = "🟦";
            matrixForDecoratedTree[7][7] = "🟦";
            matrixForDecoratedTree[8][1] = "🟥";
            matrixForDecoratedTree[8][2] = "🟥";
            matrixForDecoratedTree[8][3] = "🟥";
            matrixForDecoratedTree[8][9] = "🟦";
            matrixForDecoratedTree[8][10] = "🟦";
          }
          const matrixStringForTree = matrixForDecoratedTree.map((row) => row.join("")).join("\n");
          s4dmessage.reply({
            embeds: [
              {
                color: String("#339999"),
                title: String(["🎄 ", s4d.client.users.cache.get(String(s4dmessage.mentions.members.first().id)).username, "'s Christmas tree..."].join("")),
                description: String(matrixStringForTree),
              },
            ],
            allowedMentions: {
              repliedUser: true,
            },
          });
        }
      } catch (err) {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("Please mention a valid user"),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
      }
    }

    // D!FOREST
    if ((s4dmessage.content.toUpperCase() || "").startsWith("D!FOREST" || "")) {
      if (eventsdatabase.get(String("botevent")) == "false") {
        return;
      }
      if (s4d.database.get(String(String(s4dmessage.guild.id) + "-eventcmd")) == "false") {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("Events are off in this server, turn them on with **d!eventcmd on**"),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      if (eventsdatabase.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-treelevel"].join(""))) == 5) {
        s4dmessage.reply({
          content: String("There's no need to go in the forest, your Christmas tree is completed"),
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      if (!eventsdatabase.has(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-foresttimer"].join("")))) {
        eventsdatabase.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-foresttimer"].join("")), 0);
      }
      if (new Date().getTime() > eventsdatabase.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-foresttimer"].join(""))) + 86400000) {
        forestCooldown = new Date().getTime();
        eventsdatabase.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-foresttimer"].join("")), forestCooldown);
        s4dmessage
          .reply({
            embeds: [
              {
                color: String("#999999"),
                title: String("🚶‍♂️ You walking in the forest..."),
              },
            ],
            allowedMentions: {
              repliedUser: true,
            },
          })
          .then(async (s4dfrost_real_reply) => {
            await delay(Number(2) * 1000);
            twigsFoundForTree = mathRandomInt(50, 70);
            eventsdatabase.add(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-twigs"].join("")), parseInt(twigsFoundForTree));
            leavesFoundForTree = mathRandomInt(30, 40);
            eventsdatabase.add(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-leaves"].join("")), parseInt(leavesFoundForTree));
            s4dfrost_real_reply.edit({
              embeds: [
                {
                  color: String("#33cc00"),
                  title: String("🌳🌲 Back from forest"),
                  description: String(["You got: **", twigsFoundForTree, "🪵** and **", leavesFoundForTree, "🌿**"].join("")),
                  footer: {
                    text: String("These are needed for your Christmas tree"),
                    icon_url: String(),
                  },
                },
              ],
            });
          });
      } else {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#000000"),
              description: String(["⏰ Slowdown man, you can go in the forest again: **<t:", Math.floor((eventsdatabase.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-foresttimer"].join(""))) + 86400000) / 1000), ":R>**"].join("")),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
      }
    }

    // D!HELPSANTA
    if ((s4dmessage.content.toUpperCase() || "").startsWith("D!HELPSANTA" || "")) {
      if (eventsdatabase.get(String("botevent")) == "false") {
        return;
      }
      if (s4d.database.get(String(String(s4dmessage.guild.id) + "-eventcmd")) == "false") {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("Events are off in this server, turn them on with **d!eventcmd on**"),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      if (!eventsdatabase.has(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-helpsantatimer"].join("")))) {
        eventsdatabase.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-helpsantatimer"].join("")), 0);
      }
      if (new Date().getTime() > eventsdatabase.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-helpsantatimer"].join(""))) + 86400000) {
        helpsantaCooldown = new Date().getTime();
        eventsdatabase.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-helpsantatimer"].join("")), helpsantaCooldown);
        goldFromSanta = mathRandomInt(20, 30);
        eventsdatabase.add(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-goldencoins"].join("")), parseInt(goldFromSanta));
        s4dmessage.reply({
          embeds: [
            {
              color: String("#33cc00"),
              title: String("🎅 You helped Santa"),
              description: String(["For your great work on helping Santa Claus with the gifts, you received **", goldFromSanta, "** golden coins 🪙"].join("")),
              footer: {
                text: String("You are 100% for sure in the good kids list"),
                icon_url: String(),
              },
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
      } else {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#000000"),
              description: String(["⏰ Slowdown man, you can help Santa again: **<t:", Math.floor((eventsdatabase.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-helpsantatimer"].join(""))) + 86400000) / 1000), ":R>**"].join("")),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
      }
    }

    // D!MATERIALS
    if ((s4dmessage.content.toUpperCase() || "").startsWith("D!MATERIALS" || "")) {
      if (eventsdatabase.get(String("botevent")) == "false") {
        return;
      }
      if (s4d.database.get(String(String(s4dmessage.guild.id) + "-eventcmd")) == "false") {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("Events are off in this server, turn them on with **d!eventcmd on**"),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      s4dmessage.reply({
        embeds: [
          {
            color: String("#33ccff"),
            title: String("🛠️ Your materials"),
            description: String(["🪙 Golden coins: **", eventsdatabase.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-goldencoins"].join(""))), "**", "\n", "🪵 Twigs: **", eventsdatabase.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-twigs"].join(""))), "**", "\n", "🌿 Leaves: **", eventsdatabase.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-leaves"].join(""))), "**"].join("")),
          },
        ],
        allowedMentions: {
          repliedUser: true,
        },
      });
    }

    // D!DECOSHOP
    if ((s4dmessage.content.toUpperCase() || "").startsWith("D!DECOSHOP" || "")) {
      if (eventsdatabase.get(String("botevent")) == "false") {
        return;
      }
      if (s4d.database.get(String(String(s4dmessage.guild.id) + "-eventcmd")) == "false") {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("Events are off in this server, turn them on with **d!eventcmd on**"),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      if (eventsdatabase.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-treelevel"].join(""))) != 5) {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("Your Christmas tree needs to be built to unlock the decorations shop"),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      s4dmessage.reply({
        embeds: [
          {
            color: String("#66cccc"),
            title: String("🏪 The ***Deco*Shop**"),
            description: String("Customize your Christmas tree with these wonderful decorations!"),
            fields: [
              {
                name: "🌟 Christmas star",
                value: "Item cost: **200 golden coins**",
                inline: false,
              },
              {
                name: "🕯️ Candles",
                value: "Item cost: **100 golden coins**",
                inline: false,
              },
              {
                name: "🔴 Christmas balls (multi-color)",
                value: "Item cost: **50 golden coins**",
                inline: false,
              },
              {
                name: "🟥 Tree decorations (multi-color)",
                value: "Item cost: **50 golden coins**",
                inline: false,
              },
            ],
            footer: {
              text: String(["You have: ", eventsdatabase.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-goldencoins"].join(""))), " golden coins"].join("")),
              icon_url: String(),
            },
          },
        ],
        allowedMentions: {
          repliedUser: true,
        },
      });
    }

    // D!BUYDECO
    if (s4dmessage.content.toUpperCase() == "D!BUYDECO") {
      if (eventsdatabase.get(String("botevent")) == "false") {
        return;
      }
      if (s4d.database.get(String(String(s4dmessage.guild.id) + "-eventcmd")) == "false") {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("Events are off in this server, turn them on with **d!eventcmd on**"),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      if (eventsdatabase.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-treelevel"].join(""))) != 5) {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("You need to complete your tree to use this command!"),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      s4dmessage.reply({
        embeds: [
          {
            color: String("#ff6600"),
            title: String("📦 Available commands:"),
            description: String(["**d!buydeco christmas star**", "\n", "**d!buydeco candles**", "\n", "**d!buydeco christmas balls**", "\n", "**d!buydeco tree decorations**"].join("")),
          },
        ],
        allowedMentions: {
          repliedUser: true,
        },
      });
    } else if (s4dmessage.content.toUpperCase() == "D!BUYDECO CHRISTMAS STAR") {
      if (eventsdatabase.get(String("botevent")) == "false") {
        return;
      }
      if (s4d.database.get(String(String(s4dmessage.guild.id) + "-eventcmd")) == "false") {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("Events are off in this server, turn them on with **d!eventcmd on**"),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      if (eventsdatabase.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-treelevel"].join(""))) != 5) {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("You need to complete your tree to buy this item!"),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      if (eventsdatabase.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-decoid_1"].join(""))) == "true") {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("You have already bought this decoration!"),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      if (eventsdatabase.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-goldencoins"].join(""))) < 200) {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("Not enough golden coins!"),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      eventsdatabase.subtract(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-goldencoins"].join("")), parseInt(200));
      eventsdatabase.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-decoid_1"].join("")), "true");
      s4dmessage.reply({
        embeds: [
          {
            color: String("#33cc00"),
            title: String("✅ Purchase successful"),
            description: String("You got the epik Christmas Star for your tree"),
          },
        ],
        allowedMentions: {
          repliedUser: true,
        },
      });
    } else if (s4dmessage.content.toUpperCase() == "D!BUYDECO CANDLES") {
      if (eventsdatabase.get(String("botevent")) == "false") {
        return;
      }
      if (s4d.database.get(String(String(s4dmessage.guild.id) + "-eventcmd")) == "false") {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("Events are off in this server, turn them on with **d!eventcmd on**"),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      if (eventsdatabase.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-treelevel"].join(""))) != 5) {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("You need to complete your tree to buy this item!"),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      if (eventsdatabase.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-decoid_2"].join(""))) == "true") {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("You have already bought this decoration!"),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      if (eventsdatabase.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-goldencoins"].join(""))) < 100) {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("Not enough golden coins!"),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      eventsdatabase.subtract(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-goldencoins"].join("")), parseInt(100));
      eventsdatabase.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-decoid_2"].join("")), "true");
      s4dmessage.reply({
        embeds: [
          {
            color: String("#33cc00"),
            title: String("✅ Purchase successful"),
            description: String("You got some candles for your tree"),
          },
        ],
        allowedMentions: {
          repliedUser: true,
        },
      });
    } else if (s4dmessage.content.toUpperCase() == "D!BUYDECO CHRISTMAS BALLS") {
      if (eventsdatabase.get(String("botevent")) == "false") {
        return;
      }
      if (s4d.database.get(String(String(s4dmessage.guild.id) + "-eventcmd")) == "false") {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("Events are off in this server, turn them on with **d!eventcmd on**"),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      if (eventsdatabase.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-treelevel"].join(""))) != 5) {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("You need to complete your tree to buy this item!"),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      if (eventsdatabase.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-decoid_3"].join(""))) == "true") {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("You have already bought this decoration!"),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      if (eventsdatabase.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-goldencoins"].join(""))) < 50) {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("Not enough golden coins!"),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      eventsdatabase.subtract(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-goldencoins"].join("")), parseInt(50));
      eventsdatabase.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-decoid_3"].join("")), "true");
      s4dmessage.reply({
        embeds: [
          {
            color: String("#33cc00"),
            title: String("✅ Purchase successful"),
            description: String("You got some Christmas balls for your tree"),
          },
        ],
        allowedMentions: {
          repliedUser: true,
        },
      });
    } else if (s4dmessage.content.toUpperCase() == "D!BUYDECO TREE DECORATIONS") {
      if (eventsdatabase.get(String("botevent")) == "false") {
        return;
      }
      if (s4d.database.get(String(String(s4dmessage.guild.id) + "-eventcmd")) == "false") {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("Events are off in this server, turn them on with **d!eventcmd on**"),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      if (eventsdatabase.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-treelevel"].join(""))) != 5) {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("You need to complete your tree to buy this item!"),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      if (eventsdatabase.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-decoid_4"].join(""))) == "true") {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("You have already bought this decoration!"),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      if (eventsdatabase.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-goldencoins"].join(""))) < 50) {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("Not enough golden coins!"),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      eventsdatabase.subtract(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-goldencoins"].join("")), parseInt(50));
      eventsdatabase.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-decoid_4"].join("")), "true");
      s4dmessage.reply({
        embeds: [
          {
            color: String("#33cc00"),
            title: String("✅ Purchase successful"),
            description: String("You got some Christmas decorations for your tree"),
          },
        ],
        allowedMentions: {
          repliedUser: true,
        },
      });
    }

    // D!DECORATIONS
    if ((s4dmessage.content.toUpperCase() || "").startsWith("D!DECORATIONS" || "")) {
      if (eventsdatabase.get(String("botevent")) == "false") {
        return;
      }
      if (s4d.database.get(String(String(s4dmessage.guild.id) + "-eventcmd")) == "false") {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("Events are off in this server, turn them on with **d!eventcmd on**"),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      var embedMessageForDecorationInv = new Discord.MessageEmbed();
      embedMessageForDecorationInv.setColor("#33ccff");
      embedMessageForDecorationInv.setTitle(String("💼 Your decorations"));
      embedMessageForDecorationInv.setURL(String());
      if (eventsdatabase.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-decoid_1"].join(""))) == "false" && eventsdatabase.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-decoid_2"].join(""))) == "false" && eventsdatabase.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-decoid_3"].join(""))) == "false" && eventsdatabase.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-decoid_4"].join(""))) == "false") {
        embedMessageForDecorationInv.addField(String("You have no decorations"), String("Sooo you aren't planning to improve your Christmas at all?"), false);
      }
      if (eventsdatabase.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-decoid_1"].join(""))) == "true") {
        embedMessageForDecorationInv.addField(String("🌟 Christmas star"), String("Best decoration out there"), false);
      }
      if (eventsdatabase.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-decoid_2"].join(""))) == "true") {
        embedMessageForDecorationInv.addField(String("🕯️ Candles"), String("Your tree needs some light"), false);
      }
      if (eventsdatabase.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-decoid_3"].join(""))) == "true") {
        embedMessageForDecorationInv.addField(String("🔴 Christmas balls (multi-color)"), String("Classic decorations (name not sus at all)"), false);
      }
      if (eventsdatabase.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-decoid_4"].join(""))) == "true") {
        embedMessageForDecorationInv.addField(String("🟥 Tree decorations (multi-color)"), String("Classic decoration to make your tree look better"), false);
      }

      s4dmessage.reply({
        embeds: [embedMessageForDecorationInv],
        allowedMentions: {
          repliedUser: true,
        },
      });
    }
    */
  });

  /*
    Music API section down here
  */
  // when track is is playing send the message with the infos, if alone in vc leave, we need to save money
  s4d.player.on("trackStart", async (queue, track) => {
    const voiceChannel = s4d.client.channels.cache.get(queue.connection.channel.id);
    if (voiceChannel.members.size === 1) {
      var embed = new Discord.MessageEmbed();
      embed.setColor("#000000");
      embed.setTitle("🤷‍♂️ I was alone in vc so i left");
      queue.metadata.channel.send({
        embeds: [embed],
      });
      // this will give an error, dont worry, it still works
      s4d.player.getQueue(queue.guild.id).destroy();
      return;
    }
    var embed = new Discord.MessageEmbed()
      .setColor("#cc66cc")
      .setTitle(
        [
          "Now playing: **",
          track.title,
          "**",
          "\n",
          "Author: **",
          track.author,
          "**",
          "\n",
          "Duration: **",
          track.duration,
          "**",
          "\n",
          "Views: **",
          track.views,
          "**",
          "\n",
          "Url: **",
          track.url,
          "**",
        ].join("")
      );
    embed.setImage(track.thumbnail);

    queue.metadata.channel.send({
      embeds: [embed],
    });
    return;
  });

  // when track is added to the queue
  s4d.player.on("trackAdd", async (queue, track) => {
    queue.metadata.channel.send({
      embeds: [
        {
          color: String("#00cccc"),
          title: String("✅ Done"),
          description: String(["The song: **", track.title, "** has been added to the queue!"].join("")),
          footer: {
            text: String("Type d!queue to see all the queued songs"),
            icon_url: String(),
          },
        },
      ],
    });
    return;
  });

  // when queue ends message
  s4d.player.on("queueEnd", async (queue) => {
    try {
      queue.metadata.channel.send({
        embeds: [
          {
            color: String("#000000"),
            title: String("✅ Queue is over, thanks for listening!"),
          },
        ],
      });
      return;
    } catch (err) {
      console.log("Error while deleting the music queue");
      return;
    }
  });

  // Music API's code
  s4d.client.on("messageCreate", async (s4dmessage) => {
    if (s4dmessage.author.bot) {
      return;
    }

    // variables that needs to save message content stuff (put this here to avoid repetitions)
    arguments = s4dmessage.content.split(" ");
    command = arguments.splice(0, 1)[0];

    /*
    D!PLAY
    */
    if ((s4dmessage.content.toUpperCase() || "").startsWith("D!PLAY" || "")) {
      s4dmessage.reply({
        embeds: [
          {
            color: String("#ff0000"),
            title: String("❌ Soorrry"),
            description: String("Music commands are disabled due to a rewrite needed."),
          },
        ],
        allowedMentions: {
          repliedUser: true,
        },
      });
      return;
      //This is all useless, need to upgrade to discordjs v14
      /*
      if (s4dmessage.content.toUpperCase() == "D!PLAY") {
        if (s4d.database.get(String(String(s4dmessage.guild.id) + "-musicmd")) == "false") {
          s4dmessage.reply({
            embeds: [
              {
                color: String("#ff0000"),
                title: String("❌ Error"),
                description: String("Music commands are off, type: **d!musicmd on**"),
              },
            ],
            allowedMentions: {
              repliedUser: true,
            },
          });
          return;
        }
        s4dmessage.reply({
          content: String("https://tenor.com/view/lets-play-skeleton-dancing-gif-15984414"),
          allowedMentions: {
            repliedUser: true,
          },
        });
        s4dmessage.reply({
          content: String("Correct command: **d!play <music name/link>**"),
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      } else if ((s4dmessage.content.toUpperCase() || "").startsWith("D!PLAY" || "")) {
        if (s4d.database.get(String(String(s4dmessage.guild.id) + "-musicmd")) == "false") {
          s4dmessage.reply({
            embeds: [
              {
                color: String("#ff0000"),
                title: String("❌ Error"),
                description: String("Music commands are off, type: **d!musicmd on**"),
              },
            ],
            allowedMentions: {
              repliedUser: true,
            },
          });
          return;
        }
        if (s4dmessage.member.voice.channelId == null) {
          s4dmessage.reply({
            content: String("You must be in a voice channel!"),
            allowedMentions: {
              repliedUser: true,
            },
          });
          return;
        }
        if (s4dmessage.guild.me.voice.channelId != null && s4dmessage.member.voice.channelId != s4dmessage.guild.me.voice.channelId) {
          s4dmessage.reply({
            content: String("You must be in my voice channel!"),
            allowedMentions: {
              repliedUser: true,
            },
          });
          return;
        }
        try {
          const queue = s4d.player.createQueue(s4dmessage.guild, {
            metadata: { channel: s4dmessage.channel },
            async onBeforeCreateStream(track, source, _queue) {
              if (source === "youtube") {
                return (await playdl.stream(track.url, { discordPlayerCompatibility: true })).stream;
              }
            },
          });
          if (!queue.connection) {
            await queue.connect(s4dmessage.member.voice.channel);
            s4dmessage
              .reply({
                embeds: [
                  {
                    color: String("#666666"),
                    title: String("⚙️ Connecting, please wait..."),
                    description: String("This is going to take a few seconds"),
                    footer: {
                      text: String("(Make sure the Bot has the right permissions)"),
                      icon_url: String(),
                    },
                  },
                ],
                allowedMentions: {
                  repliedUser: true,
                },
              })
              .then(async (s4dfrost_real_reply) => {
                (async () => {
                  queue.play(await s4d.player.search(arguments.join(" "), { requestedBy: s4dmessage.author }).then((x) => x.tracks[0]));
                })();
                await delay(Number(2) * 1000);
                s4dfrost_real_reply.edit({
                  embeds: [
                    {
                      color: String("#33cc00"),
                      title: String("✅ Music API is connected"),
                      description: String("The music will start in a few seconds!"),
                      footer: {
                        text: String("(If music didn't start type the command again)"),
                        icon_url: String(),
                      },
                    },
                  ],
                });
              });
            return;
          }
          s4dmessage
            .reply({
              embeds: [
                {
                  color: String("#33cc00"),
                  title: String("✅ Music added to the queue!"),
                  description: String("Message sent to: " + String(queue.metadata.channel)),
                },
              ],
              allowedMentions: {
                repliedUser: true,
              },
            })
            .then(async (s4dfrost_real_reply) => {
              (async () => {
                queue.play(await s4d.player.search(arguments.join(" "), { requestedBy: s4dmessage.author }).then((x) => x.tracks[0]));
              })();
              await delay(Number(10) * 1000);
              s4dfrost_real_reply.delete();
            });
          return;
        } catch (err) {
          s4dmessage.reply({
            embeds: [
              {
                color: String("#ff0000"),
                title: String("❌ Error"),
                description: String("Invalid music, or +18 video, or API error"),
                footer: {
                  text: String("(Try to type the command again)"),
                  icon_url: String(),
                },
              },
            ],
            allowedMentions: {
              repliedUser: true,
            },
          });
          console.log("Error while searching for a song");
          return;
        }
      }
      */
    }

    /*
    D!STOP
    */
    if ((s4dmessage.content.toUpperCase() || "").startsWith("D!STOP" || "")) {
      if (s4d.database.get(String(String(s4dmessage.guild.id) + "-musicmd")) == "false") {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("Music commands are off, type: **d!musicmd on**"),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      if (s4dmessage.member.voice.channelId == null) {
        s4dmessage.reply({
          content: String("You must be in a voice channel!"),
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      if (
        s4dmessage.guild.me.voice.channelId != null &&
        s4dmessage.member.voice.channelId != s4dmessage.guild.me.voice.channelId
      ) {
        s4dmessage.reply({
          content: String("You must be in my voice channel!"),
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      try {
        s4d.player.getQueue(s4dmessage.guild.id).destroy();
        s4dmessage.reply({
          embeds: [
            {
              color: String("#000000"),
              title: String("✅ Ok stopped, thanks for listening!"),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      } catch (err) {
        console.log("Error while stopping a song");
        return;
      }
    }

    /*
    D!PAUSE
    */
    if ((s4dmessage.content.toUpperCase() || "").startsWith("D!PAUSE" || "")) {
      if (s4d.database.get(String(String(s4dmessage.guild.id) + "-musicmd")) == "false") {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("Music commands are off, type: **d!musicmd on**"),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      if (s4dmessage.member.voice.channel == null) {
        s4dmessage.reply({
          content: String("You must be in a voice channel!"),
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      if (s4dmessage.member.voice.channelId != s4dmessage.guild.me.voice.channelId) {
        s4dmessage.reply({
          content: String("You must be in my voice channel!"),
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      if (!s4d.player.getQueue(s4dmessage.guild.id).playing) {
        s4dmessage.reply({
          content: String("There is no music playing!"),
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      try {
        s4d.player.getQueue(s4dmessage.guild.id).setPaused(true);
        s4dmessage.reply({
          embeds: [
            {
              color: String("#cc0000"),
              title: String("⏸️ Music paused"),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      } catch (err) {
        console.log("Error while pausing a song");
        return;
      }
    }

    /*
    D!RESUME
    */
    if ((s4dmessage.content.toUpperCase() || "").startsWith("D!RESUME" || "")) {
      if (s4d.database.get(String(String(s4dmessage.guild.id) + "-musicmd")) == "false") {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("Music commands are off, type: **d!musicmd on**"),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      if (s4dmessage.member.voice.channel == null) {
        s4dmessage.reply({
          content: String("You must be in a voice channel!"),
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      if (s4dmessage.member.voice.channelId != s4dmessage.guild.me.voice.channelId) {
        s4dmessage.reply({
          content: String("You must be in my voice channel!"),
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      if (!s4d.player.getQueue(s4dmessage.guild.id).playing) {
        s4dmessage.reply({
          content: String("There is no music playing!"),
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      try {
        s4d.player.getQueue(s4dmessage.guild.id).setPaused(false);
        s4dmessage.reply({
          embeds: [
            {
              color: String("#339999"),
              title: String("▶️ Music resumed"),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      } catch (err) {
        console.log("Error while resuming a song");
        return;
      }
    }

    /*
    D!SKIP
    */
    if ((s4dmessage.content.toUpperCase() || "").startsWith("D!SKIP" || "")) {
      if (s4d.database.get(String(String(s4dmessage.guild.id) + "-musicmd")) == "false") {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("Music commands are off, type: **d!musicmd on**"),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      if (s4dmessage.member.voice.channel == null) {
        s4dmessage.reply({
          content: String("You must be in a voice channel!"),
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      if (s4dmessage.member.voice.channelId != s4dmessage.guild.me.voice.channelId) {
        s4dmessage.reply({
          content: String("You must be in my voice channel!"),
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      try {
        s4d.player.getQueue(s4dmessage.guild.id).skip();
        s4dmessage.reply({
          embeds: [
            {
              color: String("#33ff33"),
              title: String("⏭️ Done"),
              description: String(["Music skipped: **", s4d.player.getQueue(s4dmessage.guild.id).current, "**"].join("")),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      } catch (err) {
        console.log("Error while skipping a song");
        return;
      }
    }

    /*
    D!BACK
    */
    if ((s4dmessage.content.toUpperCase() || "").startsWith("D!BACK" || "")) {
      if (s4d.database.get(String(String(s4dmessage.guild.id) + "-musicmd")) == "false") {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("Music commands are off, type: **d!musicmd on**"),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      if (s4dmessage.member.voice.channel == null) {
        s4dmessage.reply({
          content: String("You must be in a voice channel!"),
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      if (s4dmessage.member.voice.channelId != s4dmessage.guild.me.voice.channelId) {
        s4dmessage.reply({
          content: String("You must be in my voice channel!"),
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      try {
        s4d.player.getQueue(s4dmessage.guild.id).back();
        s4dmessage.reply({
          embeds: [
            {
              color: String("#33cc00"),
              title: String("⏮️ Playing previous music"),
              description: String(["Now playing: **", s4d.player.getQueue(s4dmessage.guild.id).current, "**"].join("")),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      } catch (err) {
        console.log("Error while rollbacking a song");
        return;
      }
    }

    /*
    D!VOLUME
    */
    if (s4dmessage.content.toUpperCase() == "D!VOLUME") {
      if (s4d.database.get(String(String(s4dmessage.guild.id) + "-musicmd")) == "false") {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("Music commands are off, type: **d!musicmd on**"),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      if (s4dmessage.member.voice.channel == null) {
        s4dmessage.reply({
          content: String("You must be in a voice channel!"),
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      if (s4dmessage.member.voice.channelId != s4dmessage.guild.me.voice.channelId) {
        s4dmessage.reply({
          content: String("You must be in my voice channel!"),
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      s4dmessage.reply({
        embeds: [
          {
            color: String("#ff0000"),
            title: String("❌ Error"),
            description: String("The correct command is: **d!volume 1-100**"),
          },
        ],
        allowedMentions: {
          repliedUser: true,
        },
      });
      return;
    } else if ((s4dmessage.content.toUpperCase() || "").startsWith("D!VOLUME" || "")) {
      if (s4d.database.get(String(String(s4dmessage.guild.id) + "-musicmd")) == "false") {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("Music commands are off, type: **d!musicmd on**"),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      volume = arguments[0];
      if (s4dmessage.member.voice.channel == null) {
        s4dmessage.reply({
          content: String("You must be in a voice channel!"),
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      if (s4dmessage.member.voice.channelId != s4dmessage.guild.me.voice.channelId) {
        s4dmessage.reply({
          content: String("You must be in my voice channel!"),
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      if (Number(volume) < 0) {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("The volume need to be more than **0**!"),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      if (Number(volume) > 100) {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("The volume need to be less than **100**!"),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      try {
        s4d.player.getQueue(s4dmessage.guild.id).setVolume(volume);
        s4dmessage.reply({
          embeds: [
            {
              color: String("#33cc00"),
              title: String("🎚️ Done"),
              description: String(["The volume is now: **", volume, "%**"].join("")),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      } catch (err) {
        console.log("Error while changing the music volume");
        return;
      }
    }

    /*
    D!LOOP
    */
    if ((s4dmessage.content.toUpperCase() || "").startsWith("D!LOOP" || "")) {
      if (s4d.database.get(String(String(s4dmessage.guild.id) + "-musicmd")) == "false") {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("Music commands are off, type: **d!musicmd on**"),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      onOff = arguments[0].toUpperCase();
      if (!(onOff == "ON" || onOff == "OFF")) {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("The correct command is: **d!loop on/off**"),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      if (onOff == "ON") {
        if (s4dmessage.member.voice.channel == null) {
          s4dmessage.reply({
            content: String("You must be in a voice channel!"),
            allowedMentions: {
              repliedUser: true,
            },
          });
          return;
        }
        if (s4dmessage.member.voice.channelId != s4dmessage.guild.me.voice.channelId) {
          s4dmessage.reply({
            content: String("You must be in my voice channel!"),
            allowedMentions: {
              repliedUser: true,
            },
          });
          return;
        }
        s4d.player.getQueue(s4dmessage.guild.id).setRepeatMode(QueueRepeatMode.QUEUE);
        s4dmessage.reply({
          embeds: [
            {
              color: String("#33ff33"),
              title: String("🔁 Done"),
              description: String("Loop set to: **ON**"),
              footer: {
                text: String("The queue will be looped"),
                icon_url: String(),
              },
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      } else if (onOff == "OFF") {
        if (s4dmessage.member.voice.channel == null) {
          s4dmessage.reply({
            content: String("You must be in a voice channel!"),
            allowedMentions: {
              repliedUser: true,
            },
          });
          return;
        }
        if (s4dmessage.member.voice.channelId != s4dmessage.guild.me.voice.channelId) {
          s4dmessage.reply({
            content: String("You must be in my voice channel!"),
            allowedMentions: {
              repliedUser: true,
            },
          });
          return;
        }
        s4d.player.getQueue(s4dmessage.guild.id).setRepeatMode(QueueRepeatMode.OFF);
        s4dmessage.reply({
          embeds: [
            {
              color: String("#33ff33"),
              title: String("⏯️ Done"),
              description: String("Loop set to: **OFF**"),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      return;
    }

    /*
    D!NP
    */
    if ((s4dmessage.content.toUpperCase() || "").startsWith("D!NP" || "")) {
      if (s4d.database.get(String(String(s4dmessage.guild.id) + "-musicmd")) == "false") {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("Music commands are off, type: **d!musicmd on**"),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      if (s4dmessage.member.voice.channel == null) {
        s4dmessage.reply({
          content: String("You must be in a voice channel!"),
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      if (s4dmessage.member.voice.channelId != s4dmessage.guild.me.voice.channelId) {
        s4dmessage.reply({
          content: String("You must be in my voice channel!"),
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      if (!s4d.player.getQueue(s4dmessage.guild.id).playing) {
        s4dmessage.reply({
          content: String("There is no music playing!"),
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      s4dmessage.reply({
        embeds: [
          {
            color: String("#ffcc66"),
            title: String("📀 Now playing:"),
            description: String(["**", s4d.player.getQueue(s4dmessage.guild.id).current, "**"].join("")),
          },
        ],
        allowedMentions: {
          repliedUser: true,
        },
      });
      return;
    }

    /*
    D!QUEUE
    */
    if (
      (s4dmessage.content.toUpperCase() || "").startsWith("D!QUEUE" || "") ||
      (s4dmessage.content.toUpperCase() || "").startsWith("D!Q" || "")
    ) {
      if (s4d.database.get(String(String(s4dmessage.guild.id) + "-musicmd")) == "false") {
        s4dmessage.reply({
          embeds: [
            {
              color: String("#ff0000"),
              title: String("❌ Error"),
              description: String("Music commands are off, type: **d!musicmd on**"),
            },
          ],
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      if (!s4d.player.getQueue(s4dmessage.guild.id).playing) {
        s4dmessage.reply({
          content: String("There is no music playing!"),
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
      s4dmessage.reply({
        embeds: [
          {
            color: String("#ffcc66"),
            title: String("⌚ Server music queue:"),
            description: String([s4d.player.getQueue(s4dmessage.guild.id), "\n", "end :LUL:"].join("")),
          },
        ],
        allowedMentions: {
          repliedUser: true,
        },
      });
      return;
    }

    /*
    D!LYRIC
    */
    if ((command.toUpperCase() || "").startsWith("D!LYRIC" || "")) {
      s4dmessage.reply(String("What is the song name?")).then(() => {
        s4dmessage.channel
          .awaitMessages({
            filter: (m) => m.author.id === s4dmessage.author.id,
            time: 1 * 60 * 1000,
            max: 1,
          })
          .then(async (collected) => {
            s4d.reply = collected.first().content;
            s4d.message = collected.first();
            songName = s4d.reply;
            s4dmessage.reply(String("The name of the song author?")).then(() => {
              s4dmessage.channel
                .awaitMessages({
                  filter: (m) => m.author.id === s4dmessage.author.id,
                  time: 1 * 60 * 1000,
                  max: 1,
                })
                .then(async (collected) => {
                  s4d.reply = collected.first().content;
                  s4d.message = collected.first();
                  songAuthor = s4d.reply;
                  (async function (artist, title) {
                    let lyrics = (await lyricsFinder(artist, title)) || "Not Found!";

                    s4dmessage.reply({
                      embeds: [
                        {
                          color: String("#6633ff"),
                          title: String("**Here is the lyric:**"),
                          description: String(lyrics),
                          footer: {
                            text: String('(If it appear "Not Found" it means there is no lyric)'),
                            icon_url: String(),
                          },
                        },
                      ],
                      allowedMentions: {
                        repliedUser: true,
                      },
                    });
                    return;
                  })(songName, songAuthor);
                  s4d.reply = null;
                })
                .catch(async (e) => {
                  console.error(e);
                  s4dmessage.channel.send({
                    content: String("You didn't answer! :("),
                  });
                  return;
                });
            });

            s4d.reply = null;
          })
          .catch(async (e) => {
            console.error(e);
            s4dmessage.channel.send({
              content: String("You didn't answer! :("),
            });
            return;
          });
      });
      return;
    }
  });

  /*
    Image API section down here
  */

  // Image API's boring code
  s4d.client.on("messageCreate", async (s4dmessage) => {
    if (s4dmessage.author.bot) {
      return;
    }

    /*
    Image timer check
    */
    if (!s4d.database.has(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-imagetimer"].join("")))) {
      s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-imagetimer"].join("")), 0);
      return;
    }
    if (
      new Date().getTime() <=
        s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-imagetimer"].join(""))) + 15000 &&
      ((s4dmessage.content.toUpperCase() || "").startsWith("D!DELETE" || "") ||
        (s4dmessage.content.toUpperCase() || "").startsWith("D!SLAP" || "") ||
        (s4dmessage.content.toUpperCase() || "").startsWith("D!TRIGGERED" || "") ||
        (s4dmessage.content.toUpperCase() || "").startsWith("D!KISS" || "") ||
        (s4dmessage.content.toUpperCase() || "").startsWith("D!SPANK" || "") ||
        (s4dmessage.content.toUpperCase() || "").startsWith("D!MONSTER" || "") ||
        (s4dmessage.content.toUpperCase() || "").startsWith("D!2STONKS" || "") ||
        (s4dmessage.content.toUpperCase() || "").startsWith("D!GAY" || "") ||
        (s4dmessage.content.toUpperCase() || "").startsWith("D!GREY" || "") ||
        (s4dmessage.content.toUpperCase() || "").startsWith("D!INVERT" || "") ||
        (s4dmessage.content.toUpperCase() || "").startsWith("D!SEPIA" || "") ||
        (s4dmessage.content.toUpperCase() || "").startsWith("D!ADS" || "") ||
        (s4dmessage.content.toUpperCase() || "").startsWith("D!AFFECT" || "") ||
        (s4dmessage.content.toUpperCase() || "").startsWith("D!BEAUTIFUL" || "") ||
        (s4dmessage.content.toUpperCase() || "").startsWith("D!PAINT" || "") ||
        (s4dmessage.content.toUpperCase() || "").startsWith("D!WTFS" || "") ||
        (s4dmessage.content.toUpperCase() || "").startsWith("D!BLACKDISCORD" || "") ||
        (s4dmessage.content.toUpperCase() || "").startsWith("D!DISCORD" || "") ||
        (s4dmessage.content.toUpperCase() || "").startsWith("D!FACEPALM" || "") ||
        (s4dmessage.content.toUpperCase() || "").startsWith("D!HITLA" || "") ||
        (s4dmessage.content.toUpperCase() || "").startsWith("D!JAIL" || "") ||
        (s4dmessage.content.toUpperCase() || "").startsWith("D!KARABA" || "") ||
        (s4dmessage.content.toUpperCase() || "").startsWith("D!MMS" || "") ||
        (s4dmessage.content.toUpperCase() || "").startsWith("D!NOTSTONKS" || "") ||
        (s4dmessage.content.toUpperCase() || "").startsWith("D!POUTINE" || "") ||
        (s4dmessage.content.toUpperCase() || "").startsWith("D!RIP" || "") ||
        (s4dmessage.content.toUpperCase() || "").startsWith("D!STONK" || "") ||
        (s4dmessage.content.toUpperCase() || "").startsWith("D!TATOO" || "") ||
        (s4dmessage.content.toUpperCase() || "").startsWith("D!THOMAS" || "") ||
        (s4dmessage.content.toUpperCase() || "").startsWith("D!TRASH" || "") ||
        (s4dmessage.content.toUpperCase() || "").startsWith("D!CIRCLE" || ""))
    ) {
      s4dmessage.reply({
        embeds: [
          {
            color: String("#000000"),
            description: String(
              [
                "⏰ Slowdown man, you can create another image: **<t:",
                Math.floor(
                  (s4d.database.get(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-imagetimer"].join(""))) +
                    15000) /
                    1000
                ),
                ":R>**",
              ].join("")
            ),
          },
        ],
        allowedMentions: {
          repliedUser: true,
        },
      });
      return;
    }
    imageCooldown = new Date().getTime();

    /*
    D!DELETE
    */
    if (s4dmessage.content.toUpperCase() == "D!DELETE") {
      s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-imagetimer"].join("")), imageCooldown);
      s4dmessage.reply({
        files: [
          new Discord.MessageAttachment(
            await new DIG.Delete().getImage(
              s4dmessage.author.displayAvatarURL({
                format: "png",
              })
            ),
            "image.png"
          ),
        ],
      });
      return;
    } else if ((s4dmessage.content.toUpperCase() || "").startsWith("D!DELETE" || "")) {
      try {
        s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-imagetimer"].join("")), imageCooldown);
        s4dmessage.reply({
          files: [
            new Discord.MessageAttachment(
              await new DIG.Delete().getImage(
                s4dmessage.mentions.members.first().displayAvatarURL({
                  format: "png",
                })
              ),
              "image.png"
            ),
          ],
        });
        return;
      } catch (err) {
        s4dmessage.reply({
          content: String(String(s4dmessage.author) + " Please mention an user, thanks ;)"),
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
    }

    /*
    D!SLAP
    */
    if ((s4dmessage.content.toUpperCase() || "").startsWith("D!SLAP" || "")) {
      try {
        s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-imagetimer"].join("")), imageCooldown);
        s4dmessage.reply({
          files: [
            new Discord.MessageAttachment(
              await new DIG.Batslap().getImage(
                s4dmessage.author.displayAvatarURL({
                  format: "png",
                }),
                s4dmessage.mentions.members.first().displayAvatarURL({
                  format: "png",
                })
              ),
              "image.png"
            ),
          ],
        });
        return;
      } catch (err) {
        s4dmessage.reply({
          content: String(String(s4dmessage.author) + " Please mention an user, thanks ;)"),
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
    }

    /*
    D!TRIGGERED
    */
    if (s4dmessage.content.toUpperCase() == "D!TRIGGERED") {
      s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-imagetimer"].join("")), imageCooldown);
      s4dmessage.reply({
        files: [
          new Discord.MessageAttachment(
            await new DIG.Triggered().getImage(
              s4dmessage.author.displayAvatarURL({
                format: "png",
              })
            ),
            "image.gif"
          ),
        ],
      });
      return;
    } else if ((s4dmessage.content.toUpperCase() || "").startsWith("D!TRIGGERED" || "")) {
      try {
        s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-imagetimer"].join("")), imageCooldown);
        s4dmessage.reply({
          files: [
            new Discord.MessageAttachment(
              await new DIG.Triggered().getImage(
                s4dmessage.mentions.members.first().displayAvatarURL({
                  format: "png",
                })
              ),
              "image.gif"
            ),
          ],
        });
        return;
      } catch (err) {
        s4dmessage.reply({
          content: String(String(s4dmessage.author) + " Please mention an user, thanks ;)"),
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
    }

    /*
    D!KISS
    */
    if ((s4dmessage.content.toUpperCase() || "").startsWith("D!KISS" || "")) {
      try {
        s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-imagetimer"].join("")), imageCooldown);
        s4dmessage.reply({
          files: [
            new Discord.MessageAttachment(
              await new DIG.Kiss().getImage(
                s4dmessage.author.displayAvatarURL({
                  format: "png",
                }),
                s4dmessage.mentions.members.first().displayAvatarURL({
                  format: "png",
                })
              ),
              "image.png"
            ),
          ],
        });
        return;
      } catch (err) {
        s4dmessage.reply({
          content: String(String(s4dmessage.author) + " Please mention an user, thanks ;)"),
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
    }

    /*
    D!SPANK
    */
    if ((s4dmessage.content.toUpperCase() || "").startsWith("D!SPANK" || "")) {
      try {
        s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-imagetimer"].join("")), imageCooldown);
        s4dmessage.reply({
          files: [
            new Discord.MessageAttachment(
              await new DIG.Spank().getImage(
                s4dmessage.author.displayAvatarURL({
                  format: "png",
                }),
                s4dmessage.mentions.members.first().displayAvatarURL({
                  format: "png",
                })
              ),
              "image.png"
            ),
          ],
        });
        return;
      } catch (err) {
        s4dmessage.reply({
          content: String(String(s4dmessage.author) + " Please mention an user, thanks ;)"),
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
    }

    /*
    D!MONSTER
    */
    if ((s4dmessage.content.toUpperCase() || "").startsWith("D!MONSTER" || "")) {
      try {
        s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-imagetimer"].join("")), imageCooldown);
        s4dmessage.reply({
          files: [
            new Discord.MessageAttachment(
              await new DIG.Bed().getImage(
                s4dmessage.author.displayAvatarURL({
                  format: "png",
                }),
                s4dmessage.mentions.members.first().displayAvatarURL({
                  format: "png",
                })
              ),
              "image.png"
            ),
          ],
        });
        return;
      } catch (err) {
        s4dmessage.reply({
          content: String(String(s4dmessage.author) + " Please mention an user, thanks ;)"),
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
    }

    /*
    D!2STONKS
    */
    if ((s4dmessage.content.toUpperCase() || "").startsWith("D!2STONKS" || "")) {
      try {
        s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-imagetimer"].join("")), imageCooldown);
        s4dmessage.reply({
          files: [
            new Discord.MessageAttachment(
              await new DIG.DoubleStonk().getImage(
                s4dmessage.author.displayAvatarURL({
                  format: "png",
                }),
                s4dmessage.mentions.members.first().displayAvatarURL({
                  format: "png",
                })
              ),
              "image.png"
            ),
          ],
        });
        return;
      } catch (err) {
        s4dmessage.reply({
          content: String(String(s4dmessage.author) + " Please mention an user, thanks ;)"),
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
    }

    /*
    D!GAY
    */
    if (s4dmessage.content.toUpperCase() == "D!GAY") {
      s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-imagetimer"].join("")), imageCooldown);
      s4dmessage.reply({
        files: [
          new Discord.MessageAttachment(
            await new DIG.Gay().getImage(
              s4dmessage.author.displayAvatarURL({
                format: "png",
              })
            ),
            "image.png"
          ),
        ],
      });
      return;
    } else if ((s4dmessage.content.toUpperCase() || "").startsWith("D!GAY" || "")) {
      try {
        s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-imagetimer"].join("")), imageCooldown);
        s4dmessage.reply({
          files: [
            new Discord.MessageAttachment(
              await new DIG.Gay().getImage(
                s4dmessage.mentions.members.first().displayAvatarURL({
                  format: "png",
                })
              ),
              "image.png"
            ),
          ],
        });
        return;
      } catch (err) {
        s4dmessage.reply({
          content: String(String(s4dmessage.author) + " Please mention an user, thanks ;)"),
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
    }

    /*
    D!GREY
    */
    if (s4dmessage.content.toUpperCase() == "D!GREY") {
      s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-imagetimer"].join("")), imageCooldown);
      s4dmessage.reply({
        files: [
          new Discord.MessageAttachment(
            await new DIG.Greyscale().getImage(
              s4dmessage.author.displayAvatarURL({
                format: "png",
              })
            ),
            "image.png"
          ),
        ],
      });
      return;
    } else if ((s4dmessage.content.toUpperCase() || "").startsWith("D!GREY" || "")) {
      try {
        s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-imagetimer"].join("")), imageCooldown);
        s4dmessage.reply({
          files: [
            new Discord.MessageAttachment(
              await new DIG.Greyscale().getImage(
                s4dmessage.mentions.members.first().displayAvatarURL({
                  format: "png",
                })
              ),
              "image.png"
            ),
          ],
        });
        return;
      } catch (err) {
        s4dmessage.reply({
          content: String(String(s4dmessage.author) + " Please mention an user, thanks ;)"),
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
    }

    /*
    D!INVERT
    */
    if (s4dmessage.content.toUpperCase() == "D!INVERT") {
      s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-imagetimer"].join("")), imageCooldown);
      s4dmessage.reply({
        files: [
          new Discord.MessageAttachment(
            await new DIG.Invert().getImage(
              s4dmessage.author.displayAvatarURL({
                format: "png",
              })
            ),
            "image.png"
          ),
        ],
      });
      return;
    } else if ((s4dmessage.content.toUpperCase() || "").startsWith("D!INVERT" || "")) {
      try {
        s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-imagetimer"].join("")), imageCooldown);
        s4dmessage.reply({
          files: [
            new Discord.MessageAttachment(
              await new DIG.Invert().getImage(
                s4dmessage.mentions.members.first().displayAvatarURL({
                  format: "png",
                })
              ),
              "image.png"
            ),
          ],
        });
        return;
      } catch (err) {
        s4dmessage.reply({
          content: String(String(s4dmessage.author) + " Please mention an user, thanks ;)"),
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
    }

    /*
    D!SEPIA
    */
    if (s4dmessage.content.toUpperCase() == "D!SEPIA") {
      s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-imagetimer"].join("")), imageCooldown);
      s4dmessage.reply({
        files: [
          new Discord.MessageAttachment(
            await new DIG.Sepia().getImage(
              s4dmessage.author.displayAvatarURL({
                format: "png",
              })
            ),
            "image.png"
          ),
        ],
      });
      return;
    } else if ((s4dmessage.content.toUpperCase() || "").startsWith("D!SEPIA" || "")) {
      try {
        s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-imagetimer"].join("")), imageCooldown);
        s4dmessage.reply({
          files: [
            new Discord.MessageAttachment(
              await new DIG.Sepia().getImage(
                s4dmessage.mentions.members.first().displayAvatarURL({
                  format: "png",
                })
              ),
              "image.png"
            ),
          ],
        });
        return;
      } catch (err) {
        s4dmessage.reply({
          content: String(String(s4dmessage.author) + " Please mention an user, thanks ;)"),
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
    }

    /*
    D!ADS
    */
    if (s4dmessage.content.toUpperCase() == "D!ADS") {
      s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-imagetimer"].join("")), imageCooldown);
      s4dmessage.reply({
        files: [
          new Discord.MessageAttachment(
            await new DIG.Ad().getImage(
              s4dmessage.author.displayAvatarURL({
                format: "png",
              })
            ),
            "image.png"
          ),
        ],
      });
      return;
    } else if ((s4dmessage.content.toUpperCase() || "").startsWith("D!ADS" || "")) {
      try {
        s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-imagetimer"].join("")), imageCooldown);
        s4dmessage.reply({
          files: [
            new Discord.MessageAttachment(
              await new DIG.Ad().getImage(
                s4dmessage.mentions.members.first().displayAvatarURL({
                  format: "png",
                })
              ),
              "image.png"
            ),
          ],
        });
        return;
      } catch (err) {
        s4dmessage.reply({
          content: String(String(s4dmessage.author) + " Please mention an user, thanks ;)"),
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
    }

    /*
    D!AFFECT
    */
    if (s4dmessage.content.toUpperCase() == "D!AFFECT") {
      s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-imagetimer"].join("")), imageCooldown);
      s4dmessage.reply({
        files: [
          new Discord.MessageAttachment(
            await new DIG.Affect().getImage(
              s4dmessage.author.displayAvatarURL({
                format: "png",
              })
            ),
            "image.png"
          ),
        ],
      });
      return;
    } else if ((s4dmessage.content.toUpperCase() || "").startsWith("D!AFFECT" || "")) {
      try {
        s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-imagetimer"].join("")), imageCooldown);
        s4dmessage.reply({
          files: [
            new Discord.MessageAttachment(
              await new DIG.Affect().getImage(
                s4dmessage.mentions.members.first().displayAvatarURL({
                  format: "png",
                })
              ),
              "image.png"
            ),
          ],
        });
        return;
      } catch (err) {
        s4dmessage.reply({
          content: String(String(s4dmessage.author) + " Please mention an user, thanks ;)"),
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
    }

    /*
    D!BEAUTIFUL
    */
    if (s4dmessage.content.toUpperCase() == "D!BEAUTIFUL") {
      s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-imagetimer"].join("")), imageCooldown);
      s4dmessage.reply({
        files: [
          new Discord.MessageAttachment(
            await new DIG.Beautiful().getImage(
              s4dmessage.author.displayAvatarURL({
                format: "png",
              })
            ),
            "image.png"
          ),
        ],
      });
      return;
    } else if ((s4dmessage.content.toUpperCase() || "").startsWith("D!BEAUTIFUL" || "")) {
      try {
        s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-imagetimer"].join("")), imageCooldown);
        s4dmessage.reply({
          files: [
            new Discord.MessageAttachment(
              await new DIG.Beautiful().getImage(
                s4dmessage.mentions.members.first().displayAvatarURL({
                  format: "png",
                })
              ),
              "image.png"
            ),
          ],
        });
        return;
      } catch (err) {
        s4dmessage.reply({
          content: String(String(s4dmessage.author) + " Please mention an user, thanks ;)"),
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
    }

    /*
    D!PAINT
    */
    if (s4dmessage.content.toUpperCase() == "D!PAINT") {
      s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-imagetimer"].join("")), imageCooldown);
      s4dmessage.reply({
        files: [
          new Discord.MessageAttachment(
            await new DIG.Bobross().getImage(
              s4dmessage.author.displayAvatarURL({
                format: "png",
              })
            ),
            "image.png"
          ),
        ],
      });
      return;
    } else if ((s4dmessage.content.toUpperCase() || "").startsWith("D!PAINT" || "")) {
      try {
        s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-imagetimer"].join("")), imageCooldown);
        s4dmessage.reply({
          files: [
            new Discord.MessageAttachment(
              await new DIG.Bobross().getImage(
                s4dmessage.mentions.members.first().displayAvatarURL({
                  format: "png",
                })
              ),
              "image.png"
            ),
          ],
        });
        return;
      } catch (err) {
        s4dmessage.reply({
          content: String(String(s4dmessage.author) + " Please mention an user, thanks ;)"),
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
    }

    /*
    D!WTFS
    */
    if (s4dmessage.content.toUpperCase() == "D!WTFS") {
      s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-imagetimer"].join("")), imageCooldown);
      s4dmessage.reply({
        files: [
          new Discord.MessageAttachment(
            await new DIG.ConfusedStonk().getImage(
              s4dmessage.author.displayAvatarURL({
                format: "png",
              })
            ),
            "image.png"
          ),
        ],
      });
      return;
    } else if ((s4dmessage.content.toUpperCase() || "").startsWith("D!WTFS" || "")) {
      try {
        s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-imagetimer"].join("")), imageCooldown);
        s4dmessage.reply({
          files: [
            new Discord.MessageAttachment(
              await new DIG.ConfusedStonk().getImage(
                s4dmessage.mentions.members.first().displayAvatarURL({
                  format: "png",
                })
              ),
              "image.png"
            ),
          ],
        });
        return;
      } catch (err) {
        s4dmessage.reply({
          content: String(String(s4dmessage.author) + " Please mention an user, thanks ;)"),
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
    }

    /*
    D!BLACKDISCORD
    */
    if (s4dmessage.content.toUpperCase() == "D!BLACKDISCORD") {
      s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-imagetimer"].join("")), imageCooldown);
      s4dmessage.reply({
        files: [
          new Discord.MessageAttachment(
            await new DIG.DiscordBlack().getImage(
              s4dmessage.author.displayAvatarURL({
                format: "png",
              })
            ),
            "image.png"
          ),
        ],
      });
      return;
    } else if ((s4dmessage.content.toUpperCase() || "").startsWith("D!BLACKDISCORD" || "")) {
      try {
        s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-imagetimer"].join("")), imageCooldown);
        s4dmessage.reply({
          files: [
            new Discord.MessageAttachment(
              await new DIG.DiscordBlack().getImage(
                s4dmessage.mentions.members.first().displayAvatarURL({
                  format: "png",
                })
              ),
              "image.png"
            ),
          ],
        });
        return;
      } catch (err) {
        s4dmessage.reply({
          content: String(String(s4dmessage.author) + " Please mention an user, thanks ;)"),
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
    }

    /*
    D!DISCORD
    */
    if (s4dmessage.content.toUpperCase() == "D!DISCORD") {
      s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-imagetimer"].join("")), imageCooldown);
      s4dmessage.reply({
        files: [
          new Discord.MessageAttachment(
            await new DIG.DiscordBlue().getImage(
              s4dmessage.author.displayAvatarURL({
                format: "png",
              })
            ),
            "image.png"
          ),
        ],
      });
      return;
    } else if ((s4dmessage.content.toUpperCase() || "").startsWith("D!DISCORD" || "")) {
      try {
        s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-imagetimer"].join("")), imageCooldown);
        s4dmessage.reply({
          files: [
            new Discord.MessageAttachment(
              await new DIG.DiscordBlue().getImage(
                s4dmessage.mentions.members.first().displayAvatarURL({
                  format: "png",
                })
              ),
              "image.png"
            ),
          ],
        });
        return;
      } catch (err) {
        s4dmessage.reply({
          content: String(String(s4dmessage.author) + " Please mention an user, thanks ;)"),
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
    }

    /*
    D!FACEPALM
    */
    if (s4dmessage.content.toUpperCase() == "D!FACEPALM") {
      s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-imagetimer"].join("")), imageCooldown);
      s4dmessage.reply({
        files: [
          new Discord.MessageAttachment(
            await new DIG.Facepalm().getImage(
              s4dmessage.author.displayAvatarURL({
                format: "png",
              })
            ),
            "image.png"
          ),
        ],
      });
      return;
    } else if ((s4dmessage.content.toUpperCase() || "").startsWith("D!FACEPALM" || "")) {
      try {
        s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-imagetimer"].join("")), imageCooldown);
        s4dmessage.reply({
          files: [
            new Discord.MessageAttachment(
              await new DIG.Facepalm().getImage(
                s4dmessage.mentions.members.first().displayAvatarURL({
                  format: "png",
                })
              ),
              "image.png"
            ),
          ],
        });
        return;
      } catch (err) {
        s4dmessage.reply({
          content: String(String(s4dmessage.author) + " Please mention an user, thanks ;)"),
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
    }

    /*
    D!HITLA
    */
    if (s4dmessage.content.toUpperCase() == "D!HITLA") {
      s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-imagetimer"].join("")), imageCooldown);
      s4dmessage.reply({
        files: [
          new Discord.MessageAttachment(
            await new DIG.Hitler().getImage(
              s4dmessage.author.displayAvatarURL({
                format: "png",
              })
            ),
            "image.png"
          ),
        ],
      });
      return;
    } else if ((s4dmessage.content.toUpperCase() || "").startsWith("D!HITLA" || "")) {
      try {
        s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-imagetimer"].join("")), imageCooldown);
        s4dmessage.reply({
          files: [
            new Discord.MessageAttachment(
              await new DIG.Hitler().getImage(
                s4dmessage.mentions.members.first().displayAvatarURL({
                  format: "png",
                })
              ),
              "image.png"
            ),
          ],
        });
        return;
      } catch (err) {
        s4dmessage.reply({
          content: String(String(s4dmessage.author) + " Please mention an user, thanks ;)"),
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
    }

    /*
    D!JAIL
    */
    if (s4dmessage.content.toUpperCase() == "D!JAIL") {
      s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-imagetimer"].join("")), imageCooldown);
      s4dmessage.reply({
        files: [
          new Discord.MessageAttachment(
            await new DIG.Jail().getImage(
              s4dmessage.author.displayAvatarURL({
                format: "png",
              })
            ),
            "image.png"
          ),
        ],
      });
      return;
    } else if ((s4dmessage.content.toUpperCase() || "").startsWith("D!JAIL" || "")) {
      try {
        s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-imagetimer"].join("")), imageCooldown);
        s4dmessage.reply({
          files: [
            new Discord.MessageAttachment(
              await new DIG.Jail().getImage(
                s4dmessage.mentions.members.first().displayAvatarURL({
                  format: "png",
                })
              ),
              "image.png"
            ),
          ],
        });
        return;
      } catch (err) {
        s4dmessage.reply({
          content: String(String(s4dmessage.author) + " Please mention an user, thanks ;)"),
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
    }

    /*
    D!KARABA
    */
    if (s4dmessage.content.toUpperCase() == "D!KARABA") {
      s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-imagetimer"].join("")), imageCooldown);
      s4dmessage.reply({
        files: [
          new Discord.MessageAttachment(
            await new DIG.Karaba().getImage(
              s4dmessage.author.displayAvatarURL({
                format: "png",
              })
            ),
            "image.png"
          ),
        ],
      });
      return;
    } else if ((s4dmessage.content.toUpperCase() || "").startsWith("D!KARABA" || "")) {
      try {
        s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-imagetimer"].join("")), imageCooldown);
        s4dmessage.reply({
          files: [
            new Discord.MessageAttachment(
              await new DIG.Karaba().getImage(
                s4dmessage.mentions.members.first().displayAvatarURL({
                  format: "png",
                })
              ),
              "image.png"
            ),
          ],
        });
        return;
      } catch (err) {
        s4dmessage.reply({
          content: String(String(s4dmessage.author) + " Please mention an user, thanks ;)"),
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
    }

    /*
    D!MMS
    */
    if (s4dmessage.content.toUpperCase() == "D!MMS") {
      s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-imagetimer"].join("")), imageCooldown);
      s4dmessage.reply({
        files: [
          new Discord.MessageAttachment(
            await new DIG.Mms().getImage(
              s4dmessage.author.displayAvatarURL({
                format: "png",
              })
            ),
            "image.png"
          ),
        ],
      });
      return;
    } else if ((s4dmessage.content.toUpperCase() || "").startsWith("D!MMS" || "")) {
      try {
        s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-imagetimer"].join("")), imageCooldown);
        s4dmessage.reply({
          files: [
            new Discord.MessageAttachment(
              await new DIG.Mms().getImage(
                s4dmessage.mentions.members.first().displayAvatarURL({
                  format: "png",
                })
              ),
              "image.png"
            ),
          ],
        });
        return;
      } catch (err) {
        s4dmessage.reply({
          content: String(String(s4dmessage.author) + " Please mention an user, thanks ;)"),
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
    }

    /*
    D!NOTSTONKS
    */
    if (s4dmessage.content.toUpperCase() == "D!NOTSTONKS") {
      s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-imagetimer"].join("")), imageCooldown);
      s4dmessage.reply({
        files: [
          new Discord.MessageAttachment(
            await new DIG.NotStonk().getImage(
              s4dmessage.author.displayAvatarURL({
                format: "png",
              })
            ),
            "image.png"
          ),
        ],
      });
      return;
    } else if ((s4dmessage.content.toUpperCase() || "").startsWith("D!NOTSTONKS" || "")) {
      try {
        s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-imagetimer"].join("")), imageCooldown);
        s4dmessage.reply({
          files: [
            new Discord.MessageAttachment(
              await new DIG.NotStonk().getImage(
                s4dmessage.mentions.members.first().displayAvatarURL({
                  format: "png",
                })
              ),
              "image.png"
            ),
          ],
        });
        return;
      } catch (err) {
        s4dmessage.reply({
          content: String(String(s4dmessage.author) + " Please mention an user, thanks ;)"),
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
    }

    /*
    D!POUTINE
    */
    if (s4dmessage.content.toUpperCase() == "D!POUTINE") {
      s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-imagetimer"].join("")), imageCooldown);
      s4dmessage.reply({
        files: [
          new Discord.MessageAttachment(
            await new DIG.Poutine().getImage(
              s4dmessage.author.displayAvatarURL({
                format: "png",
              })
            ),
            "image.png"
          ),
        ],
      });
      return;
    } else if ((s4dmessage.content.toUpperCase() || "").startsWith("D!POUTINE" || "")) {
      try {
        s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-imagetimer"].join("")), imageCooldown);
        s4dmessage.reply({
          files: [
            new Discord.MessageAttachment(
              await new DIG.Poutine().getImage(
                s4dmessage.mentions.members.first().displayAvatarURL({
                  format: "png",
                })
              ),
              "image.png"
            ),
          ],
        });
        return;
      } catch (err) {
        s4dmessage.reply({
          content: String(String(s4dmessage.author) + " Please mention an user, thanks ;)"),
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
    }

    /*
    D!RIP
    */
    if (s4dmessage.content.toUpperCase() == "D!RIP") {
      s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-imagetimer"].join("")), imageCooldown);
      s4dmessage.reply({
        files: [
          new Discord.MessageAttachment(
            await new DIG.Rip().getImage(
              s4dmessage.author.displayAvatarURL({
                format: "png",
              })
            ),
            "image.png"
          ),
        ],
      });
      return;
    } else if ((s4dmessage.content.toUpperCase() || "").startsWith("D!RIP" || "")) {
      try {
        s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-imagetimer"].join("")), imageCooldown);
        s4dmessage.reply({
          files: [
            new Discord.MessageAttachment(
              await new DIG.Rip().getImage(
                s4dmessage.mentions.members.first().displayAvatarURL({
                  format: "png",
                })
              ),
              "image.png"
            ),
          ],
        });
        return;
      } catch (err) {
        s4dmessage.reply({
          content: String(String(s4dmessage.author) + " Please mention an user, thanks ;)"),
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
    }

    /*
    D!STONK
    */
    if (s4dmessage.content.toUpperCase() == "D!STONK") {
      s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-imagetimer"].join("")), imageCooldown);
      s4dmessage.reply({
        files: [
          new Discord.MessageAttachment(
            await new DIG.Stonk().getImage(
              s4dmessage.author.displayAvatarURL({
                format: "png",
              })
            ),
            "image.png"
          ),
        ],
      });
      return;
    } else if ((s4dmessage.content.toUpperCase() || "").startsWith("D!STONK" || "")) {
      try {
        s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-imagetimer"].join("")), imageCooldown);
        s4dmessage.reply({
          files: [
            new Discord.MessageAttachment(
              await new DIG.Stonk().getImage(
                s4dmessage.mentions.members.first().displayAvatarURL({
                  format: "png",
                })
              ),
              "image.png"
            ),
          ],
        });
        return;
      } catch (err) {
        s4dmessage.reply({
          content: String(String(s4dmessage.author) + " Please mention an user, thanks ;)"),
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
    }

    /*
    D!TATOO
    */
    if (s4dmessage.content.toUpperCase() == "D!TATOO") {
      s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-imagetimer"].join("")), imageCooldown);
      s4dmessage.reply({
        files: [
          new Discord.MessageAttachment(
            await new DIG.Tatoo().getImage(
              s4dmessage.author.displayAvatarURL({
                format: "png",
              })
            ),
            "image.png"
          ),
        ],
      });
      return;
    } else if ((s4dmessage.content.toUpperCase() || "").startsWith("D!TATOO" || "")) {
      try {
        s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-imagetimer"].join("")), imageCooldown);
        s4dmessage.reply({
          files: [
            new Discord.MessageAttachment(
              await new DIG.Tatoo().getImage(
                s4dmessage.mentions.members.first().displayAvatarURL({
                  format: "png",
                })
              ),
              "image.png"
            ),
          ],
        });
        return;
      } catch (err) {
        s4dmessage.reply({
          content: String(String(s4dmessage.author) + " Please mention an user, thanks ;)"),
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
    }

    /*
    D!THOMAS
    */
    if (s4dmessage.content.toUpperCase() == "D!THOMAS") {
      s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-imagetimer"].join("")), imageCooldown);
      s4dmessage.reply({
        files: [
          new Discord.MessageAttachment(
            await new DIG.Thomas().getImage(
              s4dmessage.author.displayAvatarURL({
                format: "png",
              })
            ),
            "image.png"
          ),
        ],
      });
      return;
    } else if ((s4dmessage.content.toUpperCase() || "").startsWith("D!THOMAS" || "")) {
      try {
        s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-imagetimer"].join("")), imageCooldown);
        s4dmessage.reply({
          files: [
            new Discord.MessageAttachment(
              await new DIG.Thomas().getImage(
                s4dmessage.mentions.members.first().displayAvatarURL({
                  format: "png",
                })
              ),
              "image.png"
            ),
          ],
        });
        return;
      } catch (err) {
        s4dmessage.reply({
          content: String(String(s4dmessage.author) + " Please mention an user, thanks ;)"),
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
    }

    /*
    D!TRASH
    */
    if (s4dmessage.content.toUpperCase() == "D!TRASH") {
      s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-imagetimer"].join("")), imageCooldown);
      s4dmessage.reply({
        files: [
          new Discord.MessageAttachment(
            await new DIG.Trash().getImage(
              s4dmessage.author.displayAvatarURL({
                format: "png",
              })
            ),
            "image.png"
          ),
        ],
      });
      return;
    } else if ((s4dmessage.content.toUpperCase() || "").startsWith("D!TRASH" || "")) {
      try {
        s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-imagetimer"].join("")), imageCooldown);
        s4dmessage.reply({
          files: [
            new Discord.MessageAttachment(
              await new DIG.Trash().getImage(
                s4dmessage.mentions.members.first().displayAvatarURL({
                  format: "png",
                })
              ),
              "image.png"
            ),
          ],
        });
        return;
      } catch (err) {
        s4dmessage.reply({
          content: String(String(s4dmessage.author) + " Please mention an user, thanks ;)"),
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
    }

    /*
    D!CIRCLE
    */
    if (s4dmessage.content.toUpperCase() == "D!CIRCLE") {
      s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-imagetimer"].join("")), imageCooldown);
      s4dmessage.reply({
        files: [
          new Discord.MessageAttachment(
            await new DIG.Circle().getImage(
              s4dmessage.author.displayAvatarURL({
                format: "png",
              })
            ),
            "image.png"
          ),
        ],
      });
      return;
    } else if ((s4dmessage.content.toUpperCase() || "").startsWith("D!CIRCLE" || "")) {
      try {
        s4d.database.set(String([(s4dmessage.guild || {}).id, "-", s4dmessage.author, "-imagetimer"].join("")), imageCooldown);
        s4dmessage.reply({
          files: [
            new Discord.MessageAttachment(
              await new DIG.Circle().getImage(
                s4dmessage.mentions.members.first().displayAvatarURL({
                  format: "png",
                })
              ),
              "image.png"
            ),
          ],
        });
        return;
      } catch (err) {
        s4dmessage.reply({
          content: String(String(s4dmessage.author) + " Please mention an user, thanks ;)"),
          allowedMentions: {
            repliedUser: true,
          },
        });
        return;
      }
    }
  });

  return s4d;
})();

// You made it to the end, GG!
